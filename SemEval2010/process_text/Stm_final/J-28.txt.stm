approxim-strategyproof and tractabl multi-unit auction anshul kothari∗ david c. park† subhash suri∗ abstract we present an approxim-effici and  approximatelystrategyproof auction mechan for a singl-good multi-unit alloc problem. the bid languag in our auction  allow margin-decreas piecewis constant curv. first, we develop a fulli polynomi-time approxim scheme for the multi-unit alloc problem, which comput a (1 +  )approxim in worst-case time t = o(n3 / ), given n bid each with a constant number of piec. second, we emb thi approxim scheme within a vickrei-clark-grove (vcg) mechan and comput payment to n agent for an  asymptot cost of o(t log n). the maxim possibl gain from  manipul to a bidder in the combin scheme is bound by /(1+ )v , where v is the total surplu in the effici outcom. categori and subject descriptor f.2 [theori of comput]: analysi of algorithm and  problem complex; j.4 [comput applic]: social and  behavior scienc-econom. gener term algorithm, econom. 1. introduct in thi paper we present a fulli polynomi-time  approxim scheme for the singl-good multi-unit auction problem. our scheme is both approxim effici and approxim  strategyproof. the auction set consid in our paper ar  motiv by recent trend in electron commerc; for instanc, corpor ar increasingli us auction for their strateg sourc. we consid both a revers auction variat and a forward auction variat, and propos a compact and  express bid languag that allow margin-decreas piecewis constant curv. in the revers auction, we consid a singl buyer with a demand for m unit of a good and n supplier, each with a margin-decreas piecewis-constant cost function. in  addit, each supplier can also express an upper bound, or capac constraint on the number of unit she can suppli. the revers variat model, for exampl, a procur auction to obtain raw materi or other servic (e.g. circuit board, power  supplier, toner cartridg), with flexibl-size lot. in the forward auction, we consid a singl seller with m unit of a good and n buyer, each with a margin-decreas piecewis-constant valuat function. a buyer can also express a lower bound, or minimum lot size, on the number of unit she demand. the forward variat model, for exampl, an auction to sell excess inventori in flexibl-size lot. we consid the comput complex of implement the vickrei-clark-grove [22, 5, 11] mechan for the  multiunit auction problem. the vickrei-clark-grove (vcg)  mechan ha a number of interest econom properti in thi set, includ strategyproof, such that truth bid is a domin strategi for buyer in the forward auction and seller in the revers auction, and alloc effici, such that the  outcom maxim the total surplu in the system. howev, as we discuss in section 2, the applic of the vcg-base approach is limit in the revers direct to instanc in which the total payment to the seller ar less than the valu of the outcom to the buyer. otherwis, either the auction must run at a loss in these instanc, or the buyer cannot be expect to voluntarili choos to particip. thi is an exampl of the budget-deficit problem that often occur in effici mechan design [17]. the comput problem is interest, becaus even with margin-decreas bid curv, the underli alloc  problem turn out to (weakli) intract. for instanc, the classic 0/1 knapsack is a special case of thi problem.1 we model the 1 howev, the problem can be solv easili by a greedi scheme if we remov all capac constraint from the seller and all 166 alloc problem as a novel and interest gener of the classic knapsack problem, and develop a fulli  polynomialtim approxim scheme, comput a (1 + )-approxim in worst-case time t = o(n3 /ε), where each bid ha a fix number of piecewis constant piec. given thi scheme, a straightforward comput of the vcg payment to all n agent requir time o(nt). we comput  approxim vcg payment in worst-case time o(αt log(αn/ε)), where α is a constant that quantifi a reason no-monopoli assumpt. specif, in the revers auction, suppos that c(i) is the minim cost for procur m unit with all seller i, and c(i \ i) is the minim cost without seller i. then, the  constant α is defin as an upper bound for the ratio c(i \i)/c(i), over all seller i. thi upper-bound tend to 1 as the number of seller increas. the approxim vcg mechan is ( ε 1+ε )-strategyproof for an approxim to within (1 + ) of the optim alloc. thi mean that a bidder can gain at most ( ε 1+ε )v from a  nontruth bid, where v is the total surplu from the effici  alloc. as such, thi is an exampl of a computation-tractabl ε-domin result.2 in practic, we can have good confid that bidder without good inform about the bid  strategi of other particip will have littl to gain from attempt at manipul. section 2 formal defin the forward and revers auction, and defin the vcg mechan. we also prove our claim about ε-strategyproof. section 3 provid the gener knapsack formul for the multi-unit alloc problem and introduc the fulli polynomi time approxim scheme.  section 4 defin the approxim scheme for the payment in the vcg mechan. section 5 conclud. 1.1 relat work there ha been consider interest in recent year in  character polynomi-time or approxim special case of the gener combinatori alloc problem, in which there ar  multipl differ item. the combinatori alloc problem (cap) is both np-complet and inapproxim (e.g. [6]). although some polynomi-time case have been identifi for the cap [6, 20], introduc an express exclus-or bid languag quickli break these special case. we identifi a non-trivial but approxim alloc problem with an express  exclusiveor bid languag-the bid taker in our set is allow to accept at most on point on the bid curv. the idea of us approxim within mechan, while retain either full-strategyproof or ε-domin ha receiv some previou attent. for instanc, lehmann et al. [15]  propos a greedi and strategyproof approxim to a singl-mind combinatori auction problem. nisan & ronen [18] discuss approxim vcg-base mechan, but either appeal to  particular maxim-in-rang approxim to retain full  strategyproof, or to resourc-bound agent with inform or  comput limit on the abil to comput strategi.  feigenminimum-lot size constraint from the buyer. 2 howev, thi mai not be an exampl of what feigenbaum & shenker refer to as a toler-manipul mechan [8]  becaus we have not tri to bound the effect of such a  manipul on the effici of the outcom. vcg mechan do have a natur self-correct properti, though, becaus a us  manipul to an agent is a report valu that improv the total valu of the alloc base on the report of other agent and the agent"s own valu. baum & shenker [8] have defin the concept of strateg faith approxim, and propos the studi of  approxim as an import direct for algorithm mechan  design. schummer [21] and park et al [19] have previous  consid ε-domin, in the context of econom imposs result, for exampl in combinatori exchang. eso et al. [7] have studi a similar procur problem, but for a differ volum discount model. thi earlier work  formul the problem as a gener mix integ linear program, and give some empir result on simul data. kalagnanam et al. [12] address doubl auction, where multipl buyer and seller trade a divis good. the focu of thi  paper is also differ: it investig the equilibrium price us the demand and suppli curv, wherea our focu is on effici mechan design. ausubel [1] ha propos an ascend-price multi-unit auction for buyer with margin-decreas valu [1], with an interpret as a primal-dual algorithm [2]. 2. approxim-strategyproof vcg auction in thi section, we first describ the margin-decreas  piecewis bid languag that is us in our forward and revers auction. continu, we introduc the vcg mechan for the problem and the ε-domin result for approxim to vcg outcom. we also discuss the econom properti of vcg mechan in these forward and revers auction multi-unit  set. 2.1 margin-decreas piecewis bid we provid a piecewis-constant and margin-decreas  bid languag. thi bid languag is express for a  natur class of valuat and cost function: fix unit price over interv of quantiti. see figur 1 for an exampl. in  addit, we slightli relax the margin-decreas requir to allow: a bidder in the forward auction to state a minim  purchas amount, such that she ha zero valu for quantiti smaller than that amount; a seller in the revers auction to state a capac constraint, such that she ha an effect infinit cost to suppli quantiti in excess of a particular amount. revers auction bid 7 5 10 20 25 10 8 quantiti price 7 5 10 20 25 10 8 quantiti price forward auction bid figur 1: margin-decreas, piecewis constant bid. in the forward auction bid, the bidder offer $10 per unit for quantiti in the rang [5, 10), $8 per unit in the rang [10, 20), and $7 in the rang [20, 25]. her valuat is zero for quantiti outsid the rang [10, 25]. in the revers auction bid, the cost of the seller is ∞ outsid the rang [10, 25]. in detail, in a forward auction, a bid from buyer i can be written as a list of (quantiti-rang, unit-price) tupl, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantiti. the interpret is that the bidder"s valuat in the 167 (semi-open) quantiti rang [uj i , uj+1 i ) is pj i for each unit.  addition, it is assum that the valuat is 0 for quantiti less than u1 i as well as for quantiti more than um i . thi is  implement by ad two dummi bid tupl, with zero price in the rang [0, u1 i ) and (umi i , ∞). we interpret the bid list as  defin a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1. in order to resolv the boundari condit, we assum that the bid price for the upper bound quantiti umi i is pbid,i(umi i ) = umi i pmi−1 i . a seller"s bid is similarli defin in the revers auction. the interpret is that the bidder"s cost in the (semi-open)  quantiti rang [uj i , uj+1 i ) is pj i for each unit. addition, it is  assum that the cost is ∞ for quantiti less than u1 i as well as for quantiti more than um i . equival, the unit price in the rang [0, u1 i ) and (um i , ∞) ar infin. we interpret the bid list as defin a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 vcg-base multi-unit auction we construct the tractabl and approxim-strategyproof  multiunit auction around a vcg mechan. we assum that all agent have quasilinear util function; that is, ui(q, p) = vi(q)− p, for a buyer i with valuat vi(q) for q unit at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. thi is a standard assumpt in the auction literatur, equival to assum risk-neutral agent [13]. we will us the term payoff interchang for util. in the forward auction, there is a seller with m unit to sell. we assum that thi seller ha no intrins valu for the item. given a set of bid from i agent, let v (i) denot the maxim revenu to the seller, given that at most on point on the bid curv can be select from each agent and no more than m unit of the item can be sold. let x∗ = (x∗ 1, . . . , x∗ n ) denot the solut to thi winner- determin problem, where x∗ i is the number of unit sold to agent i. similarli, let v (i \ i) denot the  maxim revenu to the seller without bid from agent i. the vcg mechan is defin as follow: 1. receiv piecewis-constant bid curv and capac  constraint from all the buyer. 2. implement the outcom x∗ that solv the winner-determin problem with all buyer. 3. collect payment pvcg,i = pbid,i(x∗ i ) − [v (i) − v (i \ i)] from each buyer, and pass the payment to the seller. in thi forward auction, the vcg mechan is strategyproof for buyer, which mean that truth bid is a domin  strategi, i.e. util maxim whatev the bid of other buyer. in addit, the vcg mechan is alloc-effici, and the payment from each buyer ar alwai posit.3 moreov, each buyer pai less than it valu, and receiv payoff v (i)−v (i \ i) in equilibrium; thi is precis the margin-valu that buyer i contribut to the econom effici of the system. in the revers auction, there is a buyer with m unit to bui, and n supplier. we assum that the buyer ha valu v > 0 to purchas all m unit, but zero valu otherwis. to simplifi the mechan design problem we assum that the buyer will truthfulli announc thi valu to the mechan.4 the  winner3 in fact, the vcg mechan maxim the expect payoff to the seller across all effici mechan, even allow for bayesian-nash implement [14]. 4 without thi assumpt, the myerson-satterthwait [17]  imposs result would alreadi impli that we should not expect an effici trade mechan in thi set. determin problem in the revers auction is to determin the alloc, x∗ , that minim the cost to the buyer, or forfeit trade if the minim cost is greater than valu, v . let c(i) denot the minim cost given bid from all seller, and let c(i \i) denot the minim cost without bid from seller i. we can assum, without loss of gener, that there is an effici trade and v ≥ c(i). otherwis, then the effici  outcom is no trade, and the outcom of the vcg mechan is no trade and no payment. the vcg mechan implement the outcom x∗ that  minim cost base on bid from all seller, and then provid  payment pvcg,i = pask,i(x∗ i )+[v −c(i)−max(0, v −c(i\i))] to each seller. the total payment is collect from the buyer. again, in equilibrium each seller"s payoff is exactli the margin-valu that the seller contribut to the econom effici of the  system; in the simpl case that v ≥ c(i \ i) for all seller i, thi is precis c(i \ i) − c(i). although the vcg mechan remain strategyproof for  seller in the revers direct, it applic is limit to case in which the total payment to the seller ar less than the buyer"s valu. otherwis, there will be instanc in which the buyer will not choos to voluntarili particip in the mechan, base on it own valu and it belief about the cost of seller. thi lead to a loss in effici when the buyer choos not to particip, becaus effici trade ar miss. thi problem with the size of the payment, doe not occur in simpl singl-item revers  auction, or even in multi-unit revers auction with a buyer that ha a constant margin-valuat for each addit item that she procur.5 intuit, the problem occur in the revers multi-unit  set becaus the buyer demand a fix number of item, and ha zero valu without them. thi lead to the possibl of the trade be conting on the presenc of particular, so-call pivot seller. defin a seller i as pivot, if c(i) ≤ v but c(i\i) > v . in word, there would be no effici trade without the seller. ani time there is a pivot seller, the vcg payment to that seller allow her to extract all of the surplu, and the  payment ar too larg to sustain with the buyer"s valu unless thi is the onli win seller. concret, we have thi particip problem in the revers auction when the total payoff to the seller, in equilibrium,  exce the total payoff from the effici alloc: v − c(i) ≥ i [v − c(i) − max(0, v − c(i \ i))] as state abov, first notic that we requir v > c(i \ i) for all seller i. in other word, there must be no pivot seller. given thi, it is then necessari and suffici that: v − c(i) ≥ i (c(i \ i) − c(i)) (1) 5 to make the revers auction symmetr with the forward  direct, we would need a buyer with a constant margin-valu to bui the first m unit, and zero valu for addit unit. the payment to the seller would never exce the buyer"s valu in thi case. convers, to make the forward auction symmetr with the revers auction, we would need a seller with a constant (and high) margin-cost to sell anyth less than the first m unit, and then a low (or zero) margin cost. the total payment receiv by the seller can be less than the seller"s cost for the outcom in thi case. 168 in word, the surplu of the effici alloc must be greater than the total margin-surplu provid by each seller.6 consid an exampl with 3 agent {1, 2, 3}, and v = 150 and c(123) = 50. condit (1) hold when c(12) = c(23) = 70 and c(13) = 100, but not when c(12) = c(23) = 80 and c(13) = 100. in the first case, the agent payoff π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20). in the second case, the payoff ar π = (−10, 30, 50, 30). on thing we do know, becaus the vcg mechan will maxim the payoff to the buyer across all effici mechan [14], is that whenev eq. 1 is not satisfi there can be no  effici auction mechan.7 2.3 ε-strategyproof we now consid the same vcg mechan, but with an  approxim scheme for the underli alloc problem. we deriv an ε-strategyproof result, that bound the maxim gain in payoff that an agent can expect to achiev through a  unilater deviat from follow a simpl truth-reveal strategi. we describ the result for the forward auction direct, but it is quit a gener observ. as befor, let v (i) denot the valu of the optim solut to the alloc problem with truth bid from all agent, and v (i \i) denot the valu of the optim solut comput  without bid from agent i. let ˆv (i) and ˆv (i \ i) denot the valu of the alloc comput with an approxim scheme, and assum that the approxim satisfi: (1 + ) ˆv (i) ≥ v (i) for some > 0. we provid such an approxim scheme for our set later in the paper. let ˆx denot the alloc implement by the approxim scheme. the payoff to agent i, for announc valuat ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆv (i \ i) the final term is independ of the agent"s announc valu, and can be ignor in an incent-analysi. howev, agent i can try to improv it payoff through the effect of it announc valu on the alloc ˆx implement by the mechan. in  particular, agent i want the mechan to select ˆx to maxim the sum of it true valu, vi(ˆxi), and the report valu of the other agent, Èj=i ˆvj (ˆxj). if the mechan"s alloc algorithm is optim, then all the agent need to do is truthfulli state it valu and the mechan will do the rest. howev, face with an  approxim alloc algorithm, the agent can try to improv it payoff by announc a valu that correct for the  approxim, and caus the approxim algorithm to implement the alloc that exactli maxim the total report valu of the other agent togeth with it own actual valu [18]. 6 thi condit is impli by the agent ar substitut  requir [3], that ha receiv some attent in the combinatori auction literatur becaus it character the case in which vcg payment can be support in a competit equilibrium. us character of condit that satisfi agent ar substitut, in term of the underli valuat of agent have prove quit elus. 7 moreov, although there is a small literatur on  maximallyeffici mechan subject to requir of  voluntaryparticip and budget-balanc (i.e. with the mechan  neither introduc or remov monei), analyt result ar onli known for simpl problem (e.g. [16, 4]). we can now analyz the best possibl gain from  manipul to an agent in our set. we first assum that the other agent ar truth, and then relax thi. in both case, the  maxim benefit to agent i occur when the initi approxim is worst-case. with truth report from other agent, thi occur when the valu of choic ˆx is v (i)/(1 + ε). then, an agent could hope to receiv an improv payoff of: v (i) − v (i) 1 + ε = ε 1 + ε v (i) thi is possibl if the agent is abl to select a report type to correct the approxim algorithm, and make the algorithm  implement the alloc with valu v (i). thu, if other agent ar truth, and with a (1 + ε)-approxim scheme to the  alloc problem, then no agent can improv it payoff by more than a factor ε/(1 + ε) of the valu of the optim solut. the analysi is veri similar when the other agent ar not truth. in thi case, an individu agent can improv it  payoff by no more than a factor /(1 + ) of the valu of the optim solut given the valu report by the other agent. let v in the follow theorem defin the total valu of the effici alloc, given the report valu of agent j = i, and the true valu of agent i. theorem 1. a vcg-base mechan with a (1 +  ε)alloc algorithm is (1+ −v ) strategyproof for agent i, and agent i can gain at most thi payoff through some non-truth strategi. notic that we did not need to bound the error on the alloc problem without each agent, becaus the -strategyproof result follow from the accuraci of the first-term in the vcg payment and is independ of the accuraci of the second-term. howev, the accuraci of the solut to the problem without each agent is import to implement a good approxim to the revenu properti of the vcg mechan. 3. thegener knapsack  problem in thi section, we design a fulli polynomi approxim scheme for the gener knapsack, which model the  winnerdetermin problem for the vcg-base multi-unit auction. we describ our result for the revers auction variat, but the formul is complet symmetr for the forward-auction. in describ our approxim scheme, we begin with a  simpl properti (the anchor properti) of an optim knapsack  solut. we us thi properti to develop an o(n2 ) time 2-approxim for the gener knapsack. in turn, we us thi basic  approxim to develop our fulli polynomi-time approxim scheme (fpta). on of the major appeal of our piecewis bid languag is it compact represent of the bidder"s valuat function. we strive to preserv thi, and present an approxim scheme that will depend onli on the number of bidder, and not the  maximum quantiti, m, which can be veri larg in realist  procur set. the fpta implement an (1 + ε) approxim to the  optim solut x∗ , in worst-case time t = o(n3 /ε), where n is the number of bidder, and where we assum that the piecewis bid for each bidder ha o(1) piec. the depend on the number of piec is also polynomi: if each bid ha a maximum 169 of c piec, then the run time can be deriv by substitut nc for each occurr of n. 3.1 preliminari befor we begin, let us recal the classic 0/1 knapsack  problem: we ar given a set of n item, where the item i ha valu vi and size si, and a knapsack of capac m; all size ar  integ. the goal is to determin a subset of item of maximum valu with total size at most m. sinc we want to focu on a  revers auction, the equival knapsack problem will be to choos a set of item with minimum valu (i.e. cost) whose size exce m. the gener knapsack problem of interest to us can be defin as follow: gener knapsack: instanc: a target m, and a set of n list, where the ith list ha the form bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i ar increas with j and pj i ar decreas with j, and uj i , pj i , m ar posit integ. problem: determin a set of integ xj i such that 1. (on per list) at most on xj i is non-zero for ani i, 2. (membership) xj i = 0 impli xj i ∈ [uj i , uj+1 i ), 3. (target) Èi Èj xj i ≥ m, and 4. (object) Èi Èj pj i xj i is minim. thi gener knapsack formul is a clear  gener of the classic 0/1 knapsack. in the latter, each list consist of a singl point (si, vi).8 the connect between the gener knapsack and our  auction problem is transpar. each list encod a bid,  repres multipl mutual exclus quantiti interv, and on can choos ani quantiti in an interv, but at most on interv can be select. choos interv [uj i , uj+1 i ) ha cost pj i per unit. the goal is to procur at least m unit of the good at minimum possibl cost. the problem ha some flavor of the continu knapsack problem. howev, there ar two major differ that make our problem significantli more difficult: (1) interv have boundari, and so to choos interv [uj i , uj+1 i ) requir that at least uj i and at most uj+1 i unit must be taken; (2) unlik the classic knapsack, we cannot sort the item (bid) by valu/size, sinc differ interv in on list have differ unit cost. 3.2 a 2-approxim scheme we begin with a definit. given an instanc of the  gener knapsack, we call each tupl tj i = (uj i , pj i ) an anchor. recal that these tupl repres the breakpoint in the piecewis constant curv bid. we sai that the size of an anchor tj i is uj i , 8 in fact, becaus of the on per list constraint, the gener problem is closer in spirit to the multipl choic knapsack  problem [9], where the underl set of item is partit into  disjoint subset u1, u2, . . . , uk, and on can choos at most on item from each subset. pta do exist for thi problem [10], and inde, on can convert our problem into a huge instanc of the multipl choic knapsack problem, by creat on group for each list; put a (quantiti, price) point tupl (x, p) for each possibl quantiti for a bidder into hi group (subset). howev, thi convers explod the problem size, make it infeas for all but the most trivial instanc. the minimum number of unit avail at thi anchor"s price pj i . the cost of the anchor tj i is defin to be the minimum total price associ with thi tupl, name, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i . in a feasibl solut {x1, x2, . . . , xn} of the gener  knapsack, we sai that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i . otherwis, we sai that xi is midrang. we observ that an optim knapsack solut can alwai be  construct so that at most on solut element is midrang. if there ar two midrang element x and x , for bid from two differ agent, with x ≤ x , then we can increment x and decrement x, until on of them becom an anchor. see figur 2 for an exampl. lemma 1. [anchor properti] there exist an optim  solut of the gener knapsack problem with at most on midrang element. all other element ar anchor. 1 midrang bid 5 20 15 10 25 5 25 30201510 35 3 2 1 price quantiti 5 20 15 10 25 5 25 30201510 35 3 2 1 price quantiti (i) optim solut with 2 midrang bid (ii) optim soltut with figur 2: (i) an optim solut with more than on bid not  anchor (2,3); (ii) an optim solut with onli on bid (3) not  anchor. we us the anchor properti to first obtain a polynomi-time 2-approxim scheme. we do thi by solv sever instanc of a restrict gener-knapsack problem, which we call  iknapsack, where on element is forc to be midrang for a  particular interv. specif, suppos element x for agent l is forc to lie in it jth rang, [uj , uj+1 ), while all other element, x1, . . . , xl−1, xl+1, xn, ar requir to be anchor, or zero. thi correspond to the restrict problem iknapsack( , j), in which the goal is to obtain at least m − uj unit with minimum cost. element x is assum to have alreadi contribut uj unit. the valu of a solut to iknapsack( , j) repres the minim addit cost to purchas the rest of the unit. we creat n − 1 group of potenti anchor, where ith group contain all the anchor of the list i in the gener knapsack. the group for agent l contain a singl element that repres the interv [0, uj+1 −uj ), and the associ unit-price pj . thi interv repres the excess number of unit that can be taken from agent l in iknapsack( , j), in addit to uj , which ha alreadi been commit. in ani other group, we can choos at most on anchor. the follow pseudo-code describ our algorithm for thi restrict of the gener knapsack problem. u is the union of all the tupl in n group, includ a tupl t for agent l. the size of thi special tupl is defin as uj+1 − uj , and the cost is defin as pj l (uj+1 −uj ). r is the number of unit that remain to be acquir. s is the set of tupl accept in the current tent 170 solut. best is the best solut found so far. variabl skip is onli us in the proof of correct. algorithm greedi( , j) 1. sort all tupl of u in the ascend order of unit price; in case of ti, sort in ascend order of unit quantiti. 2. set mark(i) = 0, for all list i = 1, 2, . . . , n. initi r = m − uj , s = best = skip = ∅. 3. scan the tupl in u in the sort order. suppos the next tupl is tk i , i.e. the kth anchor from agent i. if mark(i) = 1, ignor thi tupl; otherwis do the follow step: • if size(tk i ) > r and i = return min {cost(s) + rpj , cost(best)}; • if size(tk i ) > r and cost(tk i ) ≤ cost(s) return min {cost(s) + cost(tk i ), cost(best)}; • if size(tk i ) > r and cost(tk i ) > cost(s) add tk i to skip; set best to s ∪ {tk i } if cost improv; • if size(tk i ) ≤ r then add tk i to s; mark(i) = 1; subtract size(tk i ) from r. the approxim algorithm is veri similar to the  approxim algorithm for knapsack. sinc we wish to minim the total cost, we consid the tupl in order of increas per unit cost. if the size of tupl tk i is smaller than r, then we add it to s, updat r, and delet from u all the tupl that belong to the same group as tk i . if size(tk i ) is greater than r, then s along with tk i form a feasibl solut. howev, thi solut can be far from optim if the size of tk i is much larger than r. if total cost of s and tk i is smaller than the current best solut, we updat best. on except to thi rule is the tupl t . sinc thi tupl can be taken fraction, we updat best if the sum of s"s cost and fraction cost of t is an improv. the algorithm termin in either of the first two case, or when all tupl ar scan. in particular, it termin whenev we find a tk i such that size(tk i ) is greater than r but cost(tk i ) is less than cost(s), or when we reach the tupl repres agent l and it give a feasibl solut. lemma 2. suppos a∗ is an optim solut of the  gener knapsack, and suppos that element (l, j) is midrang in the optim solut. then, the cost v (l, j), return by greedi( , j), satisfi: v ( , j) + cost(tj ) ≤ 2cost(a∗ ) proof. let v ( , j) be the valu return by greedi( , j) and let v ∗ ( , j) be an optim solut for iknapsack( , j). consid the set skip at the termin of greedi( , j). there ar two case to consid: either some tupl t ∈ skip is also in v ∗ ( , j), or no tupl in skip is in v ∗ ( , j). in the first case, let st be the tent solut s at the time t wa ad to skip. becaus t ∈ skip then size(t) > r, and st togeth with t form a feasibl solut, and we have: v ( , j) ≤ cost(best) ≤ cost(st) + cost(t). again, becaus t ∈ skip then cost(t) > cost(st), and we have v ( , j) < 2cost(t). on the other hand, sinc t is includ in v ∗ ( , j), we have v ∗ ( , j) ≥ cost(t). these two inequ impli the desir bound: v ∗ ( , j) ≤ v ( , j) < 2v ∗ ( , j). in the second case, imagin a modifi instanc of  iknapsack( , j), which exclud all the tupl of the set skip. sinc none of these tupl were includ in v ∗ ( , j), the optim  solut for the modifi problem should be the same as the on for the origin. suppos our approxim algorithm return the valu v ( , j) for thi modifi instanc. let t be the last tupl consid by the approxim algorithm befor termin on the modifi instanc, and let st be the correspond  tent solut set in that step. sinc we consid tupl in order of increas per unit price, and none of the tupl ar go to be place in the set skip, we must have cost(st ) < v ∗ ( , j) becaus st is the optim wai to obtain size(st ). we also have cost(t ) ≤ cost(st ), and the follow  inequ: v ( , j) ≤ v ( , j) ≤ cost(st ) + cost(t ) < 2v ∗ ( , j) the inequ v ( , j) ≤ v ( , j) follow from the fact that a tupl in the skip list can onli affect the best but not the tent solut. therefor, drop the tupl in the set skip can onli make the solut wors. the abov argument ha shown that the valu return by greedi( , j) is within a factor 2 of the optim solut for iknapsack( , j). we now show that the valu v ( , j) plu cost(tj ) is a 2-approxim of the origin gener knapsack problem. let a∗ be an optim solut of the gener knapsack, and suppos that element xj is midrang. let x− to be set of the remain element, either zero or anchor, in thi solut. furthermor, defin x = xj − uj . thu, cost(a∗ ) = cost(xl) + cost(tj l ) + cost(x−l) it is easi to see that (x− , x ) is an optim solut for iknapsack( , j). sinc v ( , j) is a 2-approxim for thi optim solut, we have the follow inequ: v ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(a∗ ) thi complet the proof of lemma 2. it is easi to see that, after an initi sort of the tupl in u, the algorithm greedi( , j) take o(n) time. we have our first polynomi approxim algorithm. theorem 2. a 2-approxim of the gener knapsack problem can be found in time o(n2 ), where n is number of item list (each of constant length). proof. we run the algorithm greedi( , j) onc for each  tupl (l, j) as a candid for midrang. there ar o(n) tupl, and it suffic to sort them onc, the total cost of the algorithm is o(n2 ). by lemma 1, there is an optim solut with at most on midrang element, so our algorithm will find a 2-approxim, as claim. the depend on the number of piec is also polynomi: if each bid ha a maximum of c piec, then the run time is o((nc)2 ). 171 3.3 an approxim scheme we now us the 2-approxim algorithm present in the preced section to develop a fulli polynomi approxim (fpta) for the gener knapsack problem. the high level idea is fairli standard, but the detail requir technic care. we us a dynam program algorithm to solv iknapsack( , j) for each possibl midrang element, with the 2-approxim algorithm provid an upper bound on the valu of the solut and enabl the us of scale on the cost dimens of the  dynam program (dp) tabl. consid, for exampl, the case that the midrang element is x , which fall in the rang [uj , uj+1 ). in our fpta, rather than us a greedi approxim algorithm to solv  iknapsack( , j), we construct a dynam program tabl to  comput the minimum cost at which at least m − uj+1 unit can be obtain us the remain n − 1 list in the gener knapsack. suppos g[i, r] denot the maximum number of unit that can be obtain at cost at most r us onli the first i list in the gener knapsack. then, the follow recurr relat describ how to construct the dynam program tabl: g[0, r] = 0 g[i, r] = max ´ g[i − 1, r] max j∈β(i,r) {g[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchor for agent i. as convent, agent i will index the row, and cost r will index the column. thi dynam program algorithm is onli pseudo-polynomi, sinc the number of column in the dynam program tabl depend upon the total cost. howev, we can convert it into a fpta by scale the cost dimens. let a denot the 2-approxim to the gener knapsack problem, with total cost, cost(a). let ε denot the desir  approxim factor. we comput the scale cost of a tupl tj i , denot scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(a) (2) thi scale improv the run time of the algorithm  becaus the number of column in the modifi tabl is at most n ε , and independ of the total cost. howev, the comput solut might not be an optim solut for the origin  problem. we show that the error introduc is within a factor of ε of the optim solut. as a prelud to our approxim guarante, we first show that if two differ solut to the iknapsack problem have equal scale cost, then their origin (unscal) cost cannot  differ by more than εcost(a). lemma 3. let x and y be two distinct feasibl solut of iknapsack( , j), exclud their midrang element. if x and y have equal scale cost, then their unscal cost cannot differ by more than εcost(a). proof. let ix and iy, respect, denot the indic  function associ with the anchor vector x and y-there is 1 in posit ix[i, k] if the xk i > 0. sinc x and y ha equal scale cost, i= k scost(tk i )ix[i, k] = i= k scost(tk i )iy[i, k] (3) howev, by (2), the scale cost satisfi the follow  inequ: (scost(tk i ) − 1)εcost(a) n ≤ cost(tk i ) ≤ scost(tk i )εcost(a) n (4) substitut the upper-bound on scale cost from (4) for cost(x), the lower-bound on scale cost from (4) for cost(y), and us equal (3) to simplifi, we have: cost(x) − cost(y) ≤ εcost(a) n i= k iy[i, k] ≤ εcost(a), the last inequ us the fact that at most n compon of an indic vector ar non-zero; that is, ani feasibl solut contain at most n tupl. final, given the dynam program tabl for iknapsack( , j), we consid all the entri in the last row of thi tabl, g[n−1, r]. these entri correspond to optim solut with all agent  except l, for differ level of cost. in particular, we consid the entri that provid at least m − uj+1 unit. togeth with a contribut from agent l, we choos the entri in thi set that minim the total cost, defin as follow: cost(g[n − 1, r]) + max {uj , m − g[n − 1, r]}pj , where cost() is the origin, unscal cost associ with  entri g[n−1, r]. it is worth note, that unlik the 2-approxim scheme for iknapsack( , j), the valu comput with thi fpta includ the cost to acquir uj l unit from l. the follow lemma show that we achiev a (1+ε)-approxim. lemma 4. suppos a∗ is an optim solut of the  gener knapsack problem, and suppos that element (l, j) is midrang in the optim solut. then, the solut a(l, j) from run the scale dynam-program algorithm on iknapsack( , j) satisfi cost(a(l, j)) ≤ (1 + 2ε)cost(a∗ ) proof. let x− denot the vector of the element in  solut a∗ without element l. then, by definit, cost(a∗ ) = cost(x− ) + pj xj . let r = scost(x− ) be the scale cost  associ with the vector x− . now consid the dynam  program tabl construct for iknapsack( , j), and consid it entri g[n − 1, r]. let a denot the 2-approxim to the  gener knapsack problem, and a(l, j) denot the solut from the dynam-program algorithm. suppos y− is the solut associ with thi entri in our dynam program; the compon of the vector y− ar the  quantiti from differ list. sinc both x− and y− have equal scale cost, by lemma 3, their unscal cost ar within εcost(a) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(a). now, defin yj = max{uj , m − Èi= Èj yj i }; thi is the contribut need from to make (y− , yj ) a feasibl solut. among all the equal cost solut, our dynam program tabl choos the on with maximum unit. therefor, i= j yj i ≥ i= j xj i 172 therefor, it must be the case that yj ≤ xj . becaus (yj , y− ) is also a feasibl solut, if our algorithm return a solut with cost cost(a(l, j)), then we must have cost(a(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(a) + pj xj ≤ (1 + 2ε)cost(a∗ ), where we us the fact that cost(a) ≤ 2cost(a∗ ). put thi togeth, our approxim scheme for the  gener knapsack problem will iter the scheme describ abov for each choic of the midrang element (l, j), and choos the best solut from among these o(n) solut. for a given midrang, the most expens step in the algorithm is the construct of dynam program tabl, which can be done in o(n2 /ε) time assum constant interv per list. thu, we have the follow result. theorem 3. we can comput an (1 + ε) approxim to the solut of a gener knapsack problem in worst-case time o(n3 /ε). the depend on the number of piec is also polynomi: if each bid ha a maximum of c piec, then the run time can be deriv by substitut cn for each occurr of n. 4. comput vcg payment we now consid the relat problem of comput the vcg payment for all the agent. a naiv approach requir solv the alloc problem n time, remov each agent in turn. in thi section, we show that our approxim scheme for the  gener knapsack can be extend to determin all n payment in total time o(αt log(αn/ε)), where 1 ≤ c(i\i)/c(i) ≤ α, for a constant upper bound, α, and t is the complex of  solv the alloc problem onc. thi α-bound can be justifi as a no monopoli condit, becaus it bound the margin valu that a singl buyer bring to the auction. similarli, in the revers variat we can comput the vcg payment to each seller in time o(αt log(αn/ε)), where α bound the ratio c(i\ i)/c(i) for all i. our overal strategi will be to build two dynam  program tabl, forward and backward, for each midrang element (l, j) onc. the forward tabl is built by consid the agent in the order of their indic, where as the backward tabl is built by consid them in the revers order. the optim solut correspond to c(i \ i) can be broken into two part: on  correspond to first (i − 1) agent and the other correspond to last (n − i) agent. as the (i − 1)th row of the forward tabl  correspond to the seller with first (i−1) indic, an approxim to the first part will be contain in (i − 1)th row of the forward tabl. similarli, (n− i)th row of the backward tabl will contain an approxim for the second part. we first present a  simpl but an ineffici wai of comput the approxim valu of c(i \ i), which illustr the main idea of our algorithm. then we present an improv scheme, which us the fact that the  element in the row ar sort, to comput the approxim valu more effici. in the follow, we concentr on comput an alloc with xj be midrang, and some agent i = l remov. thi will be a compon in comput an approxim to c(i \ i), the valu of the solut to the gener knapsack without bid from agent i. we begin with the simpl scheme. 4.1 a simpl approxim scheme we implement the scale dynam program algorithm for iknapsack( , j) with two altern order over the other  seller, k = l, on with seller order 1, 2, . . . , n, and on with seller order n, n − 1, . . . , 1. we call the first tabl the  forward tabl, and denot it f , and the second tabl the backward tabl, and denot it bl. the subscript remind us that the agent is midrang.9 in build these tabl, we us the same scale factor as  befor; name, the cost of a tupl tj i is scale as follow: scost(tj i ) = ncost(tj i ) εcost(a) where cost(a) is the upper bound on c(i), given by our  2approxim scheme. in thi case, becaus c(i \ i) can be α time c(i), the scale valu of c(i \ i) can be at most nα/ε. therefor, the cost dimens of our dynam program"s tabl will be nα/ε. fltabl f (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m b (n−i) n−1 n−2 n−i 1 lh tabl bl figur 3: comput vcg payment. m = nα ε now, suppos we want to comput a (1 + )-approxim to the gener knapsack problem restrict to element (l, j) midrang, and further restrict to remov bid from some seller i = l. call thi problem iknapsack−i ( , j). recal that the ith row of our dp tabl store the best solut possibl us onli the first i agent exclud agent l, all of them either clear at zero, or on anchor. these first i agent ar a differ subset of agent in the forward and the backward tabl. by carefulli combin on row of fl with on row of bl we can comput an approxim to iknapsack−i ( , j). we consid the row of fl that correspond to solut construct from agent {1, 2, . . . , i − 1}, skip agent l. we consid the row of bl that correspond to solut construct from agent {i+1, i+2, . . . , n}, again skip agent l. the row ar label fl(i − 1) and bl(n − i) respect.10 the scale cost for acquir these unit ar the column indic for these entri. to solv iknapsack−i ( , j) we choos on entri from row f (i−1) and on from row b (n−i) such that their total quantiti exce m − uj+1 and their combin cost is minimum over all such combin. formal, let g ∈ fl(i − 1), and h ∈ bl(n − 1) denot entri in each row, with size(g), size(h), denot the number of unit and cost(g) and cost(h) denot the unscal cost associ with the entri. we comput the follow, subject 9 we could label the tabl with both and j, to indic the jth tupl is forc to be midrang, but omit j to avoid clutter. 10 to be precis, the index of the row ar (i − 2) and (n − i) for fl and bl when l < i, and (i − 1) and (n − i − 1), respect, when l > i. 173 to the condit that g and h satisfi size(g) + size(h) > m − uj+1 : min g∈f (i−1),h∈b (n−i) Òcost(g) + cost(h) + pj · max{uj , m − size(g) − size(h)} Ó (5) lemma 5. suppos a−i is an optim solut of the  gener knapsack problem without bid from agent i, and suppos that element (l, j) is the midrang element in the optim  solut. then, the express in eq. 5, for the restrict problem iknapsack−i ( , j), comput a (1 + ε)-approxim to a−i . proof. from earlier, we defin cost(a−i ) = c(i \ i). we can split the optim solut, a−i , into three disjoint part: xl correspond to the midrang seller, xi correspond to first i − 1 seller (skip agent l if l < i), and x−i correspond to last n − i seller (skip agent l if l > i). we have: cost(a−i ) = cost(xi) + cost(x−i) + pj xj let ri = scost(xi) and r−i = scost(x−i). let yi and y−i be the solut vector correspond to scale cost ri and r−i in f (i − 1) and b (n − i), respect. from lemma 3 we conclud that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(a) where cost(a) is the upper-bound on c(i) comput with the 2-approxim. among all equal scale cost solut, our dynam program choos the on with maximum unit. therefor we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we us shorthand size(x) to denot total number of unit in all tupl in x. now, defin yj l = max(uj l , m −size(yi)−size(y−i)). from the preced inequ, we have yj l ≤ xj l . sinc (yj l , yi, y−i) is also a feasibl solut to the gener knapsack problem without agent i, the valu return by eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ c(i \ i) + εcost(a) ≤ c(i \ i) + 2cost(a∗ )ε ≤ c(i \ i) + 2c(i \ i)ε thi complet the proof. a naiv implement of thi scheme will be ineffici  becaus it might check (nα/ε)2 pair of element, for ani  particular choic of (l, j) and choic of drop agent i. in the next section, we present an effici wai to comput eq. 5, and  eventu to comput the vcg payment. 4.2 improv approxim scheme our improv approxim scheme for the winner-determin problem without agent i us the fact that element in f (i − 1) and b (n − i) ar sort; specif, both, unscal cost and quantiti (i.e. size), increas from left to right. as befor, let g and h denot gener entri in f (i − 1) and b (n − i)  respect. to comput eq. 5, we consid all the tupl pair, and first divid the tupl that satisfi condit size(g) + size(h) > m − uj+1 l into two disjoint set. for each set we comput the best solut, and then take the best between the two set. [case i: size(g) + size(h) ≥ m − uj l ] the problem reduc to min g∈f (i−1), h∈b (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) we defin a pair (g, h) to be feasibl if size(g) + size(h) ≥ m − uj l . now to comput eq. 6, we do a forward and backward walk on f (i − 1) and b (n − i) respect. we start from the smallest index of f (i − 1) and move right, and from the highest index of b (n − i) and move left. let (g, h) be the current pair. if (g, h) is feasibl, we decrement b"s pointer (that is, move backward) otherwis we increment f"s pointer. the feasibl pair found dure the walk ar us to comput eq. 6. the complex of thi step is linear in size of f (i − 1), which is o(nα/ε). [case ii: m − uj+1 l ≤ size(g) + size(h) ≤ m − uj l ] the problem reduc to min g∈f (i−1), h∈b (n−i) Òcost(g) + cost(h) + pj l (m − size(g) − size(h)) Ó to comput the abov equat, we transform the abov  problem to anoth problem us modifi cost, which is defin as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) the new problem is to comput min g∈f (i−1), h∈b (n−i) Òmcost(g) + mcost(h) + pj l m Ó (7) the modifi cost simplifi the problem, but unfortun the element in f (i − 1) and b (n − i) ar no longer sort with respect to mcost. howev, the element ar still sort in quantiti and we us thi properti to comput eq. 7. call a pair (g, h) feasibl if m − uj+1 l ≤ size(g) + size(h) ≤ m − uj l . defin the feasibl set of g as the element h ∈ b (n − i) that ar feasibl given g. as the element ar sort by quantiti, the feasibl set of g is a contigu subset of b (n − i) and shift left as g increas. 2 3 4 5 10 20 30 40 50 60 begin end b (n−i)15 20 25 30 35 40 65421 3 1 6 f (i−1)l l figur 4: the feasibl set of g = 3, defin on b (n − i), is {2, 3, 4} when m − uj+1 l = 50 and m − uj l = 60. begin and end repres the start and end pointer to the feasibl set. therefor, we can comput eq. 7 by do a forward and  backward walk on f (i − 1) and b (n − i) respect. we walk on b (n − i), start from the highest index, us two pointer, begin and end, to indic the start and end of the current  feasibl set. we maintain the feasibl set as a min heap, where the kei is modifi cost. to updat the feasibl set, when we  increment f"s pointer(move forward), we walk left on b, first us end to remov element from feasibl set which ar no longer 174 feasibl and then us begin to add new feasibl element. for a given g, the onli element which we need to consid in g"s feasibl set is the on with minimum modifi cost which can be comput in constant time with the min heap. so, the main complex of the comput li in heap updat. sinc, ani element is ad or delet at most onc, there ar o(nα ε ) heap updat and the time complex of thi step is o(nα ε log nα ε ). 4.3 collect the piec the algorithm work as follow. first, us the 2  approxim algorithm, we comput an upper bound on c(i). we us thi bound to scale down the tupl cost. us the scale cost, we build the forward and backward tabl correspond to each tupl (l, j). the forward tabl ar us to comput c(i). to comput c(i \ i), we iter over all the possibl midrang  tupl and us the correspond forward and backward tabl to comput the local optim solut us the abov scheme. among all the local optim solut we choos on with the minimum total cost. the most expens step in the algorithm is comput of c(i \ i). the time complex of thi step is o(n2 α ε log nα ε ) as we have to iter over all o(n) choic of tj l , for all l = i, and each time us the abov scheme to comput eq. 5. in the worst case, we might need to comput c(i \ i) for all n seller, in which case the final complex of the algorithm will be o(n3 α ε log nα ε ). theorem 4. we can comput an /(1+ )-strategyproof  approxim to the vcg mechan in the forward and revers multi-unit auction in worst-case time o(n3 α ε log nα ε ). it is interest to recal that t = o(n3 ε ) is the time  complex of the fpta to the gener knapsack problem with all agent. our combin scheme comput an approxim to the complet vcg mechan, includ payment to o(n) agent, in time complex o(t log(n/ε)), take the no-monopoli  paramet, α, as a constant. thu, our algorithm perform much better than the naiv scheme, which comput the vcg  payment for each agent by solv a new instanc of gener knapsack problem. the speed up come from the wai we solv iknapsack−i ( , j). time complex of comput iknapsack−i ( , j) by creat a new dynam program tabl will be o(n2 ε ) but by us the forward and backward tabl, the complex is reduc to o(n ε log n ε ). we can further improv the time  complex of our algorithm by comput eq. 5 more effici. current, the algorithm us heap, which ha logarithm  updat time. in worst case, we can have two heap updat oper for each element, which make the time complex super linear. if we can comput eq. 5 in linear time then the complex of comput the vcg payment will be same as the complex of solv a singl gener knapsack problem. 5. conclus we present a fulli polynomi-time approxim scheme for the singl-good multi-unit auction problem, us margin decreas piecewis constant bid languag. our scheme is both approxim effici and approxim strategyproof within ani specifi factor ε > 0. as such it is an exampl of computation tractabl ε-domin result, as well as an  exampl of a non-trivial but approxim alloc problem. it is particularli interest that we ar abl to comput the  payment to n agent in a vcg-base mechan in worst-case time o(t log n), where t is the time complex to comput the  solut to a singl alloc problem. 6. refer [1] l m ausubel and p r milgrom. ascend auction with packag bid. frontier of theoret econom, 1:1-42, 2002. [2] s bikchandani, s de vri, j schummer, and r v vohra. linear program and vickrei auction. technic report, anderson graduat school of manag, u.c.l.a., 2001. [3] s bikchandani and j m ostroi. the packag assign model. journal of econom theori, 2002. forthcom. [4] k chatterje and w samuelson. bargain under incomplet inform. oper research, 31:835-851, 1983. [5] e h clark. multipart price of public good. public choic, 11:17-33, 1971. [6] s de vri and r v vohra. combinatori auction: a survei. inform journal on comput, 2002. forthcom. [7] m eso, s ghosh, j r kalagnanam, and l ladanyi. bid evalu in procur auction with piec-wise linear suppli curv. technic report, ibm tj watson research center, 2001. in prepar. [8] j feigenbaum and s shenker. distribut algorithm mechan design: recent result and futur direct. in proceed of the 6th intern workshop on discret algorithm and method for mobil comput and commun, page 1-13, 2002. [9] m r garei and d s johnson. comput and intract: a guid to the theori of np-complet. w.h.freeman and compani, new york, 1979. [10] g v gen and e v levner. comput complex of approxim algorithm for combinatori problem. in mathemat foundat of comput scienc, 292-300, 1979. [11] t grove. incent in team. econometrica, 41:617-631, 1973. [12] j r kalagnanam, a j davenport, and h s lee. comput aspect of clear continu call doubl auction with assign constraint and indivis demand. electron commerc journal, 1(3):221-238, 2001. [13] v krishna. auction theori. academ press, 2002. [14] v krishna and m perri. effici mechan design. technic report, pennsylvania state univers, 1998. avail at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] d lehmann, l i o"callaghan, and y shoham. truth revel in approxim effici combinatori auction. jacm, 49(5):577-602, septemb 2002. [16] r b myerson. optim auction design. mathemat of oper research, 6:58-73, 1981. [17] r b myerson and m a satterthwait. effici mechan for bilater trade. journal of econom theori, 28:265-281, 1983. [18] n nisan and a ronen. computation feasibl vcg mechan. in acm-ec, page 242-252, 2000. [19] d c park, j r kalagnanam, and m eso. achiev budget-balanc with vickrei-base payment scheme in exchang. in ijcai, 2001. [20] m h rothkopf, a pekeˇc, and r m harstad. computation manag combinatori auction. manag scienc, 44(8):1131-1147, 1998. [21] j schummer. almost domin strategi implement. technic report, med depart, kellogg graduat school of manag, 2001. [22] w vickrei. counterspecul, auction, and competit seal tender. journal of financ, 16:8-37, 1961. 175 