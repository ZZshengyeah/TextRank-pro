eda: provid an environ for decentr adapt servic rüdiger kapitza dept. of comp. scienc, informatik 4 univers of erlangen-nürnberg rrkapitz@cs.fau.de franz j. hauck distribut system laboratori univers of ulm franz.hauck@uni-ulm.de abstract as the idea of virtualis of comput power, storag and bandwidth becom more and more import, grid  comput evolv and is appli to a rise number of applic. the environ for decentr adapt servic (eda) provid a grid-like infrastructur for user-access,  longterm servic (e.g. webserv, sourc-code repositori etc.). it aim at support the autonom execut and  evolut of servic in term of scalabl and resourc-awar distribut. eda offer flexibl servic model base on distribut mobil object rang from a tradit  clientserv scenario to a fulli peer-to-peer base approach.  automat, dynam resourc manag allow optim us of avail resourc while minim the administr complex. categori and subject descriptor c.2.4 [comput commun network]: distribut system-distribut applic; d.2.12b [softwar]:  softwar engin interoper[distribut object] gener term design, manag 1. introduct infrastructur for grid comput aim at virtual a group of comput, server, and storag as on larg  comput system. resourc manag is a kei issu in such system, need for an effici and autom distribut of task on the grid. such grid infrastructur ar often  deploi at enterpris level, but project like seti@home [1] have demonstr the feasibl of more decentr grid as well. current grid comput infrastructur don"t  provid suffici support for the execut of distribut,  useraccess, long-term servic as thei ar design to solv comput- or data-intens task with a more or less fix set of paramet. the common three-phase approach of resourc discoveri, system select and job execut fail for servic that chang their resourc demand over time due to interact user access and run for a long period of time. instead an infrastructur for long-term servic ha to place servic base on their current demand and their estim futur requir. if the distribut turn out to be wrong (e.g. a node get overload) the servic ha to be migrat within the grid (e.g. to a more power and less load node). migrat howev is expens as the whole state of a servic ha to be transfer. addition a non-replic servic is not access dure migrat. therefor the resourc manag ha to avoid migrat if possibl. furthermor a servic concept ha to be  provid that evad overload in the first place, and secondli inhibit servic unavail if migrat can"t be avoid. eda [2] aim at provid a grid-like infrastructur for user-access, long-term servic that allow the dynam adapt at run-time, provid a manag  infrastructur, and offer system-level support for scalabl and fault toler. node can dynam join and leav the  infrastructur, and all manag task, especi the resourc manag, ar decentr. the environ is built upon our aspectix [3] middlewar infrastructur, which  directli support qo-base, dynam reconfigur of  servic. the resourc manag focus on the execut of  servic that have a long, potenti infinit, oper time. these servic ar organ in project. each project ha a distribut execut scope call a servic environ. such an environ possibl span multipl institut. each institut repres an administr domain that can support a project with a fix set of resourc. our approach support the adapt resourc manag of all project in scope of an institut base on an algorithm inspir by the diffus algorithm for decentr  loadbalanc [4]. it is not known how to optim subdivid these resourc for the servic as the resourc demand of servic can chang over time or even frequent fluctuat. to provid resourc as need, our approach automat reded evenli free or not need resourc between  servic instanc across project and node. the whole process articl 5 of reded is scalabl as it is decentr and respect certain limit like the physic avail resourc of a node and the amount of resourc dedic to a project. in case where reded is not possibl, the migrat of the  demand servic is initi. eda further support flexibl servic model, includ a fulli central client/server structur, complet  peer-topeer base system, and variou configur in between that allow a control us of peer resourc base on the fragment object model [5]. the overal goal is to provid a gener servic architectur that allow to implement the servic function onc, and then, ideal, run thi  servic with differ servic model and adapt it at run-time, therebi scale from a singl user local instanc to a  multidomain-span scalabl servic. to reduc the implement effort of such servic a framework ha been develop that support the run-time evolut from a tradit client/server scenario to an  activ replic server with client interact in a hybrid peer-to-peer architectur as known from napster. in a  longterm-servic grid infrastructur, activ replic ha  variou benefit: replica can join and leav the object group and therefor replica can be migrat without servic  unavail. load of non-modifi request can be evenli distribut across the replica make overload situat less like. final a certain amount of node crash can be toler. the follow section describ the us featur of  aspectix follow by a brief overview of the core compon and concept of eda. section 4 explain the self-manag and reded concept of distribut adapt resourc manag. section 5 describ the framework for  decentr adapt servic. section 6 describ relat work and final section 7 conclud the paper. 2. basic middlewar the eda environ is base on the aspectix  middlewar. at it core, it provid a corba-compliant orb and, as such, support heterogen distribut system. furthermor aspectix support the fragment object model [5] that is us to implement and provid decentr  adapt servic. in the fragment object model, the distinct between client stub and the server object is no longer present (fig. 1). from an abstract point of view, a fragment object is a unit with uniqu ident, interfac, behavior, and state, like in classic object-orient design. the implement of these properti howev is not bound to a specif locat, but mai be distribut arbitrarili on variou fragment. ani client that want to access the fragment object need a local fragment, which provid an interfac ident to that of a tradit stub. howev intern distribut and interact is not onli transpar on the outer interfac of the distribut object, but mai even chang dynam at runtim. thi allow the fragment object model to adapt to chang environ condit or qualiti of servic  requir. it offer to chang the servic model on  demand from tradit client-server to a peer-to-peer base approach and all kind of intermedi stage by migrat and exchang of fragment. 3. eda core compon figur 1: fragment object on three node eda ha three major compon: everi node that  activ support decentr adapt servic provid a home environ. the home environ basic  manag resourc of on or more node belong to the same administr domain or institut. the servic  environ is spread over a set of domain that support a certain project and reli on basic servic from the correspond home environ. the servic environ support the execut of servic belong to the same project. final, the decentr adapt servic is dynam distribut within the scope of an associ servic environ. the home environ ha the role of a mediat between the node of an institut and on or more servic  environ, each run a set of servic. fig. 2 show three domain each run a home environ that span all node of the respect domain. everi node provid a set of resourc. each domain ha a manag who can us that home environ to assign resourc to servic  environ and to revok them. apart from provid system load and all kind of resourc-usag inform to the  servic environ, the home environ also notifi about all import system event like a node shutdown or crash. a servic environ repres a scope of distribut for on or more servic. usual, a servic environ is own by on organ or commun and dedic to on project. a servic manag can start, stop, and  configur servic through the interfac of the servic environ and decid which resourc provid by home environ ar accept. in most case a servic environ is spread over more than on administr domain as shown in fig. 2. on of the main task of the servic environ is to support the migrat of servic or servic compon especi between differ home environ. the servic  environ therebi take avail resourc, the requir of the servic, and the polici provid by the servic  manag into account. the migrat of servic compon can be necessari for variou reason, like node shutdown,  resourc constraint, and the growth or shrinkag of a servic environ. 4. decentr  resourcemanag resourc manag for long-term servic ha other  requir than resourc manag in common grid  comput environ. for instanc even in the context of tradit grid system it is veri difficult to determin or even onli estim the resourc requir of a task [6]. for long-term servic thi is even harder, and it is like that the resourc demand frequent chang. thi turn articl 5 host fhost d host e host a host c servic environ servic b servic a home env. home environ home environ boundari of the fragment object servic manag domain manag domain manag figur 2: eda scenario the optim distribut of servic over a set of node into a difficult problem. in gener the migrat of servic is a prerequisit of eda as it offer a solut if the initi  distribut decis wa wrong (e.g. initi start of previous unknown servic) or the demand of servic ha chang substanti. but migrat is costli, sinc the whole state of a servic possibl includ program code ha to be  transfer. if the servic is not replic it will be unavail dure migrat. take thi into account a resourc  manag should place servic and adapt reded  resourc between servic and node as need to prevent migrat. as eda aim at provid a grid-like  infrastructur for a larg set of node that can join and leav the system all resourc manag task have to be  decentr to be scalabl and should not requir global knowledg. the resourc manag can be structur into the  follow differ task: • ad and chang the assign resourc of a  servic environ • automat placement of servic at startup time and dure migrat due to overload • keep all kind of resourc limit, especi the limit of servic environ • compens leav and crash node in the next section we will describ what kind of resourc limit there ar and how to do resourc manag base on these basic condit. 4.1 resourc limit our approach manag resourc on two stage, the node level and the servic-environ level. at the node level we monitor usag of all kind of physic resourc like disk space, memori, cpu and network bandwidth but also  logic on like open file, socket and thread. the entiti of monitor is a servic or a servic compon in case of a decentr adapt servic. everi servic ha so call local limit that restrict the resourc usag in context of the current node. if a servic run the risk of exceed such a local limit the home environ tri to extend the limit or notifi the respons servic environ if  reded is not possibl. reach a local limit can be caus by two reason: an overload node or an overload  servic environ. in the first case servic migrat might help, in the second case migrat to anoth administr domain might be an option, or simpli reduc resourc  demand by stop the servic. of cours there could be more than on servic of the same servic environ at a node. therefor the assign resourc of a servic environ at a node can be easili comput by sum up all local limit of it servic. furthermor each node ha node limit that restrict the overal usag of certain resourc. a node limit must never exce the physic resourc (e.g. disk space) of a node and might be much smaller, e.g., for support local user. the sum of all local limit at a node must never exce the node limit of a resourc. therefor observ and control the local limit will keep the node limit and prevent overload. nodelimitnod ≥ numberoflocallimitsnodex i=1 locallim at the institut level the resourc usag of a servic  environ and it associ servic is also restrict by so-call global limit. these limit determin the maximum resourc usag of a project in scope of a home environ. the sum of all local limit on all node of the institut for a certain project therefor never exce it global limit. globalelimits ≥ numberoflocallimitssex i=1 locallim 4.2 adapt resourc reded we start with a straight-forward implement to  describ the princip workflow. then we propos an approach for a more effici solut and discuss it problem. if a new project should be support by a home  environ it is first necessari to identifi the node that offer suffici unassign resourc to start a servic. thi can be achiev in a naiv implement by us a flood approach like it is done by the gnutella protocol assum the node ar connect in a random graph. these resourc then can be assign to the servic environ of the new project which further on can start servic on these node. of cours a home environ support usual numer project. each of these project ha resourc share on  variou node, some of them occupi by servic, other free and unus. as the resourc demand of a servic chang it might be possibl that a servic reach it local limit if the servic is under high demand. what happen next depend on the overal resourc usag of the servic environ and the resourc consumpt at the local node. if the servic  environ ha not reach it global limit and the node is not overload the depend local limit of the servic should be extend simpli by reduc a local limit at anoth node of the same servic environ. when all resourc of the node ar assign to other servic environ there ar two possibl. all resourc ar us by servic, so we have to migrat a servic, or the resourc ar assign but not us. in the later case we shall reded resourc and assign them to the demand servic environ. final the servic environ might have reach it global limit. in thi case the resourc consumpt ha to be reduc  either by migrat the servic to anoth domain and it  depend home environ or simpli by bound resourc usag and if thi is not possibl, stop the servic. in contrari to the setup of a new servic environ which is not time critic and a less frequent task the  adapt of local limit occur frequent and need to be done articl 5 almost immedi. thu it is not an option to us  broadcast search for reded. instead a more effici  approach with a bound complex is necessari. the same appli for detect if a global limit is reach by a servic environ. current we investig if thi can be achiev by  us a diffus algorithm[4] like it is us for decentr load balanc. therebi all node of a system ar  partit in group that overlap partial. the union of all group achiev a full coverag. group member frequent exchang load inform and balanc the load by  migrat. in our case we aim not at balanc the load but the amount of avail free resourc of a servic environ. each node that support a certain servic environ is at least connect to anoth node that support the same project. thi wai it alwai should be known if a servic  environ ha still enough resourc and therefor if a  servic can grow. there still remain open issu like if the  diffus balanc free resourc should be tightli connect to the real resourc, compar to reserv. in thi case there might be problem if a node support sever servic environ which all have servic run at the node and a node limit is exceed which would requir servic migrat. in fact it can be needless as the servic might not us all the assign resourc but the diffus algorithm caus the limit overrun by equal balanc the free  resourc of all support servic environ. if we remov the map between free resourc and real resourc of a node we can evad these situat. howev it get more complic to determin the free and unassign resourc of a home environ. 4.3 placement of servic independ of the map of free resourc the  placement of a servic is, as alreadi state, a difficult problem. distribut the servic equal over all node would sure prevent migrat in the averag case even if resourc  demand of servic chang. howev if the resourc demand of servic vari highli and the grid is clog by mani project it might be that a servic can"t be place becaus the free resourc ar too scatter. a differ approach would be to consid it as an variant of the bin-pack problem that aim at pack item in bin by optim the number of us bin. in our case we need an onlin approach as the item ar not known in advanc and we have a multi-dimension problem sinc a servic ha variou resourc requir. the number of bin is bound as we have a finit number of node in our grid. an algorithm for thi problem ha recent been propos by epstein and van stee in [7]. on the downsid thi algorithm need to know all node and their actual usag. as the placement of a servic is not a time critic problem again a flood base approach might offer a solut. to reduc the number of answer onli node that provid suffici resourc need to repli. it ha also to be consid to transform the algorithm to a distribut on. anoth problem might be that the algorithm  optim the occup too strong. therefor demand chang of servic can lead to overload node and caus  migrat. we believ thi can be prevent by not onli  consid the actual resourc consumpt to determin the  resourc demand of a servic but take the previou demand into account. 5. decentr adapt servic model in eda a decentr, adapt servic normal match a tradit servic access by user like a web server, an instant messag server or a sourc code repositori. such a servic is repres by a fragment object. thi object expand or shrink in the scope span by the associ servic environ depend on the servic demand and for fault-toler reason. usual everi part of the object is mobil and can be migrat if necessari. each servic ha at least two interfac: on for manag task and anoth servic specif for the end user. the manag interfac offer method to start, stop, and configur servic instanc. as thi set of featur requir an enorm  implement effort to do it anew for each servic implement we support the develop of decentr adapt  servic through a framework and an extend version of idl in combin with a special idl-compil [8]. the core idea is to develop a servic in usual client/server fashion as it is done in plain corba. thi servic then can be start and execut on the grid as a common servant.  addition it should be possibl to migrat the servic. thi can be achiev by us valu type base approach to describ the servic state as done in [9] or us the languag suppli serial mechan. as we would like to toler node crash and the servic should be avail dure migrat we support the activ replic of the servic. thi is achiev by gener special client-side stub that commun with on of the replica. to keep the connect between client and the replic object we us time-bound refer [10] that restrict the migrat but make the usag of locat servic (to cope with outdat refer) obsolet. the replica ar synchron via a group commun framework. the idl extens consist of addit modifi that affect code gener for client and server side. these ar retain to mark non-modifi oper which allow faster respons and load balanc of those request.  furthermor on can mark method as local which indic that thei can be local process. in thi case the  idlcompil creat placehold for local execut. apart form method that ar usual static thi is us to implement client-side contribut and interact. for exampl if a client-stub offer a method which result in a file transfer it is possibl to integr a custom protocol that forward a modifi request to the replic object which return not the file as in the common case but url that point to client that previous request the file. now the  clientstub fetch the data from the offer locat and respond as if it wa suppli by the server object. thi peer-to-peer base behavior as known from napster is transpar to the client and can be switch on and off depend on  environ condit like load and commun as need. final we provid anoth modifi to mark administr  oper. if a method is mark with admin an authent is necessari. the method to authent is pluggabl and might be by pass-phrase, internet address or ani other  authent scheme. thi modifi facilit the creation of servic manag method. articl 5 6. relat work grid infrastructur like the globu-toolkit [11] provid servic and mechan for distribut heterogen  environ to combin resourc on demand to solv resourc consum and comput intens task. due to thi  orient thei focu on differ servic model, provid no support for object mobil if even support a distribut object approach at all. but most import thei follow a differ resourc manag approach as thei target the parallel execut of a larg number of short and midterm task. javasymphoni [12] and ibi [13] provid object mobil but ar limit to the java program languag and focu on object orient high perform comput. activ replic object ar provid by jgroup [14] base on rmi. on top of thi basic middlewar a replic manag layer ha been implement call arm [15]. jgroup focu on the activ replic of object but lack support for more flexibl servic like eda doe. arm can be compar to eda but support no resourc awar distribut. fog [16] and globe [17] ar basic middlewar environ that support the fragment object approach. globe  consid replic and cach. both system lack support for resourc awar distribut. 7. conclus and ongo work base on the fragment object model and the  architectur of the eda environ, decentr adapt  servic can be easili design, implement and execut. as describ the resourc manag can be  decompos in two main problem that have to be solv.  control and manag of resourc limit includ ensur that the assign resourc ar avail (even in the context of node crash) and the autonom placement of servic. for both problem we offer a solut, a current  implement simul environ will verifi their feasibl. in a next step the resourc manag will be integr in an alreadi implement prototyp of the eda  architectur. as describ we have alreadi an earli implement of the framework for the decentr adapt servic. thi framework ha to be extend to smoothli interact with the resourc manag and the eda architectur. in a final step we need to implement some servic that verifi the usabl of the whole eda project. 8. refer [1] d. werthim s. bowyer j. cobb d. gedy d. anderson w. t. sullivan, iii. a new major seti project base on project serendip data and 100,000 person comput. in proc. of the fifth intl. conf. on bioastronomi, 1997. [2] han reiser r¨udig kapitza, franz j. hauck. decentr, adapt servic: the aspectix approach for a flexibl and secur grid environ. in grid servic engin and manag (gsem 2004), erfurt, germani, 2004. springer. [3] han p. reiser, franz j. hauck, r¨udig kapitza, and andrea i. schmi. integr fragment object into a corba environ. in proc. of the net.objectdai, 2003. [4] tiberiu rotaru and han-heinrich n¨ag. dynam load balanc by diffus in heterogen system. j. parallel distrib. comput., 64(4):481-497, 2004. [5] m. makpang, y. gourhant, j.-p. narzul, and m. shapiro. fragment object for distribut abstract. [6] jennif m. schopf. ten action when grid schedul: the user as a grid schedul. page 15-23, 2004. [7] leah epstein and rob van stee. optim onlin bound space multidimension pack. in soda "04: proceed of the fifteenth annual acm-siam symposium on discret algorithm, page 214-223, philadelphia, pa, usa, 2004. societi for industri and appli mathemat. [8] han p. reiser, martin steckermei, and franz j. hauck. idlflex: a flexibl and gener compil for corba idl. in proc. of the net.objectdai (erfurt, germani, sep. 10-13, 2001), 2001. [9] r¨udig kapitza, holger schmidt, and franz j. hauck. platform-independ object migrat in corba. in proc. of the otm"05 confer (doa, agia napa, cypru, oct 31-nov. 04, 2005), 2005. [10] r¨udig kapitza, han p. reiser, and franz j. hauck. stabl, time-bound refer in context of dynam chang environ. in mdc"05: proc. of the 25th ieee int. conf. on distribut comput system - workshop (icdc 2005 workshop), 2005. [11] ian foster, carl kesselman, and steven tueck. the anatomi of the grid: enabl scalabl virtual organ. lectur note in comput scienc, 2150, 2001. [12] thoma fahring and alexandru jugravu. javasymphoni: new direct to control and synchron local, parallel, and load balanc for cluster and grid-comput. in jgi "02: proceed of the 2002 joint acm-iscop confer on java grand, page 8-17, new york, ny, usa, 2002. acm press. [13] rob v. van nieuwpoort, jason maassen, rutger hofman, thilo kielmann, and henri e. bal. ibi: an effici java-base grid program environ. in jgi "02: proceed of the 2002 joint acm-iscop confer on java grand, page 18-27, new york, ny, usa, 2002. acm press. [14] alberto montresor, renzo davoli, and ozalp babaoglu. middlewar for depend network servic in partition distribut system. sigop oper. syst. rev., 35(1):73-96, 2001. [15] h. mele and b. helvik. arm: autonom replic manag in jgroup, 2001. [16] mesaac makpang, yvon gourhant, jean-pierr le narzul, and marc shapiro. fragment object for distribut abstract. in read in distribut comput system. [17] philip homburg, leendert van doorn, maarten van steen, andrew s. tanenbaum, and wiebren de jong. an object model for flexibl distribut system. in proceed of the 1st annual asci confer, page 69-78, 1995. articl 5 