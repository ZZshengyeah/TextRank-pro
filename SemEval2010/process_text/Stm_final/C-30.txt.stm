bullet: high bandwidth data dissemin us an overlai mesh dejan kosti´c, adolfo rodriguez, jeanni albrecht, and amin vahdat∗ depart of comput scienc duke univers {dkostic,razor,albrecht,vahdat}@cs.duke.edu abstract in recent year, overlai network have becom an effect  altern to ip multicast for effici point to multipoint  commun across the internet. typic, node self-organ with the goal of form an effici overlai tree, on that meet  perform target without place undu burden on the underli network. in thi paper, we target high-bandwidth data  distribut from a singl sourc to a larg number of receiv.  applic includ larg-file transfer and real-time multimedia  stream. for these applic, we argu that an overlai mesh, rather than a tree, can deliv fundament higher bandwidth and  reliabl rel to typic tree structur. thi paper present bullet, a scalabl and distribut algorithm that enabl node spread across the internet to self-organ into a high bandwidth overlai mesh. we construct bullet around the insight that data should be distribut in a disjoint manner to strateg point in the network. individu bullet receiv ar then respons for locat and retriev the data from multipl point in parallel. kei contribut of thi work includ: i) an algorithm that send data to differ point in the overlai such that ani data object is equal like to appear at ani node, ii) a scalabl and decentr algorithm that allow node to locat and recov miss data item, and iii) a complet implement and  evalu of bullet run across the internet and in a larg-scale emul environ reveal up to a factor two bandwidth  improv under a varieti of circumst. in addit, we find that, rel to tree-base solut, bullet reduc the need to perform expens bandwidth probe. in a tree, it is critic that a node"s parent deliv a high rate of applic data to each child. in bullet howev, node simultan receiv data from multipl sourc in parallel, make it less import to locat ani singl sourc capabl of sustain a high transmiss rate. categori and subject descriptor c.2.4 [comput-commun network]: distribut system; h.4.3 [inform system applic]:  commun applic gener term experiment, manag, perform 1. introduct in thi paper, we consid the follow gener problem. given a sender and a larg set of interest receiv spread across the internet, how can we maxim the amount of bandwidth deliv to receiv? our problem domain  includ softwar or video distribut and real-time  multimedia stream. tradition, nativ ip multicast ha been the prefer method for deliv content to a set of  receiv in a scalabl fashion. howev, a number of  consider, includ scale, reliabl, and congest  control, have limit the wide-scale deploy of ip  multicast. even if all these problem were to be address, ip multicast doe not consid bandwidth when construct it distribut tree. more recent, overlai have emerg as a promis altern to multicast for network-effici point to multipoint data deliveri. typic overlai structur attempt to mimic the structur of multicast rout tree. in network-layer multicast  howev, interior node consist of high speed router with limit process power and extens. overlai, on the other hand, us programm (and henc extens) end host as interior node in the overlai tree, with these host act as repeat to multipl children down the tree. overlai have shown tremend promis for multicast-style applic. howev, we argu that a tree structur ha fundament limit both for high bandwidth multicast and for high reliabl. on difficulti with tree is that bandwidth is guarante to be monoton decreas move down the tree. ani loss high up the tree will reduc the  bandwidth avail to receiv lower down the tree. a number of techniqu have been propos to recov from loss and henc improv the avail bandwidth in an overlai tree [2, 6]. howev, fundament, the bandwidth avail to ani host is limit by the bandwidth avail from that node"s singl parent in the tree. thu, our work oper on the premis that the model for high-bandwidth multicast data dissemin should be re-examin. rather than send ident copi of the same data stream to all node in a tree and design a scalabl mechan for recov from loss, we propos that particip in a multicast overlai cooper to strateg 282 transmit disjoint data set to variou point in the network. here, the sender split data into sequenti block. block ar further subdivid into individu object which ar in turn transmit to differ point in the network. node still receiv a set of object from their parent, but thei ar then respons for locat peer that hold miss data object. we us a distribut algorithm that aim to make the avail of data item uniformli spread across all overlai particip. in thi wai, we avoid the problem of locat the last object, which mai onli be avail at a few node. on hypothesi of thi work is that, rel to a tree, thi model will result in higher bandwidth-leverag the bandwidth from simultan parallel download from multipl sourc rather than a singl parent-and higher reliabl-retriev data from multipl peer reduc the potenti damag from a singl node failur. to illustr bullet"s behavior, consid a simpl three node overlai with a root r and two children a and b. r ha 1 mbp of avail (tcp-friendli) bandwidth to each of a and b. howev, there is also 1 mbp of avail bandwidth between a and b. in thi exampl, bullet would transmit a disjoint set of data at 1 mbp to each of a and b. a and b would then each independ discov the avail of disjoint data at the remot peer and begin stream data to on anoth, effect achiev a retriev rate of 2 mbp. on the other hand, ani overlai tree is restrict to deliv at most 1 mbp even with a scalabl techniqu for recov lost data. ani solut for achiev the abov model must maintain a number of properti. first, it must be tcp friendli [15]. no flow should consum more than it fair share of the  bottleneck bandwidth and each flow must respond to congest signal (loss) by reduc it transmiss rate. second, it must impos low control overhead. there ar mani  possibl sourc of such overhead, includ probe for  avail bandwidth between node, locat appropri node to peer with for data retriev and redundantli receiv the same data object from multipl sourc. third, the  algorithm should be decentr and scalabl to thousand of particip. no node should be requir to learn or maintain global knowledg, for instanc global group  membership or the set of data object current avail at all node. final, the approach must be robust to individu failur. for exampl, the failur of a singl node should result onli in a temporari reduct in the bandwidth  deliv to a small subset of particip; no singl failur should result in the complet loss of data for ani signific fraction of node, as might be the case for a singl node failur high up in a multicast overlai tree. in thi context, thi paper present the design and  evalu of bullet, an algorithm for construct an overlai mesh that attempt to maintain the abov properti.  bullet node begin by self-organ into an overlai tree, which can be construct by ani of a number of exist  techniqu [1, 18, 21, 24, 34]. each bullet node, start with the root of the underli tree, then transmit a disjoint set of data to each of it children, with the goal of maintain  uniform repres of each data item across all  particip. the level of disjoint is determin by the  bandwidth avail to each of it children. bullet then emploi a scalabl and effici algorithm to enabl node to quickli locat multipl peer capabl of transmit miss data item to the node. thu, bullet layer a high-bandwidth mesh on top of an arbitrari overlai tree. depend on the type of data be transmit, bullet can option emploi a varieti of encod scheme, for instanc erasur code [7, 26, 25] or multipl descript code (mdc) [17], to  effici dissemin data, adapt to variabl bandwidth, and recov from loss. final, we us tfrc [15] to transfer data both down the overlai tree and among peer. thi  ensur that the entir overlai behav in a congest-friendli manner, adjust it transmiss rate on a per-connect basi base on prevail network condit. on import benefit of our approach is that the  bandwidth deliv by the bullet mesh is somewhat independ of the bandwidth avail through the underli overlai tree. on signific limit to build high bandwidth overlai tree is the overhead associ with the tree  construct protocol. in these tree, it is critic that each particip locat a parent via probe with a high level of avail bandwidth becaus it receiv data from onli a singl sourc (it parent). thu, even onc the tree is construct, node must continu their probe to adapt to dynam chang network condit. while bandwidth probe is an activ area of research [20, 35], accur  result gener requir the transfer of a larg amount of data to gain confid in the result. our approach with bullet allow receiv to obtain high bandwidth in aggreg  us individu transfer from peer spread across the system. thu, in bullet, the bandwidth avail from ani  individu peer is much less import than in ani  bandwidthoptim tree. further, all the bandwidth that would  normal be consum probe for bandwidth can be  realloc to stream data across the bullet mesh. we have complet a prototyp of bullet run on top of a number of overlai tree. our evalu of a 1000-node overlai run across a wide varieti of emul 20,000 node network topolog show that bullet can deliv up to twice the bandwidth of a bandwidth-optim tree (us an oﬄin algorithm and global network topolog  inform), all while remain tcp friendli. we also deploi our prototyp across the planetlab [31] wide-area testb. for these live internet run, we find that bullet can deliv compar bandwidth perform improv. in both case, the overhead of maintain the bullet mesh and  locat the appropri disjoint data is limit to 30 kbp per node, accept for our target high-bandwidth, larg-scale scenario. the remaind of thi paper is organ as follow.  section 2 present bullet"s system compon includ  ransub, inform content deliveri, and tfrc. section 3 then detail bullet, an effici data distribut system for  bandwidth intens applic. section 4 evalu bullet"s perform for a varieti of network topolog, and  compar it to exist multicast techniqu. section 5 place our work in the context of relat effort and section 6 present our conclus. 2. system compon our approach to high bandwidth data dissemin  center around the techniqu depict in figur 1. first, we split the target data stream into block which ar further subdivid into individu (typic packet-size) object. depend on the requir of the target applic, object mai be encod [17, 26] to make data recoveri more effici. next, we purposefulli dissemin disjoint object 283 s a c origin data stream: 1 2 3 4 5 6 b 1 2 3 5 1 3 4 6 2 4 5 6 tfrc to determin avail bw d e 1 2 5 1 3 4 figur 1: high-level view of bullet"s oper. to differ client at a rate determin by the avail bandwidth to each client. we us the equat-base tfrc protocol to commun among all node in the overlai in a congest respons and tcp friendli manner. given the abov techniqu, data is spread across the  overlai tree at a rate commensur with the avail  bandwidth in the overlai tree. our overal goal howev is to deliv more bandwidth than would otherwis be avail through ani tree. thu, at thi point, node requir a  scalabl techniqu for locat and retriev disjoint data from their peer. in essenc, these perpendicular link across the overlai form a mesh to augment the bandwidth avail through the tree. in figur 1, node d onli ha suffici bandwidth to receiv 3 object per time unit from it  parent. howev, it is abl to locat two peer, c and e, who ar abl to transmit miss data object, in thi  exampl increas deliv bandwidth from 3 object per time unit to 6 data object per time unit. locat appropri remot peer cannot requir global state or global  commun. thu, we propos the period dissemin of chang, uniformli random subset of global state to each overlai node onc per configur time period. thi  random subset contain summari ticket of the object avail at a subset of the node in the system. each node us thi inform to request data object from remot node that have signific diverg in object membership. it then  attempt to establish a number of these peer relationship with the goal of minim overlap in the object receiv from each peer and maxim the total us bandwidth deliv to it. in the remaind of thi section, we provid brief  background on each of the techniqu that we emploi as  fundament build block for our work. section 3 then present the detail of the entir bullet architectur. 2.1 data encod depend on the type of data be distribut through the system, a number of data encod scheme can improv system effici. for instanc, if multimedia data is be distribut to a set of heterogen receiv with variabl bandwidth, mdc [17] allow receiv obtain differ subset of the data to still maintain a usabl multimedia stream. for dissemin of a larg file among a set of receiv, erasur code enabl receiv not to focu on  retriev everi transmit data packet. rather, after  obtain a threshold minimum number of packet, receiv ar abl to decod the origin data stream. of cours,  bullet is amen to a varieti of other encod scheme or even the null encod scheme, where the origin data stream is transmit best-effort through the system. in thi paper, we focu on the benefit of a special class of erasur-correct code us to implement the digit fountain [7] approach. redund tornado [26] code ar creat by perform xor oper on a select  number of origin data packet, and then transmit along with the origin data packet. tornado code requir ani (1+ )k correctli receiv packet to reconstruct the origin k data packet, with the typic low recept overhead ( ) of 0.03 − 0.05. in return, thei provid significantli faster encod and decod time. addition, the decod algorithm can run in real-time, and the reconstruct  process can start as soon as suffici mani packet have  arriv. tornado code requir a predetermin stretch factor (n/k, where n is the total number of encod packet), and their encod time is proport to n. lt code [25]  remov these two limit, while maintain a low  recept overhead of 0.05. 2.2 ransub to address the challeng of locat disjoint content within the system, we us ransub [24], a scalabl approach to  distribut chang, uniform random subset of global state to all node of an overlai tree. ransub assum the  presenc of some scalabl mechan for effici build and maintain the underli tree. a number of such  techniqu ar describ in [1, 18, 21, 24, 34]. ransub distribut random subset of particip node throughout the tree us collect and distribut messag. collect messag start at the leav and propag up the tree, leav state at each node along the path to the root. distribut messag start at the root and travel down the tree, us the inform left at the node dure the  previou collect round to distribut uniformli random subset to all particip. us the collect and distribut messag, ransub distribut a random subset of particip to each node onc per epoch. the lower bound on the length of an epoch is determin by the time it take to propag data up then back down the tree, or roughli twice the height of the tree. for appropri construct tree, the minimum epoch length will grow with the logarithm of the number of particip, though thi is not requir for correct. as part of the distribut messag, each particip send a uniformli random subset of remot node, call a  distribut set, down to it children. the content of the  distribut set ar construct us the collect set gather dure the previou collect phase. dure thi phase, each particip send a collect set consist of a random subset of it descend node up the tree to the root along with an estim of it total number of descend. after the root receiv all collect set and the collect phase complet, the distribut phase begin again in a new epoch. on of the kei featur of ransub is the compact  oper. thi is the process us to ensur that membership in a collect set propag by a node to it parent is both random and uniformli repres of all member of the sub-tree root at that node. compact take multipl  fixeds subset and the total popul repres by each subset as input, and gener a new fix-size subset. the 284 a csc={cs}, csd={ds} csf={fs}, csg={gs} csb={bs,cs,ds}, cse={es,fs,gs} b c e d gf b c a e d gf dse={as,bs,cs, ds} dsb={as,es,fs,gs} dsg={as,bs,cs, ds,es,fs} dsd={as,bs, cs,es,fs,gs} dsf={as,bs,cs, ds,es,gs} dsc={as,bs, ds,es,fs,gs} figur 2: thi exampl show the two phase of the ransub protocol that occur in on epoch. the collect phase is shown on the left, where the collect set ar travel up the overlai to the root. the distribut phase on the right show the distribut set travel down the overlai to the leaf node. member of the result set ar uniformli random  repres of the input subset member. ransub offer sever wai of construct distribut set. for our system, we choos the ransub-nondescend  option. in thi case, each node receiv a random subset  consist of all node exclud it descend. thi is  appropri for our download structur where descend ar expect to have less content than an ancestor node in most case. a parent creat ransub-nondescend distribut set for each child by compact collect set from that child"s sibl and it own distribut set. the result is a distribut set that contain a random subset repres all node in the tree except for those root at that particular child. we depict an exampl of ransub"s collect-distribut process in figur 2. in the figur, as stand for node a"s state. 2.3 inform content deliveri techniqu assum we can enabl a node to locat a peer with disjoint content us ransub, we need a method for  reconcil the differ in the data. addition, we requir a bandwidth-effici method with low comput  overhead. we chose to implement the approxim reconcili techniqu propos in [6] for these task in bullet. to describ the content, node maintain work set. the work set contain sequenc number of packet that have been successfulli receiv by each node over some period of time. we need the abil to quickli discern the resembl between work set from two node and decid whether a fine-grain reconcili is benefici. summari ticket, or min-wise sketch [5], serv thi purpos. the main idea is to creat a summari ticket that is an unbias random sampl of the work set. a summari ticket is a small fix-size arrai. each entri in thi arrai is maintain by a specif permut function. the goal is to have each entri popul by the element with the smallest permut valu. to insert a new element into the summari ticket, we appli the permut function in order and updat arrai valu as appropri. the permut function can be thought of as a  special hash function. the choic of permut function is import as the qualiti of the summari ticket depend directli on the random properti of the permut function. sinc we requir them to have a low  comput overhead, we us simpl permut function, such as pj(x) = (ax+b)mod|u|, where u is the univers size  (depend on the data encod scheme). to comput the  resembl between two work set, we comput the  number of summari ticket entri that have the same valu, and divid it by the total number of entri in the summari  ticket. figur 3 show the wai the permut function ar us to popul the summari ticket. 12 10 2 27 7 2 18 19 40 1 workingset 14 42 17 33 38 15 12 p1 33 29 28 44 57 15 p2 22 28 45 61 14 51 pn… … summari ticket minminmin 10 2 figur 3: exampl show a sampl summari ticket be construct from the work set. to perform approxim fine-grain reconcili, a peer a send it digest to peer b and expect to receiv  packet not describ in the digest. for thi purpos, we us a bloom filter [4], a bit arrai of size m with k independ associ hash function. an element s from the set of receiv kei s = {so, s2, . . . , sn−1} is insert into the  filter by comput the hash valu h0, h1, . . . , hk−1 of s and set the bit in the arrai that correspond to the hash 285 valu. to check whether an element x is in the bloom filter, we hash it us the hash function and check whether all posit in the bit arrai ar set. if at least on is not set, we know that the bloom filter doe not contain x. when us bloom filter, the insert of differ  element might caus all the posit in the bit arrai  correspond to an element that is not in the set to be nonzero. in thi case, we have a fals posit. therefor, it is possibl that peer b will not send a packet to peer a even though a is miss it. on the other hand, a node will never send a packet that is describ in the bloom filter, i.e. there ar no fals neg. the probabl of get a fals posit pf on the membership queri can be express as a function of the ratio m n and the number of hash function k: pf = (1 − e−kn/m )k . we can therefor choos the size of the bloom filter and the number of hash function that will yield a desir fals posit ratio. 2.4 tcp friendli rate control although most traffic in the internet todai is best serv by tcp, applic that requir a smooth send rate and that have a higher toler for loss often find tcp"s reaction to a singl drop packet to be unnecessarili  sever. tcp friendli rate control, or tfrc, target unicast stream multimedia applic with a need for less  drastic respons to singl packet loss [15]. tcp halv the send rate as soon as on packet loss is detect.  altern, tfrc is an equat-base congest control  protocol that is base on loss event, which consist of multipl packet be drop within on round-trip time. unlik tcp, the goal of tfrc is not to find and us all  avail bandwidth, but instead to maintain a rel steadi send rate while still be respons to congest. to guarante fair with tcp, tfrc us the respons function that describ the steadi-state send rate of tcp to determin the transmiss rate in tfrc. the formula of the tcp respons function [27] us in tfrc to describ the send rate is: t = s r Õ2p 3 +trt o(3 Õ3p 8 )p(1+32p2) thi is the express for the send rate t in byte/second, as a function of the round-trip time r in second, loss event rate p, packet size s in byte, and tcp retransmit valu trt o in second. tfrc sender and receiv must cooper to achiev a smooth transmiss rate. the sender is respons for comput the weight round-trip time estim r between sender and receiv, as well as determin a reason  retransmit timeout valu trt o. in most case, us the  simpl formula trt o = 4r provid the necessari fair with tcp. the sender is also respons for adjust the  send rate t in respons to new valu of the loss event rate p report by the receiv. the sender obtain a new  measur for the loss event rate each time a feedback packet is receiv from the receiv. until the first loss is report, the sender doubl it transmiss rate each time it receiv feedback just as tcp doe dure slow-start. the main role of the receiv is to send feedback to the sender onc per round-trip time and to calcul the loss event rate includ in the feedback packet. to obtain the loss event rate, the receiv maintain a loss interv arrai that contain valu for the last eight loss interv. a loss interv is defin as the number of packet receiv  correctli between two loss event. the arrai is continu updat as loss ar detect. a weight averag is  comput base on the sum of the loss interv valu, and the invers of the sum is the report loss event rate, p. when implement bullet, we us an unreli version of tfrc. we want a transport protocol that wa  congest awar and tcp friendli. lost packet were more easili recov from other sourc rather than wait for a retransmiss from the initi sender. henc, we  elimin retransmiss from tfrc. further, tfrc doe not aggress seek newli avail bandwidth like tcp, a  desir trait in an overlai tree where there might be multipl compet flow share the same link. for exampl, if a leaf node in the tree tri to aggress seek out new  bandwidth, it could creat congest all the wai up to the root of the tree. by us tfrc we were abl to avoid these scenario. 3. bullet bullet is an effici data distribut system for  bandwidth intens applic. while mani current overlai network distribut algorithm us a distribut tree to deliv data from the tree"s root to all other node,  bullet layer a mesh on top of an origin overlai tree to  increas overal bandwidth to all node in the tree. henc, each node receiv a parent stream from it parent in the tree and some number of perpendicular stream from chosen peer in the overlai. thi ha signific bandwidth impact when a singl node in the overlai is unabl to deliv  adequ bandwidth to a receiv node. bullet requir an underli overlai tree for ransub to deliv random subset of particip"s state to node in the overlai, inform them of a set of node that mai be good candid for retriev data not avail from ani of the node"s current peer and parent. while we also us the underli tree for baselin stream, thi is not critic to bullet"s abil to effici deliv data to node in the overlai. as a result, bullet is capabl of function on top of essenti ani overlai tree. in our experi, we have run bullet over random and bandwidth-optim tree creat oﬄin (with global topolog knowledg). bullet regist itself with the underli overlai tree so that it is inform when the overlai chang as node come and go or make perform transform in the overlai. as with stream overlai tree, bullet can us standard transport such as tcp and udp as well as our  implement of tfrc. for the remaind of thi paper, we assum the us of tfrc sinc we primarili target stream  highbandwidth content and we do not requir reliabl or in-order deliveri. for simplic, we assum that packet origin at the root of the tree and ar tag with increas sequenc number. each node receiv a packet will option  forward it to each of it children, depend on a number of factor relat to the child"s bandwidth and it rel  posit in the tree. 3.1 find overlai peer ransub period deliv subset of uniformli random select node to each particip in the overlai. bullet  receiv us these list to locat remot peer abl to transmit miss data item with good bandwidth. ransub messag contain a set of summari ticket that includ a small (120 286 byte) summari of the data that each node contain.  ransub deliv subset of these summari ticket to node everi configur epoch (5 second by default). each node in the tree maintain a work set of the packet it ha receiv thu far, index by sequenc number. node associ each work set with a bloom filter that maintain a  summari of the packet receiv thu far. sinc the bloom filter doe not exce a specif size (m) and we would like to limit the rate of fals posit, bullet period clean up the bloom filter by remov lower sequenc number from it. thi allow us to keep the bloom filter popul n from grow at an unbound rate. the net effect is that a node will attempt to recov packet for a finit amount of time depend on the packet arriv rate. similarli, bullet remov older item that ar not need for data  reconstruct from it work set and summari ticket. we us the collect and distribut phase of ransub to carri bullet summari ticket up and down the tree. in our current implement, we us a set size of 10 summari ticket, allow each collect and distribut to fit well within the size of a non-fragment ip packet. though bullet  support larger set size, we expect thi paramet to be tunabl to specif applic" need. in practic, our default size of 10 yield favor result for a varieti of overlai and network topolog. in essenc, dure an epoch a node  receiv a summar partial view of the system"s state at that time. upon receiv a random subset each epoch, a bullet node mai choos to peer with the node have the lowest similar ratio when compar to it own summari ticket. thi is done onli when the node ha suffici space in it sender list to accept anoth sender (sender with  lacklust perform ar remov from the current sender list as describ in section 3.4). onc a node ha chosen the best node it send it a peer request contain the  request node"s bloom filter. such a request is accept by the potenti sender if it ha suffici space in it receiv list for the incom receiv. otherwis, the send request is reject (space is period creat in the receiv list as further describ in section 3.4). 3.2 recov data from peer assum it ha space for the new peer, a recipi of the peer request instal the receiv bloom filter and will period transmit kei not present in the bloom filter to the request node. the request node will refresh it instal bloom filter at each of it send peer  period. along with the fresh filter, a receiv node will also assign a portion of the sequenc space to each of it sender. in thi wai, a node is abl the reduc the likelihood that two peer simultan transmit the same kei to it, wast network resourc. a node divid the sequenc space in it current work set among each of it sender uniformli. as illustr in figur 4, a bullet receiv view the data space as a matrix of packet sequenc contain s row, where s is it current number of send peer. a receiv  period (everi 5 second by default) updat each sender with it current bloom filter and the rang of sequenc  cover in it bloom filter. thi identifi the rang of packet that the receiv is current interest in recov. over time, thi rang shift as depict in figur 4-b). in  addit, the receiv node assign to each sender a row from the matrix, label mod. a sender will forward packet to b) mod = 3 00000000000000000000000000000000001111111111111111111111111111111111 7 1 2 8 a) sender = 7mod = 2 low high time 00000000000000000000000000000000001111111111111111111111111111111111 figur 4: a bullet receiv view data as a matrix of sequenc packet with row equal to the number of peer sender it current ha. it request data within the rang (low, high) of sequenc number base on what it ha receiv. a) the receiv  request a specif row in the sequenc matrix from each sender. b) as it receiv more data, the rang of sequenc advanc and the receiv request  differ row from sender. the receiv that have a sequenc number x such that x modulo s equal the mod number. in thi fashion, receiv regist to receiv disjoint data from their send peer. by specifi rang and matrix row, a receiv is  unlik to receiv duplic data item, which would result in wast bandwidth. a duplic packet, howev, mai be  receiv when a parent recov a packet from on of it peer and relai the packet to it children (and descend). in thi case, a descend would receiv the packet out of order and mai have alreadi recov it from on of it peer. in practic, thi wast recept of duplic packet is  toler; less than 10% of all receiv packet ar duplic in our experi. 3.3 make data disjoint we now provid detail of bullet"s mechan to increas the eas by which node can find disjoint data not provid by parent. we oper on the premis that the main  challeng in recov lost data packet transmit over an overlai distribut tree li in find the peer node  hous the data to recov. mani system take a  hierarch approach to thi problem, propag repair request up the distribut tree until the request can be satisfi. thi ultim lead to scalabl issu at higher level in the hierarchi particularli when overlai link ar  bandwidthconstrain. on the other hand, bullet attempt to recov lost data from ani non-descend node, not just ancestor, therebi increas overal system scalabl. in tradit overlai distribut tree, packet ar lost by the transmiss  transport and/or the network. node attempt to stream data as fast as possibl to each child and have essenti no control over which portion of the data stream ar drop by the transport or network. as a result, the stream  subsystem ha no control over how mani node in the system will ultim receiv a particular portion of the data. if few node receiv a particular rang of packet, recov these piec of data becom more difficult, requir increas commun cost, and lead to scalabl problem. in contrast, bullet node ar awar of the bandwidth  achiev to each of it children us the underli transport. if 287 a child is unabl to receiv the stream rate that the  parent receiv, the parent conscious decid which portion of the data stream to forward to the constrain child. in  addit, becaus node recov data from particip chosen uniformli at random from the set of non-descend, it is advantag to make each transmit packet recover from approxim the same number of particip node. that is, given a randomli chosen subset of peer node, it is with the same probabl that each node ha a particular data packet. while not explicitli proven here, we believ that thi approach maxim the probabl that a lost data packet can be recov, regardless of which packet is lost. to thi end, bullet distribut incom packet among on or more children in hope that the expect number of node receiv each packet is approxim the same. a node p maintain for each child, i, a limit and send factor, lfi and sfi. these factor determin the proport of p"s receiv data rate that it will forward to each child. the send factor sfi is the portion of the parent stream (rate) that each child should own base on the number of descend the child ha. the more descend a child ha, the larger the portion of receiv data it should own. the limit factor lfi repres the proport of the  parent rate beyond the send factor that each child can  handl. for exampl, a child with on descend, but high bandwidth would have a low send factor, but a veri high limit factor. though the child is respons for own a small portion of the receiv data, it actual can receiv a larg portion of it. becaus ransub collect descend count di for each child i, bullet simpli make a call into ransub when send data to determin the current send factor of it children. for each child i out of k total, we set the send factor to be: sfi = diÈk j=1 dj . in addit, a node track the data successfulli  transmit via the transport. that is, bullet data transport  socket ar non-block; success transmiss ar send  attempt that ar accept by the non-block transport. if the transport would block on a send (i.e., transmiss of the packet would exce the tcp-friendli fair share of network resourc), the send fail and is count as an unsuccess send attempt. when a data packet is receiv by a parent, it calcul the proport of the total data stream that ha been sent to each child, thu far, in thi epoch. it then assign ownership of the current packet to the child with send proport farthest awai from it sfi as illustr in figur 5. have chosen the target of a particular packet, the parent attempt to forward the packet to the child. if the send is not success, the node must find an altern child to own the packet. thi occur when a child"s bandwidth is not  adequ to fulfil it respons base on it descend (sfi). to compens, the node attempt to  determinist find a child that can own the packet (as evidenc by it transport accept the packet). the net result is that children with more than adequ bandwidth will own more of their share of packet than those with inadequ  bandwidth. in the event that no child can accept a packet, it must be drop, correspond to the case where the sum of all children bandwidth is inadequ to serv the receiv foreach child in children { if ( (child->sent / total_sent) < child->send_factor) target_child = child; } if (!senddata( target_child->addr, msg, size, kei)) { // send succeed target_child->sent++; target_child->child_filter.insert(got_kei); sent_packet = 1; } foreach child in children { should_send = 0; if (!sent_packet) // transfer ownership should_send = 1; els // test for avail bandwidth if ( kei % (1.0/child->limit_factor) == 0 ) should_send = 1; if (should_send) { if (!senddata( child->addr, msg, size, kei)) { if (!sent_packet) // i receiv ownership child->sent++; els increas(child->limit_factor); child->child_filter.insert(got_kei); sent_packet = 1; } els // send fail if (sent_packet) // wa for extra bw decreas(child->limit_factor); } } figur 5: pseudo code for bullet"s disjoint data send routin stream. while make data more difficult to recov, bullet still allow for recoveri of such data to it children. the send node will cach the data packet and serv it to it request peer. thi process allow it children to  potenti recov the packet from on of their own peer, to whom addit bandwidth mai be avail. onc a packet ha been successfulli sent to the own child, the node attempt to send the packet to all other children depend on the limit factor lfi. for each child i, a node attempt to forward the packet determinist if the packet"s sequenc modulo 1/lfi is zero. essenti, thi identifi which lfi fraction of packet of the receiv data stream should be forward to each child to make us of the avail bandwidth to each. if the packet transmiss is success, lfi is increas such that on more packet is to be sent per epoch. if the transmiss fail, lfi is decreas by the same amount. thi allow children limit factor to be continu adjust in respons to chang network condit. it is import to realiz that by maintain limit  factor, we ar essenti us feedback from children (by  observ transport behavior) to determin the best data to stop send dure time when a child cannot handl the entir parent stream. in on extrem, if the sum of  children bandwidth is not enough to receiv the entir parent stream, each child will receiv a complet disjoint data stream of packet it own. in the other extrem, if each 288 child ha ampl bandwidth, it will receiv the entir parent stream as each lfi would settl on 1.0. in the gener case, our own strategi attempt to make data disjoint among children subtre with the guid premis that, as much as possibl, the expect number of node receiv a packet is the same across all packet. 3.4 improv the bullet mesh bullet allow a maximum number of peer relationship. that is, a node can have up to a certain number of receiv and a certain number of sender (each default to 10 in our implement). a number of consider can make the current peer relationship sub-optim at ani given time: i) the probabilist natur of ransub mean that a node mai not have been expos to a suffici appropri peer, ii) receiv greedili choos peer, and iii) network condit ar constantli chang. for exampl, a sender node mai wind up be unabl to provid a node with veri much us (non-duplic) data. in such a case, it would be advantag to remov that sender as a peer and find some other peer that offer better util. each node period (everi few ransub epoch)  evalu the bandwidth perform it is receiv from it send peer. a node will drop a peer if it is send too mani duplic packet when compar to the total number of packet receiv. thi threshold is set to 50% by default. if no such wast sender is found, a node will drop the sender that is deliv the least amount of us data to it. it will replac thi sender with some other send peer candid, essenti reserv a trial slot in it sender list. in thi wai, we ar assur of keep the best sender seen so far and will elimin sender whose perform  deterior with chang network condit. likewis, a bullet sender will period evalu it  receiv. each receiv updat sender of the total receiv bandwidth. the sender, know the amount of data it ha sent to each receiv, can determin which receiv is  benefit the least by peer with thi sender. thi correspond to the on receiv acquir the least portion of it  bandwidth through thi sender. the sender drop thi receiv, creat an empti slot for some other trial receiv. thi is similar to the concept of wean present in [24]. 4. evalu we have evalu bullet"s perform in real internet environ as well as the modelnet [37] ip emul framework. while the bulk of our experi us  modelnet, we also report on our experi with bullet on the planetlab internet testb [31]. in addit, we have  implement a number of underli overlai network tree upon which bullet can execut. becaus bullet perform well over a randomli creat overlai tree, we present  result with bullet run over such a tree compar against an oﬄin greedi bottleneck bandwidth tree algorithm us global topolog inform describ in section 4.1. all of our implement leverag a common  develop infrastructur call macedon [33] that allow for the specif of overlai algorithm in a simpl  domainspecif languag. it enabl the reus of the major of common function in these distribut system,  includ probe infrastructur, thread manag, messag pass, and debug environ. as a result, we  believ that our comparison qualit show algorithm differ rather than implement intricaci. our  implement of the core bullet logic is under 1000 line of code in thi infrastructur. our modelnet experi make us of 50 2ghz  pentium4"s run linux 2.4.20 and interconnect with 100 mbp and 1 gbp ethernet switch. for the major of these experi, we multiplex on thousand instanc (overlai particip) of our overlai applic across the 50 linux node (20 per machin). in modelnet, packet transmiss ar rout through emul respons for accur  emul the hop-by-hop delai, bandwidth, and congest of a network topolog. in our evalu, we us four 1.4ghz pentium iii"s run freebsd-4.7 as emul. thi  platform support approxim 2-3 gbp of aggreg  simultan commun among end host. for most of our modelnet experi, we us 20,000-node inet-gener topolog [10]. we randomli assign our particip node to act as client connect to on-degre stub node in the topolog. we randomli select on of these particip to act as the sourc of the data stream. propag delai in the network topolog ar calcul base on the rel placement of the network node in the plane by inet. base on the classif in [8], we  classifi network link as be client-stub, stub-stub,  transitstub, and transit-transit depend on their locat in the network. we restrict topolog bandwidth by set the bandwidth for each link depend on it type. each type of link ha an associ bandwidth rang from which the bandwidth is chosen uniformli at random. by chang these rang, we vari bandwidth constraint in our  topolog. for our experi, we creat three differ rang correspond to low, medium, and high bandwidth rel to our typic stream rate of 600-1000 kbp as  specifi in tabl 1. while the present modelnet result ar restrict to two topolog with vari bandwidth  constraint, the result of experi with addit  topolog all show qualit similar behavior. we do not implement ani particular code scheme for our experi. rather, we assum that either each  sequenc number directli specifi a particular data block and the block offset for each packet, or we ar distribut data within the same block for lt code, e.g., when distribut a file. 4.1 offlin bottleneck bandwidth tree on of our goal is to determin bullet"s perform  rel to the best possibl bandwidth-optim tree for a given network topolog. thi allow us to quantifi the  possibl improv of an overlai mesh construct us bullet rel to the best possibl tree. while we have not yet proven thi, we believ that thi problem is np-hard. thu, in thi section we present a simpl greedi oﬄin  algorithm to determin the connect of a tree like to deliv a high level of bandwidth. in practic, we ar not awar of ani scalabl onlin algorithm that ar abl to deliv the bandwidth of an oﬄin algorithm. at the same time, tree construct by our algorithm tend to be long and skinni make them less resili to failur and inappropri for delai sensit applic (such as multimedia stream). in addit to ani perform comparison, a bullet mesh ha much lower depth than the bottleneck tree and is more resili to failur, as discuss in section 4.6. 289 topolog  classif client-stub stub-stub transit-stub transit-transit low bandwidth 300-600 500-1000 1000-2000 2000-4000 medium bandwidth 800-2800 1000-4000 1000-4000 5000-10000 high bandwidth 1600-5600 2000-8000 2000-8000 10000-20000 tabl 1: bandwidth rang for link type us in our topolog express in kbp. specif, we consid the follow problem: given  complet knowledg of the topolog (individu link latenc, bandwidth, and packet loss rate), what is the overlai tree that will deliv the highest bandwidth to a set of  predetermin overlai node? we assum that the throughput of the slowest overlai link (the bottleneck link) determin the throughput of the entir tree. we ar, therefor, try to find the direct overlai tree with the maximum bottleneck link. accordingli, we refer to thi problem as the overlai maximum bottleneck tree (ombt). in a simplifi case,  assum that congest onli exist on access link and there ar no lossi link, there exist an optim algorithm [23]. in the more gener case of content on ani physic link, and when the system is allow to choos the rout path between the two endpoint, thi problem is known to be np-hard [12], even in the absenc of link loss. for the purpos of thi paper, our goal is to determin a good overlai stream tree that provid each overlai  particip with substanti bandwidth, while avoid overlai link with high end-to-end loss rate. we make the follow assumpt: 1. the rout path between ani two overlai particip is fix. thi close model the exist overlai  network model with ip for unicast rout. 2. the overlai tree will us tcp-friendli unicast  connect to transfer data point-to-point. 3. in the absenc of other flow, we can estim the throughput of a tcp-friendli flow us a steadi-state formula [27]. 4. when sever (n) flow share the same bottleneck link, each flow can achiev throughput of at most c n , where c is the physic capac of the link. given these assumpt, we concentr on estim the throughput avail between two particip in the overlai. we start by calcul the throughput us the steadi-state formula. we then rout the flow in the  network, and consid the physic link on at a time. on each physic link, we comput the fair-share for each of the compet flow. the throughput of an overlai link is then approxim by the minimum of the fair-share along the rout path, and the formula rate. if some flow doe not requir the same share of the bottleneck link as other  compet flow (i.e., it throughput might be limit by loss elsewher in the network), then the other flow might end up with a greater share than the on we comput. we do not account for thi, as the major goal of thi estim is simpli to avoid lossi and highli congest physic link. more formal, we defin the problem as follow: overlai maximum bottleneck tree (ombt). given a physic network repres as a graph g = (v, e), set of overlai particip p ⊂ v , sourc node (s ∈ p), bandwidth b : e → r+ , loss rate l : e → [0, 1],  propag delai d : e → r+ of each link, set of possibl overlai link o = {(v, w) | v, w ∈ p, v = w}, rout tabl rt : o × e → {0, 1}, find the overlai tree t = {o | o ∈ o} (|t| = |p| − 1, ∀v ∈ p there exist a path ov = s ❀ v) that maxim min o|o∈t (min(f(o), min e|e∈o b(e) |{p | p ∈ t, e ∈ p}| )) where f(o) is the tcp steadi-state send rate,  comput from round-trip time d(o) = Èe∈o d(e) + Èe∈o d(e) (given overlai link o = (v, w), o = (w, v)), and loss rate l(o) = 1 − Ée∈o (1 − l(e)). we write e ∈ o to express that link e is includ in the o"s rout path (rt(o, e) = 1). assum that we can estim the throughput of a flow, we proce to formul a greedi ombt algorithm. thi algorithm is non-optim, but a similar approach wa found to perform well [12]. our algorithm is similar to the widest path heurist (wph) [12], and more gener to prim"s mst algorithm [32]. dure it execut, we maintain the set of node alreadi in the tree, and the set of remain node. to grow the tree, we consid all the overlai link lead from the node in the tree to the remain node. we greedili pick the node with the highest throughput overlai link. us thi overlai link might caus us to rout traffic over physic link  travers by some other tree flow. sinc we do not re-examin the throughput of node that ar alreadi in the tree, thei might end up be connect to the tree with slower  overlai link than initi estim. howev, by attach the node with the highest residu bandwidth at everi step, we hope to lessen the effect of after-the-fact physic link  share. with the synthet topolog we us for our emul environ, we have not found thi inaccuraci to sever impact the qualiti of the tree. 4.2 bullet vs. stream we have implement a simpl stream applic that is capabl of stream data over ani specifi tree. in our implement, we ar abl to stream data through  overlai tree us udp, tfrc, or tcp. figur 6 show  averag bandwidth that each of 1000 node receiv via thi stream as time progress on the x-axi. in thi  exampl, we us tfrc to stream 600 kbp over our oﬄin  bottleneck bandwidth tree and a random tree (other random tree exhibit qualit similar behavior). in these  experi, stream begin 100 second into each run. while the random tree deliv an achiev bandwidth of under 100 kbp, our oﬄin algorithm overlai deliv approxim 400 kbp of data. for thi experi, bandwidth were set to the medium rang from tabl 1. we believ that ani degre-constrain onlin bandwidth overlai tree algorithm would exhibit similar (or lower) behavior to our  bandwidth290 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 bandwidth(kbp) time (s) bottleneck bandwidth tree random tree figur 6: achiev bandwidth over time for tfrc stream over the bottleneck bandwidth tree and a random tree. optim overlai. henc, bullet"s goal is to overcom thi bandwidth limit by allow for the perpendicular recept of data and by util disjoint data flow in an attempt to match or exce the perform of our oﬄin algorithm. to evalu bullet"s abil to exce the bandwidth  achiev via tree distribut overlai, we compar bullet  run over a random overlai tree to the stream behavior shown in figur 6. figur 7 show the averag bandwidth receiv by each node (label us total) with standard deviat. the graph also plot the total amount of data receiv and the amount of data a node receiv from it parent. for thi topolog and bandwidth set, bullet wa abl to achiev an averag bandwidth of 500 kbp, five time that achiev by the random tree and more than 25% higher than the oﬄin bottleneck bandwidth algorithm. further, the total bandwidth (includ redund data)  receiv by each node is onli slightli higher than the us content, mean that bullet is abl to achiev high  bandwidth while wast littl network resourc. bullet"s us of tfrc in thi exampl ensur that the overlai is tcp friendli throughout. the averag per-node control overhead is approxim 30 kbp. by trace certain packet as thei move through the system, we ar abl to acquir link stress estim of our system. though the link stress can be differ for each packet sinc each can take a differ path through the overlai mesh, we averag link stress due to each trace packet. for thi experi, bullet ha an averag link stress of approxim 1.5 with an absolut maximum link stress of 22. the standard deviat in most of our run is fairli high becaus of the limit bandwidth randomli assign to some client-stub and stub-stub link. we feel that thi is  consist with real internet behavior where client have wide vari network connect. a time slice is shown in  figur 8 that plot the cdf of instantan bandwidth that each node receiv. the graph show that few client node receiv inadequ bandwidth even though thei ar  bandwidth constrain. the distribut rise sharpli start at approxim 500 kbp. the vast major of node receiv a stream of 500-600 kbp. we have evalu bullet under a number of bandwidth constraint to determin how bullet perform rel to the 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 450 500 bandwidth(kbp) time (s) raw total us total from parent figur 7: achiev bandwidth over time for bullet over a random tree. 0 0.2 0.4 0.6 0.8 1 0 100 200 300 400 500 600 700 800 percentageofnod bandwidth(kbp) figur 8: cdf of instantan achiev bandwidth at time 430 second. avail bandwidth of the underli topolog. tabl 1  describ repres bandwidth set for our stream rate of 600 kbp. the intent of these set is to show a scenario where more than enough bandwidth is avail to achiev a target rate even with tradit tree stream, an exampl of where it is slightli not suffici, and on in which the avail bandwidth is quit restrict. figur 9 show achiev bandwidth for bullet and the bottleneck bandwidth tree over time gener from topolog with bandwidth in each rang. in all of our experi, bullet outperform the  bottleneck bandwidth tree by a factor of up to 100%, depend on how much bandwidth is constrain in the underli  topolog. in on extrem, have more than ampl bandwidth, bullet and the bottleneck bandwidth tree ar both abl to stream at the request rate (600 kbp in our exampl). in the other extrem, heavili constrain topolog allow  bullet to achiev twice the bandwidth achiev via the  bottleneck bandwidth tree. for all other topolog, bullet"s benefit ar somewher in between. in our exampl, bullet run over our medium-constrain bandwidth topolog is abl to outperform the bottleneck bandwidth tree by a factor of 25%. further, we stress that we believ it would 291 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 bandwidth(kbp) time (s) bullet - high bandwidth bottleneck tree - high bandwidth bullet - medium bandwidth bottleneck tree - medium bandwidth bullet - low bandwidth bottleneck tree - low bandwidth figur 9: achiev bandwidth for bullet and  bottleneck tree over time for high, medium, and low bandwidth topolog. be extrem difficult for ani onlin tree-base algorithm to exce the bandwidth achiev by our oﬄin bottleneck algorithm that make us of global topolog inform. for instanc, we built a simpl bandwidth optim overlai tree construct base on overcast [21]. the result  dynam construct tree never achiev more than 75% of the bandwidth of our own oﬄin algorithm. 4.3 creat disjoint data bullet"s abil to deliv high bandwidth level to node depend on it disjoint transmiss strategi. that is, when bandwidth to a child is limit, bullet attempt to send the correct portion of data so that recoveri of the lost data is facilit. a bullet parent send differ data to it children in hope that each data item will be readili avail to node spread throughout it subtre. it doe so by assign ownership of data object to children in a manner that make the expect number of node hold a particular data object equal for all data object it  transmit. figur 10 show the result bandwidth over time for the non-disjoint strategi in which a node (and more  importantli, the root of the tree) attempt to send all data to each of it children (subject to independ loss at  individu child link). becaus the children transport throttl the send rate at each parent, some data is inher sent  disjointli (by chanc). by not explicitli choos which data to send it child, thi approach depriv bullet of 25% of it bandwidth capabl, when compar to the case when our disjoint strategi is enabl in figur 7. 4.4 epidem approach in thi section, we explor how bullet compar to data dissemin approach that us some form of epidem rout. we implement a form of gossip, where a node forward non-duplic packet to a randomli chosen number of node in it local view. thi techniqu doe not us a tree for dissemin, and is similar to lpbcast [14]  (recent improv to incorpor retriev of data object [13]). we do not dissemin packet everi t second; instead we forward them as soon as thei arriv. 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 450 500 bandwidth(kbp) time (s) raw total us total from parent figur 10: achiev bandwidth over time us  nondisjoint data transmiss. we also implement a pbcast-like [2] approach for  retriev data miss from a data distribut tree. the idea here is that node ar expect to obtain most of their data from their parent. node then attempt to retriev ani miss data item through gossip with random peer. instead of us gossip with a fix number of round for each packet, we us anti-entropi with a fifo bloom filter to attempt to locat peer that hold ani local miss data item. to make our evalu conserv, we assum that node emploi gossip and anti-entropi recoveri ar abl to  maintain full group membership. while thi might be difficult in practic, we assum that ransub [24] could also be appli to these idea, specif in the case of anti-entropi  recoveri that emploi an underli tree. further, we also allow both techniqu to reus other aspect of our  implement: bloom filter, tfrc transport, etc. to reduc the number of duplic packet, we us less peer in each round (5) than bullet (10). for our configur, we  experiment found that 5 peer result in the best perform with the lowest overhead. in our experi, increas the number of peer did not improv the averag bandwidth achiev throughout the system. to allow tfrc enough time to ramp up to the appropri tcp-friendli send rate, we set the epoch length for anti-entropi recoveri to 20 second. for these experi, we us a 5000-node inet topolog with no explicit physic link loss. we set link bandwidth accord to the medium rang from tabl 1, and randomli assign 100 overlai particip. the randomli chosen root either stream at 900 kbp (over a random tree for  bullet and greedi bottleneck tree for anti-entropi recoveri), or send packet at that rate to randomli chosen node for  gossip. figur 11 show the result bandwidth over time achiev by bullet and the two epidem approach. as  expect, bullet come close to provid the target bandwidth to all particip, achiev approxim 60 percent more then gossip and stream with anti-entropi. the two epidem techniqu send an excess number of duplic, effect reduc the us bandwidth provid to each node. more importantli, both approach assign equal  signific to other peer, regardless of the avail  band292 0 500 1000 1500 2000 0 50 100 150 200 250 300 bandwidth(kbp) time (s) push gossip raw stream w/ae raw bullet raw bullet us push gossip us stream w/ae us figur 11: achiev bandwidth over time for bullet and epidem approach. width and the similar ratio. bullet, on the other hand, establish long-term connect with peer that provid good bandwidth and disjoint content, and avoid most of the duplic by request disjoint data from each node"s peer. 4.5 bullet on a lossi network to evalu bullet"s perform under more lossi  network condit, we have modifi our 20,000-node  topolog us in our previou experi to includ random packet loss. modelnet allow the specif of a packet loss rate in the descript of a network link. our goal by modifi these loss rate is to simul queu behavior when the network is under load due to background network traffic. to effect thi behavior, we first modifi all non-transit link in each topolog to have a packet loss rate chosen uniformli random from [0, 0.003] result in a maximum loss rate of 0.3%. transit link ar likewis modifi, but with a  maximum loss rate of 0.1%. similar to the approach in [28], we randomli design 5% of the link in the topolog as overload and set their loss rate uniformli random from [0.05, 0.1] result in a maximum packet loss rate of 10%. figur 12 show achiev bandwidth for stream over bullet and us our greedi oﬄin bottleneck bandwidth tree. becaus loss advers affect the bandwidth  achiev over tcp-friendli transport and sinc bandwidth ar strictli monoton decreas over a stream tree,  treebas algorithm perform consider wors than bullet when us on a lossi network. in all case, bullet deliv at least twice as much bandwidth than the bottleneck  bandwidth tree. addition, loss in the low bandwidth  topolog essenti keep the bottleneck bandwidth tree from  deliv ani data, an artifact that is avoid by bullet. 4.6 perform under failur in thi section, we discuss bullet"s behavior in the face of node failur. in contrast to stream distribut tree that must quickli detect and make tree transform to overcom failur, bullet"s failur resili rest on it abil to maintain a higher level of achiev bandwidth by virtu of perpendicular (peer) stream. while all node under a fail node in a distribut tree will experi a temporari 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 bandwidth(kbp) time (s) bullet - high bandwidth bullet - medium bandwidth bottleneck tree - high bandwidth bottleneck tree - medium bandwidth bullet - low bandwidth bottleneck tree - low bandwidth figur 12: achiev bandwidth for bullet and  bottleneck bandwidth tree over a lossi network  topolog. disrupt in servic, bullet node ar abl compens for thi by receiv data from peer throughout the outag. becaus bullet, and, more importantli, ransub make us of an underli tree overlai, part of bullet"s failur recoveri properti will depend on the failur recoveri  behavior of the underli tree. for the purpos of thi  discuss, we simpli assum the worst-case scenario where an underli tree ha no failur recoveri. in our failur  experi, we fail on of root"s children (with 110 of the total 1000 node as descend) 250 second after data  stream is start. by fail on of root"s children, we ar abl to show bullet"s worst-case perform under a singl node failur. in our first scenario, we disabl failur detect in  ransub so that after a failur occur, bullet node request data onli from their current peer. that is, at thi point,  ransub stop function and no new peer relationship ar  creat for the remaind of the run. figur 13 show bullet"s achiev bandwidth over time for thi case. while the  averag achiev rate drop from 500 kbp to 350 kbp, most node (includ the descend of the fail root child) ar abl to recov a larg portion of the data rate. next, we enabl ransub failur detect that recogn a node"s failur when a ransub epoch ha last longer than the predetermin maximum (5 second for thi test). in thi case, the root simpli initi the next distribut phase upon ransub timeout. the net result is that node that ar not descend of the fail node will continu to receiv updat random subset allow them to peer with appropri node reflect the new network condit. as shown in figur 14, the failur caus a neglig disrupt in perform. with ransub failur detect enabl, node quickli learn of other node from which to receiv data. onc such recoveri complet, the descend of the fail node us their alreadi establish peer relationship to compens for their ancestor"s failur. henc, becaus bullet is an overlai mesh, it reliabl characterist far exce that of typic overlai distribut tree. 4.7 planetlab thi section contain result from the deploy of  bullet over the planetlab [31] wide-area network testb. for 293 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 bandwidth(kbp) time (s) bandwidth receiv us total from parent figur 13: bandwidth over time with a worst-case node failur and no ransub recoveri. 0 200 400 600 800 1000 0 50 100 150 200 250 300 350 400 bandwidth(kbp) time (s) bandwidth receiv us total from parent figur 14: bandwidth over time with a worst-case node failur and ransub recoveri enabl. our first experi, we chose 47 node for our deploy, with no two machin be deploi at the same site. sinc there is current ampl bandwidth avail throughout the planetlab overlai (a characterist not necessarili  repres of the internet at larg), we design thi experi to show that bullet can achiev higher bandwidth than an overlai tree when the sourc is constrain, for instanc in case of congest on it outbound access link, or of  overload by a flash-crowd. we did thi by choos a root in europ connect to planetlab with fairli low bandwidth. the node we select wa in itali (cs.unibo.it) and we had 10 other overlai node in europ. without global knowledg of the topolog in planetlab (and the internet), we ar, of cours, unabl to produc our greedi bottleneck bandwidth tree for  comparison. we ran bullet over a random overlai tree for 300 second while attempt to stream at a rate of 1.5 mbp. we wait 50 second befor start to stream data to  allow node to successfulli join the tree. we compar the perform of bullet to data stream over multipl  handcraft tree. figur 15 show our result for two such tree. the good tree ha all node in europ locat high in the tree, close to the root. we us pathload [20] to measur the 0 200 400 600 800 1000 1200 0 50 100 150 200 250 bandwidth(kbp) time (s) bullet good tree worst tree figur 15: achiev bandwidth over time for bullet and tfrc stream over differ tree on  planetlab with a root in europ. avail bandwidth between the root and all other node. node with high bandwidth measur were place close to the root. in thi case, we ar abl to achiev a bandwidth of approxim 300 kbp. the worst tree wa creat by set the root"s children to be the three node with the worst bandwidth characterist from the root as measur by pathload. all subsequ level in the tree were set in thi fashion. for comparison, we replac all node in europ from our topolog with node in the us, creat a topolog that onli includ us node with high bandwidth characterist. as expect, bullet wa abl to achiev the full 1.5 mbp rate in thi case. a well construct tree over thi  highbandwidth topolog yield slightli lower than 1.5 mbp, verifi that our approach doe not sacrific perform under high bandwidth condit and improv perform under constrain bandwidth scenario. 5. relat work snoeren et al. [36] us an overlai mesh to achiev  reliabl and time deliveri of mission-critic data. in thi system, everi node choos n parent from which to  receiv duplic packet stream. sinc it foremost emphasi is reliabl, the system doe not attempt to improv the bandwidth deliv to the overlai particip by send disjoint data at each level. further, dure recoveri from parent failur, it limit an overlai router"s choic of parent to node with a level number that is less than it own level number. the power of perpendicular download is perhap best illustr by kazaa [22], the popular peer-to-peer file  swap network. kazaa node ar organ into a scalabl,  hierarch structur. individu user search for desir  content in the structur and proce to simultan  download potenti disjoint piec from node that alreadi have it. sinc kazaa doe not address the multicast  commun model, a larg fraction of user download the same file would consum more bandwidth than node organ into the bullet overlai structur. kazaa doe not us  erasur code; therefor it mai take consider time to locat the last few byte. 294 bittorr [3] is anoth exampl of a file distribut  system current deploi on the internet. it util tracker that direct download to random subset of machin that alreadi have portion of the file. the tracker pose a  scalabl limit, as it continu updat the systemwid  distribut of the file. lower the tracker commun rate could hurt the overal system perform, as inform might be out of date. further, bittorr doe not emploi ani strategi to dissemin data to differ region of the network, potenti make it more difficult to recov data depend on client access pattern. similar to bullet,  bittorr incorpor the notion of choke at each node with the goal of identifi receiv that benefit the most by download from that particular sourc. fastreplica [11] address the problem of reliabl and effici file distribut in content distribut network (cdn). in the basic algorithm, node ar organ into group of fix size (n), with full group membership  inform at each node. to distribut the file, a node split it into n equal-size portion, send the portion to other group member, and instruct them to download the  miss piec in parallel from other group member. sinc onli a fix portion of the file is transmit along each of the overlai link, the impact of congest is smaller than in the case of tree distribut. howev, sinc it treat all path equal, fastreplica doe not take full advantag of  highbandwidth overlai link in the system. sinc it requir file store-and-forward logic at each level of the hierarchi  necessari for scale the system, it mai not be applic to high-bandwidth stream. there ar numer protocol that aim to add reliabl to ip multicast. in scalabl reliabl multicast (srm) [16], node multicast retransmiss request for miss packet. two techniqu attempt to improv the scalabl of thi approach: probabilist choic of retransmiss timeout, and organ of receiv into hierarch local recoveri group. howev, it is difficult to find appropri timer  valu and local scope set (via the ttl field) for a wide rang of topolog, number of receiv, etc. even when adapt techniqu ar us. on recent studi [2] show that srm mai have signific overhead due to  retransmiss request. bullet is close relat to effort that us epidem data propag techniqu to recov from loss in the  nonreli ip-multicast tree. in pbcast [2], a node ha global group membership, and period choos a random  subset of peer to send a digest of it receiv packet. a node that receiv the digest respond to the sender with the miss packet in a last-in, first-out fashion. lbpcast [14] address pbcast"s scalabl issu (associ with global knowledg) by construct, in a decentr fashion, a partial group membership view at each node. the averag size of the view is engin to allow a messag to reach all particip with high probabl. sinc lbpcast doe not requir an underli tree for data distribut and reli on the push-gossip model, it network overhead can be quit high. compar to the reliabl multicast effort, bullet behav favor in term of the network overhead becaus node do not blindli request retransmiss from their peer. instead, bullet us the summari view it obtain through ransub to guid it action toward node with disjoint  content. further, a bullet node split the retransmiss load between all of it peer. we note that pbcast node contain a mechan to rate-limit retransmit packet and to send differ packet in respons to the same digest. howev, thi doe not guarante that packet receiv in parallel from multipl peer will not be duplic. more importantli, the multicast recoveri method ar limit by the bandwidth through the tree, while bullet strive to provid more  bandwidth to all receiv by make data deliber disjoint throughout the tree. narada [19] build a delai-optim mesh  interconnect all particip node and activ measur the  avail bandwidth on overlai link. it then run a standard rout protocol on top of the overlai mesh to construct  forward tree us each node as a possibl sourc. narada node maintain global knowledg about all group  particip, limit system scalabl to sever ten of node. further, the bandwidth avail through a narada tree is still limit to the bandwidth avail from each parent. on the other hand, the fundament goal of bullet is to  increas bandwidth through download of disjoint data from multipl peer. overcast [21] is an exampl of a bandwidth-effici  overlai tree construct algorithm. in thi system, all node join at the root and migrat down to the point in the tree where thei ar still abl to maintain some minimum level of bandwidth. bullet is expect to be more resili to node departur than ani tree, includ overcast. instead of a node wait to get the data it miss from a new parent, a node can start get data from it perpendicular peer. thi transit is seamless, as the node that is disconnect from it parent will start demand more miss packet from it peer dure the standard round of refresh it filter. overcast converg time is limit by probe to immedi sibl and ancestor. bullet is abl to provid approxim a target bandwidth without have a fulli converg tree. in parallel to our own work, splitstream [9] also ha the goal of achiev high bandwidth data dissemin. it  oper by split the multicast stream into k stripe,  transmit each stripe along a separ multicast tree built  us scribe [34]. the kei design goal of the tree construct mechan is to have each node be an intermedi node in at most on tree (while observ both inbound and  outbound node bandwidth constraint), therebi reduc the impact of a singl node"s sudden departur on the rest of the system. the join procedur can potenti sacrific the interior-node-disjoint achiev by scribe. perhap more importantli, splitstream assum that there is enough  avail bandwidth to carri each stripe on everi link of the tree, includ the link between the data sourc and the root of individu stripe tree independ chosen by scribe. to some extent, bullet and splitstream ar complementari. for instanc, bullet could run on each of the stripe to  maxim the bandwidth deliv to each node along each stripe. coopnet [29] consid live content stream in a  peerto-peer environ, subject to high node churn.  consequ, the system favor resili over network effici. it us a central approach for construct either  random or determinist node-disjoint (similar to splitstream) tree, and it includ an mdc [17] adapt framework base on scalabl receiv feedback that attempt to  maxim the signal-to-nois ratio perceiv by receiv. in the case of on-demand stream, coopnet [30] address 295 the flash-crowd problem at the central server by redirect incom client to a fix number of node that have  previous retriev portion of the same content. compar to coopnet, bullet provid node with a uniformli random subset of the system-wide distribut of the file. 6. conclus typic, high bandwidth overlai data stream take place over a distribut tree. in thi paper, we argu that, in fact, an overlai mesh is abl to deliv fundament higher bandwidth. of cours, a number of difficult  challeng must be overcom to ensur that node in the mesh do not repeatedli receiv the same data from peer. thi paper present the design and implement of bullet, a scalabl and effici overlai construct algorithm that overcom thi challeng to deliv signific bandwidth improv rel to tradit tree structur. specif, thi  paper make the follow contribut: • we present the design and analysi of bullet, an  overlai construct algorithm that creat a mesh over ani distribut tree and allow overlai particip to achiev a higher bandwidth throughput than  tradit data stream. as a relat benefit, we  elimin the overhead requir to probe for avail  bandwidth in tradit distribut tree construct  techniqu. • we provid a techniqu for recov miss data from peer in a scalabl and effici manner.  ransub period dissemin summari of data set receiv by a chang, uniformli random subset of global particip. • we propos a mechan for make data disjoint and then distribut it in a uniform wai that make the probabl of find a peer contain miss data equal for all node. • a larg-scale evalu of 1000 overlai particip run in an emul 20,000 node network  topolog, as well as experiment on top of the  planetlab internet testb, show that bullet run over a random tree can achiev twice the throughput of stream over a tradit bandwidth tree. acknowledg we would like to thank david becker for hi invalu help with our modelnet experi and ken yocum for hi help with modelnet emul optim. in addit, we thank our shepherd barbara liskov and our anonym  review who provid excel feedback. 7. refer [1] suman banerje, bobbi bhattacharje, and christoph kommareddi. scalabl applic layer multicast. in proceed of acm sigcomm, august 2002. [2] kenneth birman, mark hayden, oznur ozkasap, zhen xiao, mihai budiu, and yaron minski. bimod multicast. acm transact on comput system, 17(2), mai 1999. [3] bittorr. http://bitconjur.org/bittorr. [4] burton bloom. space/time trade-off in hash code with allow error. commun of acm, 13(7):422-426, juli 1970. [5] andrei broder. on the resembl and contain of document. in proceed of compress and complex of sequenc (sequenc"97), 1997. [6] john w. byer, jeffrei considin, michael mitzenmach, and stanislav rost. inform content deliveri across adapt overlai network. in proceed of acm sigcomm, august 2002. [7] john w. byer, michael lubi, michael mitzenmach, and ashutosh rege. a digit fountain approach to reliabl distribut of bulk data. in sigcomm, page 56-67, 1998. [8] ken calvert, matt doar, and ellen w. zegura. model internet topolog. ieee commun magazin, june 1997. [9] miguel castro, peter druschel, ann-mari kermarrec, animesh nandi, antoni rowstron, and atul singh. splitstream: high-bandwidth content distribut in cooper environ. in proceed of the 19th acm symposium on oper system principl, octob 2003. [10] hyunseok chang, ramesh govindan, sugih jamin, scott shenker, and walter willing. toward captur repres as-level internet topolog. in proceed of acm sigmetr, june 2002. [11] ludmila cherkasova and jangwon lee. fastreplica: effici larg file distribut within content deliveri network. in 4th usenix symposium on internet technolog and system, march 2003. [12] reuven cohen and gideon kaempfer. a unicast-base approach for stream multicast. in infocom, page 440-448, 2001. [13] patrick eugster, sidath handurukand, rachid guerraoui, ann-mari kermarrec, and petr kouznetsov. lightweight probabilist broadcast. to appear in acm transact on comput system. [14] patrick eugster, sidath handurukand, rachid guerraoui, ann-mari kermarrec, and petr kouznetsov. lightweight probabilist broadcast. in proceed of the intern confer on depend system and network (dsn), 2001. [15] salli floyd, mark handlei, jitendra padhy, and jorg widmer. equat-base congest control for unicast applic. in sigcomm 2000, page 43-56, stockholm, sweden, august 2000. [16] salli floyd, van jacobson, ching-gung liu, steven mccann, and lixia zhang. a reliabl multicast framework for light-weight session and applic level frame. ieee/acm transact on network, 5(6):784-803, 1997. [17] vivek k goyal. multipl descript code: compress meet the network. ieee signal process mag., page 74-93, mai 2001. [18] yang hua chu, sanjai rao, and hui zhang. a case for end system multicast. in proceed of the acm sigmetr 2000 intern confer on measur and model of comput system, june 2000. [19] yang hua chu, sanjai g. rao, srinivasan seshan, and hui zhang. enabl conferenc applic on the internet us an overlai multicast architectur. in proceed of acm sigcomm, august 2001. [20] manish jain and constantino dovroli. end-to-end avail bandwidth: measur methodolog, dynam, and relat with tcp throughput. in proceed of sigcomm 2002, new york, august 19-23 2002. [21] john jannotti, david k. gifford, kirk l. johnson, m. fran kaashoek, and jr. jame w. o"tool. overcast: reliabl multicast with an overlai network. in proceed of oper system design and implement (osdi), octob 2000. [22] kazaa media desktop. http://www.kazaa.com. [23] min sik kim, simon s. lam, and dong-young lee. 296 optim distribut tree for internet stream media. technic report tr-02-48, depart of comput scienc, univers of texa at austin, septemb 2002. [24] dejan kosti´c, adolfo rodriguez, jeanni albrecht, abhijeet bhirud, and amin vahdat. us random subset to build scalabl network servic. in proceed of the usenix symposium on internet technolog and system, march 2003. [25] michael lubi. lt code. in in the 43rd annual ieee symposium on foundat of comput scienc, 2002. [26] michael g. lubi, michael mitzenmach, m. amin shokrollahi, daniel a. spielman, and volker stemann. practic loss-resili code. in proceed of the 29th annual acm symposium on the theori of comput (stoc "97), page 150-159, new york, mai 1997. associ for comput machineri. [27] jitedra padhy, victor firoiu, don towslei, and jim kruso. model tcp throughput: a simpl model and it empir valid. in acm sigcomm "98 confer on applic, technolog, architectur, and protocol for comput commun, page 303-314, vancouv, ca, 1998. [28] venkata n. padmanabhan, lili qiu, and helen j. wang. server-base infer of internet link lossi. in proceed of the ieee infocom, san francisco, ca, usa, 2003. [29] venkata n. padmanabhan, helen j. wang, and philip a. chou. resili peer-to-peer stream. in proceed of the 11th icnp, atlanta, georgia, usa, 2003. [30] venkata n. padmanabhan, helen j. wang, philip a. chou, and kunwade sripanidkulchai. distribut stream media content us cooper network. in acm/ieee nossdav, 2002. [31] larri peterson, tom anderson, david culler, and timothi rosco. a blueprint for introduc disrupt technolog into the internet. in proceed of acm hotnet-i, octob 2002. [32] r. c. prim. shortest connect network and some gener. in bell system technic journal, page 1389-1401, novemb 1957. [33] adolfo rodriguez, sooraj bhat, charl killian, dejan kosti´c, and amin vahdat. macedon: methodolog for automat creat, evalu, and design overlai network. technic report cs-2003-09, duke univers, juli 2003. [34] antoni rowstron, ann-mari kermarrec, miguel castro, and peter druschel. scribe: the design of a larg-scale event notif infrastructur. in third intern workshop on network group commun, novemb 2001. [35] stefan savag. sting: a tcp-base network measur tool. in proceed of the 2nd usenix symposium on internet technolog and system (usit-99), page 71-80, berkelei, ca, octob 11-14 1999. usenix associ. [36] alex c. snoeren, kenneth conlei, and david k. gifford. mesh-base content rout us xml. in proceed of the 18th acm symposium on oper system principl (sosp "01), octob 2001. [37] amin vahdat, ken yocum, kevin walsh, priya mahadevan, dejan kosti´c, jeff chase, and david becker. scalabl and accuraci in a larg-scale network emul. in proceed of the 5th symposium on oper system design and implement (osdi), decemb 2002. 297 