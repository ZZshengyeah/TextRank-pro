distribut task alloc in social network mathij de weerdt delft technic univers delft, the netherland m.m.deweerdt@tudelft.nl yingqian zhang delft technic univers delft, the netherland yingqian.zhang@tudelft.nl toma klo center for mathemat and comput scienc (cwi) amsterdam, the netherland toma.klo@cwi.nl abstract thi paper propos a new variant of the task alloc problem, where the agent ar connect in a social network and task arriv at the agent distribut over the network. we show that the complex of thi problem remain  nphard. moreov, it is not approxim within some factor. we develop an algorithm base on the contract-net  protocol. our algorithm is complet distribut, and it assum that agent have onli local knowledg about task and  resourc. we conduct a set of experi to evalu the perform and scalabl of the propos algorithm in term of solut qualiti and comput time. three  differ type of network, name small-world, random and scale-free network, ar us to repres variou social  relationship among agent in realist applic. the result demonstr that our algorithm work well and that it scale well to larg-scale applic. categori and subject descriptor i.2.11 [distribut artifici intellig]: multiag system gener term algorithm, experiment 1. introduct recent year have seen a lot of work on task and  resourc alloc method, which can potenti be appli to mani real-world applic. howev, some interest applic where relat between agent plai a role  requir a slightli more gener model. such situat appear veri frequent in real-world scenario, and recent  technolog develop ar bring more of them within the rang of task alloc method. especi in busi  applic, preferenti partner select and interact is veri common, and thi aspect becom more import for task alloc research, to the extent that technolog  develop need to be abl to support it. for exampl, the develop of semant web and grid technolog lead to increas and renew attent for the potenti of the web to support busi process [7, 15]. as an exampl, virtual organ (vo) ar  be re-invent in the context of the grid, where thei ar compos of a number of autonom entiti (repres differ individu, depart and organ), each of which ha a rang of problem-solv capabl and  resourc at it dispos [15, p. 237]. the question is how vo ar to be dynam compos and re-compos from  individu agent, when differ task and subtask need to be perform. thi would be done by alloc them to  differ agent who mai each be capabl of perform differ subset of those task. similarli, suppli chain format (scf) is concern with the, possibl ad-hoc, alloc of servic to provid in the suppli chain, in such a wai that overal profit is optim [6, 21]. tradition, such alloc decis have been  analyz us transact cost econom (tce) [4], which take the transact between consecut stage of  develop as it basic unit of analysi, and consid the firm and the market as altern structur form for  organ transact. (transact cost) econom ha  tradition built on analysi of compar static: the central problem of econom organ is consid to be the adapt of organiz form to the characterist of transact. more recent, tce"s found father, ronald coas, acknowledg that thi is too simplist an approach [5, p. 245]: the analysi cannot be confin to what  happen within a singl firm. (. . . ) what we ar deal with is a complex interrel structur. in thi paper, we studi the problem of task alloc from the perspect of such a complex interrel  structur. in particular, ‘the market" cannot be consid as an organiz form without consid specif partner to interact with on the market [11]. specif, therefor, we consid agent to be connect to each other in a social network. furthermor, thi network is not fulli connect: as inform by the busi literatur, firm typic have establish work relat with limit number of  prefer partner [10]; these ar the on thei consid when new task arriv and thei have to form suppli chain to  alloc those task [19]. other than model the interrel 500 978-81-904262-7-5 (rp) c 2007 ifaama structur between busi partner, the social network  introduc in thi paper can also be us to repres other type of connect or constraint among autonom  entiti that aris from other applic domain. the next section give a formal descript of the task  alloc problem on social network. in section 3, we prove that the complex of thi problem remain np-hard. we then proce to develop a distribut algorithm in section 4, and perform a seri of experi with thi algorithm, as describ in section 5. section 6 discuss relat work, and section 7 conclud. 2. problem descript we formul the social task alloc problem in thi section. there is a set a of agent: a = {a1, . . . , am}. agent need resourc to complet task. let r = {r1, . . . , rk} denot the collect of the resourc type avail to the agent a. each agent a ∈ a control a fix amount of  resourc for each resourc type in r, which is defin by a resourc function: rsc : a × r → n. moreov, we assum agent ar connect by a social network. definit 1 (social network). an agent social  network sn = (a, ae) is an undirect graph, where vertic a ar agent, and each edg (ai, aj) ∈ ae indic the  exist of a social connect between agent ai and aj. suppos a set of task t = {t1, t2, . . . , tn} arriv at such an agent social network. each task t ∈ t is then defin by a tupl u(t), rsc(t), loc(t) , where u(t) is the util gain if task t is accomplish, and the resourc function rsc : t ×r → n specifi the amount of resourc requir for the accomplish of task t. furthermor, a locat function loc : t → a defin the locat (i.e., agent) at which the task arriv in the social network. an agent a that is the locat of a task t, i.e. loc(t) = a, is call the manag of thi task. each task t ∈ t need some specif resourc from the agent in order to complet the task. the exact assign of task to agent is defin by a task alloc. definit 2 (task alloc). given a set of task t = {t1, . . . , tn} and a set of agent a = {a1, . . . , am} in a social network sn, a task alloc is a map φ : t × a × r → n. a valid task alloc in sn must satisfi the follow constrain: • a task alloc must be correct. each agent a ∈ a cannot us more than it avail resourc, i.e. for each r ∈ r, p t∈t φ(t, a, r) ≤ rsc(a, r). • a task alloc must be complet. for each task t ∈ t , either all alloc agent" resourc ar suffici, i.e. for each r ∈ r, p a∈a φ(t, a, r) ≥ rsc(t, r), or t is not alloc, i.e. φ(t, ·, ·) = 0. • a task alloc must obei the social relationship. each task t ∈ t can onli be alloc to agent that ar (direct) neighbor of agent loc(t) in the social network sn. each such agent that can contribut to a task is call a contractor. we write tφ to repres the task that ar fulli alloc in φ. the util of φ is then the summat of the util of each task in tφ, i.e., uφ = p t∈tφ u(t). us thi notat, we defin the effici task alloc below. definit 3 (effici task alloc). we sai a task alloc φ is effici if it is valid and uφ is  maxim, i.e., uφ = max( p t∈tφ u(t)). we ar now readi to defin the task alloc problem in social network that we studi in thi paper. definit 4 (social task alloc problem). given a set of agent a connect by a social network sn = (a, ae), and a finit set of task t , the social task alloc problem (or stap for short) is the problem of find the effici task alloc φ, such that φ is valid and the social welfar uφ is maxim. 3. complex result the tradit task alloc problem, tap (without the condit of the social network sn), is np-complet [18], and the complex come from the fact that we need to evalu the exponenti number of subset of the task set. although we mai consid the tap as a special case of the stap by assum agent ar fulli connect, we cannot directli us the complex result from the tap, sinc we studi the stap in an arbitrari social network, which, as we argu in the introduct, should be partial connect. we now show that the tap with an arbitrari social  network is also np-complet, even when the util of each task is 1, and the quantiti of all requir and avail resourc is 1. theorem 1. given the social task alloc problem with an arbitrari social network, as defin in definit 4, the problem of decid whether a task alloc φ with util more than k exist is np-complet. proof. we first show that the problem is in np. given an instanc of the problem and an integ k, we can verifi in polynomi time whether an alloc φ is a valid alloc and whether the util of φ is greater than k. we now prove that the stap is np-hard by show that maximum independ set ≤p stap. given an undirect graph g = (v, e) and an integ k, we  construct a network g = (v , e ) which ha an effici task alloc with k task of util 1 alloc if and onli if g ha an independ set (is) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 figur 1: the mi problem can be reduc to the stap. the left figur is an undirect graph g, which ha the optim solut {v1, v4} or {v2, v3}; the right  figur is the construct instanc of the stap, where the optim alloc is {t1, t4} or {t2, t3}. an instanc of the follow construct is shown in  figur 1. for each node v ∈ v and each edg e ∈ e in the graph g, we creat a vertex agent av and an edg agent ae in g . the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 501 when v wa incid to e in g we correspondingli add an edg e in g between av and ae. we assign each agent in g on resourc, which is relat to the node or the edg in the graph g, i.e., for each v ∈ v , rsc(av) = {v} (here we write rsc(a) and rsc(t) to repres the set of resourc avail to/requir by a and t), and for each e ∈ e, rsc(ae) = {e}. each vertex agent avi in g ha a task ti that requir a set of neighbor resourc ti = {vi} ∪ {e|e = (u, vi) ∈ e}. there is no task on the edg agent in g . we defin util 1 for each task, and the quantiti of all requir and avail resourc to be 1. taken an instanc of the is problem, suppos there is a solut of size k, i.e., a subset n ⊆ v such that no two vertic in n ar join by an edg in e and |n| = k. n specifi a set of vertex agent an in the correspond graph g . given two agent a1, a2 ∈ an we now know that there is no edg agent ae connect to both a1 and a2. thu, for each agent a ∈ an , a assign it task to the edg agent which ar connect to a. all other vertex agent a /∈ an ar not abl to assign their task, sinc the requir resourc of the edg agent ar alreadi us by the agent a ∈ an . the set of task of the agent an (|an | = k) is thu the maximum set of task that can be alloc. the util of thi alloc is k. similarli, if there is a solut for the stap with the util valu k, and the alloc task set is n, then for the is problem, there exist a maximum independ set n of size k in g. an exampl can be found in figur 1. we just prove that the stap is np-hard for an  arbitrari graph. in our proof, the complex come from the introduct of a social network. on mai expect that the complex of thi problem can be reduc for some network where the number of neighbor of the agent is bound by a fix constant. we now give a complex result on thi class of network as follow. theorem 2. let the number of neighbor of each agent in the social network sn be bound by Δ for Δ ≥ 3.  comput the effici task alloc given such a network is np-complet. in addit, it is not approxim within Δε for some ε > 0. proof. it ha been shown in [2] that the maximum  independ set problem in the case of the degre bound by Δ for Δ ≥ 3 is np-complet and is not approxim within Δε for some ε > 0. us the similar reduct from the proof of theorem 1, thi result also hold for the stap. sinc our problem is as hard as mi as shown in  theorem 1, it is not possibl to give a worst case bound better than Δε for ani polynomi time algorithm, unless p = np. 4. algorithm to deal with the problem of alloc task in a social network, we present a distribut algorithm. we introduc thi algorithm by describ the protocol for the agent.  after that we give the optim, central algorithm and an upper bound algorithm, which we us in section 5 to  benchmark the qualiti of our distribut algorithm. 4.1 protocol for distribut task alloc we can summar the descript of the task alloc problem in social network from section 2 as follow. we algorithm 1 greedi distribut alloc protocol (gdap). each manag a calcul the effici e(t) for each of their task t ∈ ta, and then while ta = ∅: 1. each manag a select the most effici task t ∈ ta such that for each task t ∈ ta: e(t ) ≤ e(t). 2. each manag a request help for t from all it  neighbor (of a) by inform these neighbor of the  effici e(t) and the requir resourc for t. 3. contractor receiv and store all request, and then offer all relev resourc to the manag for the task with the highest effici. 4. the manag that have receiv suffici offer  alloc their task, and inform each contractor which part of the offer is accept. when a task is  alloc, or when a manag ha receiv offer from all neighbor, but still cannot satisfi it task, the task is remov from the task list ta. 5. contractor updat their us resourc. have a (social) network of agent. each agent ha a set of resourc of differ type at it dispos. we also have a set of task. each task requir some resourc, ha a fix benefit, and is locat at a certain agent. thi agent is call a manag. we onli allow neighbor agent to help with a task. these agent ar call contractor. agent can fulfil the role of manag as well as contractor. the problem is to find out which task to execut, and which resourc of which contractor to us for these task. the idea of the protocol is as follow. all manag agent a ∈ a try to find neighbor contractor to help them with their task(s) ta = {ti ∈ t | loc(ti) = a}. thei start with offer the task that is most effici in term of the ratio between benefit and requir resourc. out of all task  offer, contractor select the task with the highest effici, and send a bid to the relat manag. a bid consist of all the resourc the agent is abl to suppli for thi task. if  suffici resourc have been offer, the manag select the requir resourc and inform all contractor of it choic. the effici of a task is defin as follow: definit 5. the effici e of a task t ∈ t is defin by the util of thi task divid by the sum of all requir resourc: e(t) = u(t)p r∈r rsc(t,r) . a more detail descript of thi protocol can be found in algorithm 1. here it is also defin how to determin when a task should not be offer anymor, becaus it is imposs to fulfil local. obvious, a task is also not offer anymor when it ha been alloc. thi protocol is such that, when no two task have exactli the same  effici, in everi iter at least on task is remov from a task list.1 from thi the comput and commun properti of the algorithm follow. proposit 1. for a stap with n task and m agent, the run time of the distribut algorithm is o(nm), and the number of commun messag is o(n2 m). 1 even when some task have the same effici, it is straightforward to make thi result work. for exampl, the implement can ensur that the contractor choos the task with the lowest task-id. 502 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) algorithm 2 optim social task alloc (opt). repeat the follow for each combin of task: 1. if the total reward for thi combin is higher than ani previou combin, test if thi combin is feasibl as follow: 2. creat a network flow problem for each resourc type r ∈ r (separ) as follow: (a) creat a sourc s and a sink s . (b) for each agent a ∈ a creat an agent node and an edg from s to thi node with capac equal to the amount of resourc of type r agent a ha. (c) for each task t ∈ t creat a task node and an edg from thi node to s with capac equal to the amount of resourc of type r task t requir. (d) for each agent a connect the agent node to all task node of neighbor task, i.e., t ∈ {t ∈ t | (a, loc(t)) ∈ ae}. give thi connect unlimit capac. 3. solv the maximum flow problem for the creat flow network. if the maximum flow in each network is equal to the total requir resourc of that type, the current combin of task is feasibl. in that case, thi is the current best combin of task. proof. in the worst case, in each iter exactli on task is remov from a task list, so there ar n iter. in each iter in the worst case (i.e., a fulli connect network), for each of the o(n) manag, o(m) messag ar sent. next the task with the highest effici can be select by each contractor in o(n). assign an alloc can be done in o(m). thi lead to a total of o(n + m)  oper for each iter, and thu o(n2 + nm) oper in total. the number of messag sent is o(n(nm + nm + nm)) = o(n2 m). we establish the qualiti of thi protocol experiment (in section 5). prefer, we compar the result to the optim solut. 4.2 optim social task alloc the optim task alloc algorithm should deal with the restrict pose by the social network. for thi  npcomplet problem we us an exponenti brute-forc  algorithm to consid relev combin of task to execut. for each combin we us a maximum-flow algorithm to check whether the resourc ar suffici for the select subset of task. the flow network describ which resourc can be us for which task, depend on the social  network. if the maximum flow is equal to the sum of all  resourc requir by the subset of task, we know that a  feasibl solut exist (see algorithm 2). clearli, we cannot expect thi optim algorithm to be abl to find solut for larger problem size. to establish the qualiti of our  protocol for larg instanc, we us the follow method to determin an upper bound. 4.3 upper bound for social task alloc given a social task alloc problem, if the number of resourc type for everi task t ∈ t is bound by 1, the algorithm 3 an upper bound for social task alloc (ub). creat a network flow problem with cost as follow: 1. creat a sourc s and a sink s . 2. for each agent a ∈ a and each resourc type ri ∈ r, creat an agent-resourc node ai, and an edg from s to thi node with capac equal to the amount of resourc of type r agent a ha avail and with cost 0. 3. for each task t ∈ t and each resourc type ri ∈ r,  creat a task-resourc node ti, and an edg from thi node to s with capac equal to the amount of resourc of type r task t requir and cost −e(t). 4. for each resourc type ri ∈ r and for each agent a connect the agent-resourc node ai to all task-resourc node ti for neighbor task t ∈ {t ∈ t | (a, loc(t)) ∈ ae or a = loc(t)}. give thi connect unlimit capac and zero cost. 5. creat an edg directli from s to s with unlimit capac and zero cost. solv the minimum cost flow network problem for thi  network. the cost of the result network is an upper bound for the social task alloc problem. problem is polynomi solvabl by transform it to a flow network problem. our method for effici calcul an upper bound for stap make us of thi special case by convert ani given stap instanc p into a new problem p where each task onli ha on resourc type. more specif, for everi task t ∈ t with util u(t), we do the follow. let m be the number of resourc type {r1, . . . , rm} requir by t. we then split t into a set of m task t = {t1, . . . , tm} where each task ti onli ha on uniqu resourc type (of {r1, . . . , rm}) and each task ha a fair share of the util, i.e., the effici of t from  definit 5 time the amount of thi resourc type rsc(ti, ri). after polynomi perform thi convers for everi task in t , the origin problem p becom the special case p . note that the set of valid alloc in p is onli a subset of the set of valid alloc in p , becaus it is now possibl to partial alloc a task. from thi it is easi to see that the solut of p give an upper bound of the solut of the origin problem p. to comput the optim solut for p , we transform it to a minimum cost flow problem. we model the cost in the flow network by the negat of the new task"s util. a polynomi-time implement of a scale minimum cost flow algorithm [9] is us for the comput. the  result minimum cost flow repres a maximum alloc of the task for p . the detail model is describ in  algorithm 3. in the next section, we us thi upper bound to estim the qualiti of the gdap for larg-scale instanc. 5. experi we implement the greedi distribut alloc  protocol (gdap), the optim alloc algorithm (opt), and the upper bound algorithm (ub) in java, and test them on a linux pc. the purpos of these experi is to studi the perform of the distribut algorithm in differ problem set us differ social network. the  perth sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 rewardrelativetooptim resourc ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - gdap random - gdap scale-free - gdap figur 2: the solut qualiti of the gdap and the upper bound depend on the resourc ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 numberofag degre small-world random scale-free figur 3: the histogram of the degre. formanc measur ar the solut qualiti and  comput time, where the solut qualiti (sq) is comput as follow. when the number of task is small, we compar the output of the distribut algorithm with the optim  solut, i.e., sq = gdap op t , but if it is not feasibl to comput the optim solut, we us the valu return by the upper bound algorithm for evalu, i.e., sq = gdap ub . to see whether the latter is a good measur, we also  compar the qualiti of the upper bound to the optim solut for smaller problem. in the follow, we describ the  setup of all experi, and present the result. 5.1 experiment set we consid sever experiment environ. in all  environ the agent ar connect by a social network. in the experi, three differ network ar us to  simul the social relationship among agent in potenti  realworld problem. small-world network ar network where most neighbor of an agent ar also connect to each other. for the  experi we us a method for gener random small-world network propos by watt et al. [22], with a fix rewir probabl p = 0.05. scale-free network have the properti that a coupl of node have mani connect, and mani node have onli a small number of connect. to gener these we us the implement in the jung librari of the gener propos by barab´asi and albert [3]. we also gener random network as follow. first we connect each agent to anoth agent such that all agent ar connect. next, we randomli add connect until the desir averag degre ha been reach. we now describ the differ set us in our  experi with both small and larg-scale problem. set 1. the number of agent is 40, and the number of task is 20. the number of differ resourc type is bound by 5, and the averag number of resourc  requir by a task is 30. consequ, the total number of resourc requir by the task is fix. howev, the resourc avail to the agent ar vari. we defin the resourc ratio to refer to the ratio between the total number of avail resourc and the total number of requir resourc. resourc ar alloc uniformli to the agent. the averag degre of the network mai also chang. in thi set the task benefit ar distribut normal around the number of resourc requir. set 2. thi set is similar to set 1, but here we let the benefit of the task vari dramat-40% of the task have around 10 time higher benefit than the other 60% of the task. set 3. thi set is for larg-scale problem. the  ratio between the number of agent and the number of task is set to 5/3, and the number of agent vari from 100 to 2000. we also fix the resourc ratio to 1.2 and the averag degre to 6. the number of differ resourc type is 20, and the averag resourc  requir of a task is 100. the task benefit ar again normal distribut. 5.2 experiment result the experi ar done with the three differ set in the three differ network mention befor, where each record data is the averag over 20 random instanc. 5.2.1 experi 1 experiment set 1 is us for thi set of experi. we would like to see how the gdap behav in the  differ network when the number of resourc avail to the agent is chang. we also studi the behavior of our upper bound algorithm. for thi experi we fix the averag number of neighbor (degre) in each network type to six. in figur 2 we see how the qualiti of both the upper bound and the gdap algorithm depend on the resourc ratio. remark, for lower resourc ratio our gdap is much closer to the optim alloc than the upper bound. when the resourc ratio grow abov 1.5, the graph of the upper bound and the gdap converg, mean that both ar realli close to the optim solut. thi can be  explain by the fact that when plenti of resourc ar  avail, all task can be alloc without ani conflict.  howev, when resourc ar veri scarc, the upper bound is much too optimist, becaus it is base on the alloc of sub-task per resourc type, and doe not reason about how mani of the task can actual be alloc complet. we also notic from the graph that the solut qualiti of the gdap on all three network is quit high (over 0.8) when the avail resourc is veri limit (0.3). it drop below 0.8 with the increas ratio and goe up again onc there ar plenti of resourc avail (resourc ratio 0.9). clearli, if 504 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 rewardrelativetooptim degre small-world - upper bound random - upper bound scale-free - upper bound small-world - gdap random - gdap scale-free - gdap figur 4: the qualiti of the gdap and the upper bound depend on the network degre. resourc ar realli scarc, onli a few task can be  successfulli alloc even by the optim algorithm. therefor, the gdap is abl to give quit a good alloc. although the differ ar minor, it can also be seen that the result for the small-world network ar consist slightli better than those of random network, which in turn outperform scale-free network. thi can be understood by look at the distribut of the agent" degre, as shown in figur 3. in thi experi, in the small-world network almost everi manag ha a degre of six. in random  network, the degre vari between on and about ten.  howev, in the scale-free network, most node have onli three or four connect, and onli a veri few have up to twenti connect. as we will see in the next experi, have more connect mean get better result. for the next experi we fix the resourc ratio to 1.0 and studi the qualiti of both the upper bound and the gdap algorithm relat to the degre of the social  network. the result can be found in figur 4. in thi figur we can see that a high averag degre also lead to  converg of the upper bound and the gdap. obvious, when manag have mani connect, it becom easier to  alloc task. an except is, similar to what we have seen in figur 2, that the solut of the gdap is also veri good if the connect ar extrem limit (degre 2), due to the fact that the number of possibl alloc task is veri small. again we see that the upper bound is not that good for problem where resourc ar hard to reach, i.e. in social network with a low averag degre.2 sinc the solut qualiti clearli depend on the resourc ratio as well as on the degre of the social network, we studi the effect of chang both, to see whether thei influenc each other. figur 5 show how the solut qualiti  depend on both the resourc ratio and the network degre. thi graph confirm the result that the gdap perform better for problem with higher degre and higher resourc ratio. howev, it is now also more clear that it perform better for veri low degre and resourc avail. for thi experi with 40 agent and 20 task, the worst  perform is met for instanc with degre six and resourc ratio 0.6 to instanc with degre twelv and resourc ratio 0.3. but even for those instanc, the perform li abov 0.7. 2 the consist standard deviat of about 15% over the 20 problem instanc is not displai as error-bar in these first graph, becaus it would obfusc the interest  correl that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 rel reward small-world averag degre resourc ratio rel reward figur 5: the qualiti of the gdap depend on both the resourc ratio and the network degre. 5.2.2 experi 2 to studi the robust of the gdap against differ problem set, we gener instanc where the task  benefit distribut is differ: 40% of the task get a 10 time higher benefit (as describ in set 2). the effect of thi differ distribut can be seen in figur 6. these two graph show that the result for the skew task benefit distribut ar slightli better on averag, both when  vari the resourc ratio, and when vari the averag degre of the network. we argu that thi can be explain by the greedi natur of gdap, which caus the task with high effici to be alloc first, and make the algorithm  perform better in thi heterogen set. 5.2.3 experi 3 the purpos of thi final experi is to test whether the algorithm can be scale to larg problem, like applic run on the internet. we therefor gener instanc where the number of agent vari from 100 to 2000, and  simultan increas the number of task from 166 to 3333 (set 3). figur 7 show the run time for these instanc on a linux machin with an amd opteron 2.4 ghz  processor. these graph confirm the theoret analysi from the previou section, sai that both the upper bound and the gdap ar polynomi. in fact, the graph show that the gdap almost behav linearli. here we see that the local of the gdap realli help in reduc the  comput time. also note that the gdap requir even less comput time than the upper bound. the qualiti of the gdap for these larg instanc cannot be compar to the optim solut. therefor, in figur 8 the upper bound is us instead. thi result show that the gdap behav stabli and consist well with the increas problem size. it also show onc more that the gdap perform better in a small-world network. 6. relat work task alloc in multiag system ha been  investig by mani research in recent year with differ  assumpt and emphas. howev, most of the research to date on task alloc doe not consid social  connect among agent, and studi the problem in a central the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 rewardrelativetooptim resourc ratio skew small-world skew random skew scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 rewardrelativetooptim degre skew small-world skew random skew scale-free uniform small-world uniform random uniform scale-free figur 6: the qualiti of the gdap algorithm for a uniform and a skew task benefit distribut  relat to the resourc ratio (the first graph), and the network degre (the second graph). set. for exampl, krau et al. [12] develop an auction protocol that enabl agent to form coalit with time constraint. it assum each agent know the capabl of all other. the propos protocol is central, where on manag is respons for alloc the task to all coalit. manisterski at al. [14] discuss the possibl of achiev effici alloc in both cooper and  noncoop set. thei propos a central algorithm to find the optim solut. in contrast to thi work, we introduc also an effici complet distribut protocol that take the social network into account. task alloc ha also been studi in distribut  set by for exampl shehori and krau [18] and by  lerman and shehori [13]. thei propos distribut algorithm with low commun complex for form coalit in larg-scale multiag system. howev, thei do not assum the exist of ani agent network. the work of sander et al. [16] introduc comput geometri-base algorithm for distribut task alloc in geograph  domain. agent ar then allow to move and activ search for task, and the capabl of agent to perform task is  homogen. in order to appli their approach, agent need to have some knowledg about the geograph posit of task and some other agent. other work [17] propos a locat mechan for open multiag system to  alloc task to unknown agent. in thi approach each agent cach a list of agent thei know. the analysi of the  commun complex of thi method is base on lattic-like graph, while we investig how to effici solv task  alloc in a social network, whose topolog can be arbitrari. network have been emploi in the context of task  alloc in some other work as well, for exampl to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 time(ms) agent upper bound - small-world upper bound - random upper bound - scale-free gdap - small-world gdap - random gdap - scale-free figur 7: the run time of the gdap algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 rewardrelativetoupperbound agent small-world random scale-free figur 8: the qualiti of the gdap algorithm  compar to the upper bound. interact between agent and mediat [1]. mediat in thi context ar agent who receiv the task and have  connect to other agent. thei break up the task into subtask, and negoti with other agent to obtain commit to execut these subtask. their focu is on model the  decis process of just a singl mediat. anoth approach is to partit the network into cliqu of node, repres coalit which the agent involv mai us as a  coordin mechan [20]. the focu of that work is distribut coalit format among agent, but in our approach, we do not need agent to form group befor alloc task. easwaran and pitt [6] studi ‘complex task" that requir ‘servic" for their accomplish. the problem concern the alloc of subtask to servic provid in a suppli chain. anoth studi of task alloc in suppli chain is [21], where it is argu that the defin characterist of suppli chain format is hierarch subtask  decomposit (hsd). hsd is implement us task depend network (tdn), with agent and good as node, and i/o relat between them as edg. here, the network is given, and the problem is to select a subgraph, for which the  author propos a market-base algorithm, in particular, a  seri of auction. compar to these work, our approach is more gener in the sens that we ar abl to model differ type of connect or constraint among agent for  differ problem domain in addit to suppli chain format. final, social network have been us in the context of team format. previou work ha shown how to learn which relat ar more benefici in the long run [8], and adapt the social network accordingli. we believ these  result can be transfer to the domain of task alloc as well, leav thi as a topic for further studi. 506 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 7. conclus in thi paper we studi the task alloc problem in a social network (stap), which can be seen as a new, more gener, variant of the tap. we believ it ha a great amount of potenti for realist problem. we provid complex result on comput the effici solut for the stap, as well as a bound on possibl approxim algorithm. next, we present a distribut protocol, relat to the  contractnet protocol. we also introduc an exponenti algorithm to comput the optim solut, as well as a fast  upperbound algorithm. final, we us the optim solut and the upper-bound (for larger instanc) to conduct an  extens set of experi to assess the solut qualiti and the comput effici of the propos distribut  algorithm in differ type of network, name, small-world network, random network, and scale-free network. the result present in thi paper show that the  distribut algorithm perform well in small-world, scale-free, and random network, and for mani differ set. also other experi were done (e.g. on grid network) and these result held up over a wider rang of scenario.  furthermor, we show that it scale well to larg network, both in term of qualiti and of requir comput time. the result also suggest that small-world network ar slightli better suit for local task alloc, becaus there ar no node with veri few neighbor. there ar mani interest extens to our current work. in thi paper, we focu on the comput aspect in the design of the distribut algorithm. in our futur work, we would also like to address some of the relat issu in game theori, such as strateg agent, and show desir  properti of a distribut protocol in such a context. in the current algorithm we assum that agent can onli contact their neighbor to request resourc, which mai  explain why our algorithm perform not as good in the  scalefre network as in the small-world network. our futur work mai allow agent to realloc (sub)task. we ar  interest in see how such interact will affect the  perform of task alloc in differ social network. a third interest topic for further work is the addit of reput inform among the agent. thi mai help to model chang busi relat and incentiv agent to follow the protocol. final, it would be interest to studi real-life instanc of the social task alloc problem, and see how thei  relat to the randomli gener network of differ type studi in thi paper. acknowledg. thi work is support by the  technolog foundat stw, appli scienc divis of nwo, and the ministri of econom affair. 8. refer [1] s. abdallah and v. lesser. model task alloc us a decis theoret model. in proc. aama, page 719-726. acm, 2005. [2] n. alon, u. feig, a. wigderson, and d. zuckerman. derandom graph product. comput complex, 5(1):60-75, 1995. [3] a.-l. barab´asi and r. albert. emerg of scale in random network. scienc, 286(5439):509-512, 1999. [4] r. h. coas. the natur of the firm. economica ns, 4(16):386-405, 1937. [5] r. h. coas. my evolut as an economist. in w. breit and r. w. spencer, editor, live of the laureat, page 227-249. mit press, 1995. [6] a. m. easwaran and j. pitt. suppli chain format in open, market-base multi-agent system. intern j. of comput intellig and applic, 2(3):349-363, 2002. [7] i. foster, n. r. jen, and c. kesselman. brain meet brawn: why grid and agent need each other. in proc. aama, page 8-15, washington, dc, usa, 2004. ieee comput societi. [8] m. e. gaston and m. desjardin. agent-organ network for dynam team format. in proc. aama, page 230-237, new york, ny, usa, 2005. acm press. [9] a. goldberg. an effici implement of a scale minimum-cost flow algorithm. j. of algorithm, 22:1-29, 1997. [10] r. gulati. doe familiar breed trust? the implic of repeat ti for contractu choic in allianc. academi of manag journal, 38(1):85-112, 1995. [11] t. klo and b. nooteboom. agent-base comput transact cost econom. econom dynam and control, 25(3-4):503-526, 01. [12] s. krau, o. shehori, and g. taas. coalit format with uncertain heterogen inform. in proc. aama, page 1-8. acm, 2003. [13] k. lerman and o. shehori. coalit format for larg-scale electron market. in proc. icma, page 167-174. ieee comput societi, 2000. [14] e. manisterski, e. david, s. krau, and n. jen. form effici agent group for complet complex task. in proc. aama, page 257-264. acm, 2006. [15] j. patel et al. agent-base virtual organ for the grid. multi-agent and grid system, 1(4):237-249, 2005. [16] p. v. sander, d. peleshchuk, and b. j. grosz. a scalabl, distribut algorithm for effici task alloc. in proc. aama, page 1191-1198, new york, ny, usa, 2002. acm press. [17] o. shehori. a scalabl agent locat mechan. in proc. atal, volum 1757 of lnc, page 162-172. springer, 2000. [18] o. shehori and s. krau. method for task alloc via agent coalit format. artifici intellig, 101(1-2):165-200, 1998. [19] r. m. sreenath and m. p. singh. agent-base servic select. web semant, 1(3):261-279, 2004. [20] p. t. toˇsi´c and g. a. agha. maxim cliqu base distribut coalit format for task alloc in larg-scale multi-agent system. in proc. mma, volum 3446 of lnai, page 104-120. springer, 2005. [21] w. e. walsh and m. p. wellman. model suppli chain format in multiag system. in proc. amec ii, volum 1788 of lnai, page 94-101. springer, 2000. [22] d. j. watt and s. h. strogatz. collect dynam of ‘small world" network. natur, 393:440-442, 1998. the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 507 