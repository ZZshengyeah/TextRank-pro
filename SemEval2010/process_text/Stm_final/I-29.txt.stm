distribut manag of flexibl time schedul stephen f. smith, anthoni gallagh, terri zimmerman, laura barbulescu, zachari rubinstein the robot institut, carnegi mellon univers 5000 forb avenu, pittsburgh pa 15024 {sf,anthonyg,wizim,laurabar,zbr}@cs.cmu.edu abstract we consid the problem of manag schedul in an  uncertain, distribut environ. we assum a team of  collabor agent, each respons for execut a portion of a global pre-establish schedul, but none possess a global view of either the problem or solut. the goal is to maxim the joint qualiti obtain from the activ execut by all agent, given that, dure execut,  unexpect event will forc chang to some prescrib  activ and reduc the util of execut other. we describ an agent architectur for solv thi problem that coupl two basic mechan: (1) a flexibl time represent of the agent"s schedul (us a simpl tempor network) and (2) an increment reschedul procedur. the former hedg against tempor uncertainti by allow execut to proce from a set of feasibl solut, and the latter act to revis the agent"s schedul when execut is forc  outsid of thi set of solut or when execut event reduc the expect valu of thi feasibl solut set. basic  coordin with other agent is achiev simpli by  commun schedul chang to those agent with inter-depend activ. then, as time permit, the core local problem solv infra-structur is us to drive an inter-agent option gener and queri process, aim at identifi  opportun for solut improv through joint chang. us a simul to model the environ, we compar the  perform of our multi-agent system with that of an expect optim (but non-scalabl) central mdp solver. categori and subject descriptor i.2.11 [comput methodolog]: artifici  intelligencedistribut artifici intellig gener term algorithm, design 1. introduct the practic constraint of mani applic  environ requir distribut manag of execut plan and schedul. such factor as geograph separ of execut agent, limit on commun bandwidth, constraint relat to chain of command and the high tempo of execut dynam mai all preclud ani singl agent from obtain a complet global view of the problem, and henc necessit collabor yet local plan and schedul decis. in thi paper, we consid the problem of manag and execut schedul in an uncertain and distribut environ as defin by the darpa  coordin program. we assum a team of collabor agent, each respons for execut a portion of a global  preestablish schedul, but none possess a global view of either the problem or solut. the team goal is to maxim the total qualiti of all activ execut by all agent, given that unexpect event will forc chang to pre-schedul activ and alter the util of execut other as  execut unfold. to provid a basi for distribut coordin, each agent is awar of depend between it schedul activ and those of other agent. each agent is also given a pre-comput set of local conting (fall-back) option. central to our approach to solv thi multi-agent  problem is an increment flexibl-time schedul framework. in a flexibl-time represent of an agent"s schedul, the execut interv associ with schedul activ ar not fix, but instead ar allow to float within impos time and activ sequenc constraint. thi  represent allow the explicit us of slack as a hedg against simpl form of execut uncertainti (e.g., activ durat), and it underli implement as a simpl tempor network (stn) model provid effici updat and  consist enforc mechan. the advantag of  flexibl time framework have been demonstr in variou central plan and schedul context (e.g., [12, 8, 9, 10, 11]). howev their us in distribut problem solv set ha been quit spars ([7] is on except), and prior approach to multi-agent schedul (e.g., [6, 13, 5]) have gener oper with fix-time represent of agent schedul. we defin an agent architectur center around  increment manag of a flexibl time schedul. the  underli stn-base represent is us (1) to loosen the coupl between executor and schedul thread, (2) to  retain a basic abil to absorb unexpect execut delai (or speedup), and (3) to provid a basic criterion for  detect the need for schedul chang. local chang is  ac484 978-81-904262-7-5 (rp) c 2007 ifaama figur 1: a two agent c taem problem. complish by an increment schedul, design to  maxim qualiti while attempt to minim schedul chang. to thi schedul manag infra-structur, we add two mechan for multi-agent coordin. basic  coordin with other agent is achiev by simpl  commun of local schedul chang to other agent with  interdepend activ. layer over thi is a non-local option gener and evalu process (similar in some respect to [5]), aim at identif of opportun for global improv through joint chang to the schedul of  multipl agent. thi latter process us analysi of detect conflict in the stn as a basi for gener option. the remaind of the paper is organ as follow. we  begin by briefli summar the gener distribut  schedul problem of interest in our work. next, we introduc the agent architectur we have develop to solv thi problem and sketch it oper. in the follow section, we  describ the compon of the architectur in more detail, consid in turn issu relat to execut agent  schedul, increment revis agent schedul and  coordin schedul chang among multipl agent. we then give some experiment result to indic current system  perform. final we conclud with a brief discuss of current research plan. 2. the coordin problem as indic abov the distribut schedul manag problem that we address in thi paper is that put forth by the darpa coordin program. the coordin  problem is concern gener with the collabor execut of a joint mission by a team of agent in a highli dynam environ. a mission is formul as a network of task, which ar distribut among the agent by the mass  simul such that no agent ha a complet, object view of the whole problem. instead, each agent receiv onli a subject view contain just the portion of the task network that relat to ground task that it is respons for and ani remot task that have interdepend with these local task. a pre-comput initi schedul is also  distribut to the agent, and each agent"s schedul indic which of it local task should be execut and when. each task ha an associ qualiti valu which accru if it is successfulli execut within it constraint, and the overal goal is to maxim the qualiti obtain dure execut. figur 2: subject view for agent 2. as execut proce, agent must react to unexpect  result (e.g., task delai, failur) and chang to the mission (e.g., new task, deadlin chang) gener by the  simul, recogn when schedul task ar no longer feasibl or desir, and coordin with each other to take correct, qualiti-maxim reschedul action that keep execut of the overal mission move forward. problem ar formal specifi us a version of the taem languag (task analysi, environ model and simul) [4] call c taem [1]. within c taem, task ar repres hierarch, as shown in the  exampl in figur 1. at the highest, most abstract level, the root of the tree is a special task call the task group. on success level, task constitut aggreg activ, which can be decompos into set of subtask and/or  primit activ, term method. method appear at the leaf level of c taem task structur and ar those that ar directli execut in the world. each declar method m can onli be execut by a specifi agent (denot by ag : agentn in figur 1) and each agent can be  execut at most on method at ani given time (i.e. agent ar unit-capac resourc). method durat and qualiti ar typic specifi as discret probabl distribut, and henc known with certainti onli after thei have been  execut.1 it is also possibl for a method to fail unexpectedli in execut, in which case the report qualiti is zero. for each task, a qualiti accumul function qaf is  defin, which specifi when and how a task accumul  qualiti as it subtask (method) ar execut. for exampl, a task with a min qaf will accru the qualiti of it child with lowest qualiti if all it children execut and accumul  posit qualiti. task with sum or max qaf acquir qualiti as soon as on child execut with posit qualiti; as their qaf name suggest, their respect valu ultim will be the total or maximum qualiti of all children that execut. a sync-sum task will accru qualiti onli for those children that commenc execut concurr with the first child that execut, while an exactli-on task accru qualiti onli if precis on of it children execut. inter-depend between task/method in the  problem ar model via non-local effect (nle). two type of nle can be specifi: hard and soft. hard nle express 1 for simplic, figur 1 and 2 show onli fix valu for method qualiti and durat. the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 485 causal precondit: for exampl, the enabl nle in figur 1 stipul that the target method m5 can not be execut until the sourc m4 accumul qualiti. soft nle, which includ facilit and hinder, ar not requir constraint; howev, when thei ar in plai, thei amplifi (or dampen) the qualiti and durat of the target task. ani given task or method a can also be constrain by an earliest start time and a deadlin, specifi the window in which a can be feasibl execut. a mai also inherit these constraint from ancestor task at ani higher level in the task structur, and it effect execut window will be defin by the tightest of these constraint. figur 1 show the complet object view of a simpl 2 agent problem. figur 2 show the subject view avail to agent 2 for the same problem. in what follow, we will sometim us the term activ to refer gener to both task and method node. 3. overview of approach our solut framework combin two basic principl for cope with the problem of manag multi-agent schedul in an uncertain and time stress execut environ. first is the us of a stn-base flexibl time  represent of solut constraint, which allow execut to be driven by a set of schedul rather than a singl point solut. thi provid a basic hedg against tempor  uncertainti and can be us to modul the need for solut revis. the second principl is to first respond local to except event, and then, as time permit, explor  nonloc option (i.e., option involv chang by 2 or more agent) for global solut improv. thi provid a mean for keep pace with execut, and for ty the amount of effort spent in more global multi-agent solut improv to the time avail. both local and non-local problem solv time is further minim by the us of a core increment schedul procedur. figur 3: agent architectur. our solut framework is made concret in the agent  architectur depict in figur 3. in it most basic form, an agent compris four princip compon - an executor, a schedul, a distribut state manag (dsm), and an  option manag - all of which share a common model of the current problem and solut state that coupl a  domainlevel represent of the subject c taem task structur to an underli stn. at ani point dure oper, the current instal schedul dictat the time and sequenc of domain-level activ that will be initi by the agent. the executor, run in it own thread, continu  monitor the enabl condit of variou pend activ, and activ the next pend activ as soon as all of it causal and tempor constraint ar satisfi. when execut result ar receiv back from the  environ (mass) and/or chang to assum extern  constraint ar receiv from other agent, the agent"s model of current state is updat. in case where thi updat lead to inconsist in the stn or it is otherwis recogn that the current local schedul might now be improv, the schedul, run on a separ thread, is invok to revis the current solut and instal a new schedul. whenev local schedul constraint chang either in respons to a  current state updat or through manipul by the schedul, the dsm is invok to commun these chang to  interest agent (i.e., those agent that share depend and have overlap subject view). after respond local to a given state updat and  commun consequ, the agent will us ani remain comput time to explor possibl for improv through joint chang. the option manag util the schedul (in thi case in hypothet mode) to gener on or more non-local option, i.e., identifi chang to the schedul of on or more other agent that will enabl the local agent to rais the qualiti of it schedul. these option ar formul and commun as queri to the  appropri remot agent, who in turn hypothet evalu the impact of propos chang from their local  perspect. in those case where global improv is verifi, joint chang ar commit to. in the follow section we consid the mechan of these compon in more detail. 4. the schedul as indic abov, our agent schedul oper  increment. increment schedul framework ar ideal suit for domain requir tight schedul-execut  coupl: rather than recomput a new schedul in respons to everi chang, thei respond quickli to execut event by local chang and make adjust to the current schedul to accommod the event. there is an inher bia toward schedul stabil which provid better support for the continu in execut. thi latter properti is also advantag in multi-agent set, sinc solut stabil tend to minim the rippl across differ agent"  schedul. the coupl of increment schedul with flexibl time schedul add addit leverag in an uncertain,  multiag execut environ. as mention earlier, slack can be us as a hedg against uncertain method execut time. it also provid a basi for soften the impact of inter-depend across agent. in thi section, we summar the core schedul that we have develop to solv the coordin problem. in  subsequ section we discuss it us in manag execut and coordin with other agent. 4.1 stn solut represent to maintain the rang of admiss valu for the start and end time of variou method in a given agent"s  sched486 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) ul, all problem and schedul constraint impact these time ar encod in an underli simpl tempor  network (stn)[3]. an stn repres tempor constraint as a graph g < n, e >, where node in n repres the set of time point of interest, and edg in e ar distanc between pair of time point in n. a special time point, call calendar zero ground the network and ha the valu 0. constraint on activ (e.g. releas time, due time, durat) and relationship between activ (e.g.  parentchild relat, enabl) ar uniformli repres as  tempor constraint (i.e., edg) between relev start and finish time point. an agent"s schedul is design as a total order of select method by post preced  constraint between the end and start point of each order pair. as new method ar insert into a schedul or  extern state updat requir adjust to exist constraint (e.g., substitut of an actual durat constraint,  tighten of a deadlin), the network propag constraint and maintain lower and upper bound on all time point in the network. thi is accomplish effici via the us of a standard all-pair shortest path algorithm; in our  implement, we take advantag of an increment procedur base on [2]. as bound ar updat, a consist check is made for the presenc of neg cycl, and the absenc of ani such cycl ensur the continu tempor feasibl of the network (and henc the schedul). otherwis a conflict ha been detect, and some amount of constraint retract is necessari to restor feasibl. 4.2 maintain high-qualiti schedul the schedul consist of two basic compon: a qualiti propag and an activ alloc that work in a tightli  integr loop. the qualiti propag analyz the activ hierarchi and collect a set of method that (if schedul) would maxim the qualiti of the agent"s local problem. the method ar collect without regard for resourc  content; in essenc, the qualiti propag optim solv a relax problem where agent ar capabl of perform an infinit number of activ at onc. the alloc  select method from thi list and attempt to instal them in the agent"s schedul. failur to do so reinvok the qualiti propag with the problemat activ exclud. the qualiti propag - the qualiti propag  perform the follow action on the c taem task structur: • comput the qualiti of all activ in the task  structur: the expect qualiti qual(m) of a method m is comput from the probabl distribut of the  execut outcom. the qualiti qual(t) of a task t is comput by appli it qaf to the assess qualiti of it children. • gener a list of contributor for each task: method that, if schedul, will maxim the qualiti obtain by the task. • gener a list of activ for each task: method that, if schedul, ar suffici to qualifi the task as schedul. method in the activ list ar chosen to minim demand on the agent"s timelin without regard to qualiti. the first time the qualiti propag is invok, the  qualiti of all task and method ar calcul and the initi list of contributor and activ ar determin.  subsequ call to the propag occur as the alloc instal method on the agent"s timelin: failur of the alloc to instal a method caus the propag to recomput a new list of contributor and activ. the activ alloc - the activ alloc seek to instal the contributor of the taskgroup identifi by the qualiti propag onto the agent"s timelin. ani  current schedul method that do not appear in the  contributor list ar first unschedul and remov from the timelin. the contributor ar then preprocess us a qualiti-centric heurist to creat an agenda sort in  decreas qualiti order. in addit, method associ with a and task (i.e., min, sumand) ar group consecut within the agenda. sinc an and task accumul qualiti onli if all it children ar schedul, thi bias the  schedul process toward fail earli (and regener  contributor) when the method chosen for the and cannot  togeth be alloc. the alloc iter pop the first method mnew from the agenda and attempt to instal it. thi entail first check that all activ that enabl mnew have been  schedul, while attempt to instal ani enabl that is not. if ani of the enabl activ fail to instal, the alloc pass fail. when success, the enabl constraint link the enabl activ to mnew ar activ. the stn  reject an infeas enabl constraint by return a conflict. in thi event ani enabl activ it ha schedul ar  uninstal and the alloc return failur. onc schedul of enabl is ensur, a feasibl slot on the agent"s  timelin within mnew"s time window is sought and the alloc attempt to insert mnew between two current schedul method. at the stn level, mnew"s insert break the  sequenc constraint between the two extant timelin  method and attempt to insert two new sequenc constraint that chain mnew to these method. if these insert  succe, the routin return success, otherwis the two extant timelin method ar relink and alloc attempt the next possibl slot for mnew insert. 5. the dynam of execut maintain a flexibl-time schedul enabl us to us a conflict-driven approach to schedul repair: rather than react to everi event in the execut that mai impact the exist schedul by comput an updat solut, the stn can absorb ani chang that doe not caus a conflict. consequ, comput (produc a new schedul) and commun cost (inform other agent of chang that affect them) ar minim. on basic mechan need to model execut in the stn is a dynam model for current time. we emploi a model propos by [7] that establish a ‘current-time" time point and includ a link between it and the calendar-zero time point. as each method is schedul, a simpl  preced constraint between the current-time time point and the method is establish. when the schedul receiv a current time updat, the link between calendar-zero and current-time is modifi to reflect thi new time, and the constraint propag to all schedul method. a second issu concern synchron between the  executor and the schedul, as produc and consum of the schedul run on differ thread within a given agent. thi coordin must be robust despit the fact that the the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 487 executor need to start method for execut in real-time even while the schedul mai be reassess the schedul to maxim qualiti, and/or transmit a revis schedul. if the executor, for exampl, slate a method for execut base on current time while the schedul is instanti a revis schedul in which that method is no longer  nextto-be-execut, an inconsist state mai aris within the agent architectur. thi is address in part by  introduc a freez window; a specifi short (and adjust) time period beyond current time within which ani activ slate as elig to start in the current schedul cannot be reschedul by the schedul. the schedul is trigger in respons to variou  environment messag. there ar two type of environment messag class that we discuss here as execut  dynam: 1) feedback as a result of method execut - both the agent"s own and that of other agent, and 2) chang in the c taem model correspond to a set of  simulatordirect evolut of the problem and environ. such messag ar term updat and ar treat by the  schedul as direct to perman modifi paramet in it model. we discuss these updat type in turn here and  defer until later the discuss of queri to the schedul, a "what-if" mode initi by a remot agent that is pursu higher global qualiti. whether it is invok via an updat or a queri, the  schedul"s respons is an option; essenti a complet  schedul of activ the agent can execut along with associ qualiti metric. we defin a local option as a valid schedul for an agent"s activ, which doe not requir chang to ani other agent"s schedul. the overarch design for  handl execut dynam aim at anytim schedul  behavior in which a local option maxim the local view of qualiti is return quickli, possibl follow by global higher qualiti schedul that entail inter-agent coordin if avail schedul cycl permit. as such, the default schedul mode for updat is to seek the highest qualiti local option accord to the schedul"s search strategi,  instanti the option as it current schedul, and notifi the executor of the revis. 5.1 respond to activ execut as suggest earlier, a commit schedul consist of a sequenc of method, each with a design [est, lst] start time window (as provid by the underli stn  represent). the executor is free to execut a method ani time within it start time window, onc ani addit enabl condit have been confirm. these schedul start time window ar establish us the expect durat of each schedul method (deriv from associ method durat distribut dure schedul construct). of cours as  execut unfold, actual method durat mai deviat from these expect. in these case, the flexibl retain in the schedul can be us to absorb some of thi  unpredict and modul invoc of a schedul revis process. consid the case of a method complet messag, on of the environment messag that could be commun to the schedul as an execut state updat. if the  complet time is coincid with the expect durat (i.e., it complet exactli as expect), then the schedul"s  respons is to simpli mark it as ‘complet" and the agent can proce to commun the time at which it ha  accumul qualiti to ani remot agent link to thi method. howev if the method complet with a durat shorter than expect a reschedul action might be warrant. the post of the actual durat in the stn introduc no potenti for conflict in thi case, either with the latest start time (lst) of local or remot method that depend on thi method as an enabl, or to success schedul method on the agent"s timelin. howev, it mai present a possibl for exploit the unanticip schedul slack. the flexibl time represent afford by the stn  provid a quick mean of assess whether the next method on the timelin can begin immedi execut instead of  wait for it previous establish earliest start time (est). if inde the est of the next schedul method can spring back to current-time onc the actual durat constraint is substitut for the expect durat constraint, then the schedul can be left intact and simpli commun back to the executor. if altern, other problem constraint prevent thi relax of the est, then there is forc idl time that mai be exploit by revis the schedul, and the schedul is invok (alwai respect the freez period). if the method complet later than expect, then there is no need for reschedul under flexibl time schedul unless 1) the method finish later than the lst of the  subsequ schedul activ, or 2) it finish later than it deadlin. thu we onli invok the schedul if, upon  post the late finish in the stn, a constraint violat occur. in the latter case no qualiti is accru and reschedul is mandat even if there ar no conflict with subsequ schedul activ. other execut statu updat the agent mai receiv  includ: • method start - if a method sent for execut is start within it [est, lst] window, the respons is to mark it as "execut". a method cannot start earlier than when it is transmit by the executor but it is  possibl for it to start later than request. if the post start time caus an inconsist in the stn (e.g.  becaus the expect method durat can no longer be accommod) the durat constraint in the stn is shorten base on the known distribut until either consist is restor or reschedul is mandat. • method failur - ani method under execut mai fail unexpectedli, garner no qualiti for the agent. at thi point reschedul is mandat as the method mai enabl other activ or significantli impact qualiti in the absenc of local repair. again, the executor will proce with execut of the next method if it start time arriv befor the revis schedul is commit, and the schedul accommod thi by respect the freez window. • current time advanc an updat on "current time" mai arriv either alon or as part of ani of the  previous discuss updat. if, when updat the  currenttim link in the stn (as describ abov), a conflict result, the execut state is inconsist with the schedul. in thi case, the schedul proce as if  execut were consist with it expect, subject to possibl later updat. 488 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 5.2 respond to model updat the agent can also dynam receiv chang to the agent"s underli c taem model. dynam revis in the outcom distribut for method alreadi in an agent"s subject view mai impact the assess qualiti and/or  durat valu that shape the current schedul. similarli, dynam revis in the design releas time and  deadlin for method and task alreadi in an agent"s subject view can invalid an extant schedul or present  opportun to boost qualiti. it is also possibl dure execut to receiv updat in which new method and possibl  entir task structur ar given to the agent for inclus in it subject view. model chang that involv tempor constraint ar handl in much the same fashion as  describ for method start and complet, i.e, reschedul is requir onli when the post of the revis constraint lead to an stn conflict. in the case of non-tempor model chang, reschedul action is current alwai initi. 6. inter-agent coordin have respond local to an unexpect execut  result or model chang, it is necessari to commun the consequ to agent with inter-depend activ so that thei can align their decis accordingli. respons that look good local mai have a sub-optim global effect onc align ar made, and henc agent must have the abil to seek mutual benefici joint schedul chang. in thi section we summar the coordin mechan provid in the agent architectur to address these issu. 6.1 commun non-local constraint a basic mean of coordin with other agent is  provid by the distribut state mechan (dsm), which is respons for commun chang made to the model or schedul of a given agent to other interest agent. more specif, the dsm of a given agent act to push ani chang made to the time bound, qualiti, or statu of a local task/method to all the other agent that have that same task/method as a remot node in their subject view. a recipi agent treat ani commun chang as addit form of updat, in thi case an updat that modifi the current constraint associ with non-local (but inter-depend) task or method. these chang ar handl ident to updat reflect schedul execut result, potenti trigger the local schedul if the need to reschedul is detect. 6.2 gener non-local option as mention in the previou section, the agent"s first  respons to ani given queri or updat (either from execut or from anoth agent) is to gener on or more local  option. such option repres local schedul chang that ar consist with all current known constraint origin from other agent" schedul, and henc can be implement without interact with other agent. in mani case,  howev, a larger-scope chang to the schedul of two or more agent can produc a higher-qualiti respons. explor of opportun for such coordin action by two or more agent is the respons of the option manag. run in lower prioriti mode than the  executor and schedul, the option manag initi a non-local option gener and evalu process in respons to ani local schedul chang made by the agent if comput time constraint permit. gener speak, a non-local option identifi certain relax (to on or more constraint  impos by method that ar schedul by on or more remot agent) that enabl the gener of a higher qualiti local schedul. when found, a non-local option is us by a  coordin agent to formul queri to ani other involv agent in order to determin the impact of such constraint relax on their local schedul. if the combin  qualiti chang report back from a set of on or more relev queri is a net gain, then the issu agent signal to the other involv agent to commit to thi joint set of schedul chang. the option manag current emploi two  basic search strategi for gener non-local option, each exploit the local schedul in hypothet mode. optimist synchron - optimist  synchron is a non-local option gener strategi where search is us to explor the impact on qualiti if optimist  assumpt ar made about current unschedul remot enabl. more specif, the strategi look for would be contributor method that ar current unschedul due to the fact that on or more remot enabl (sourc) task or method ar not current schedul. for each such local method, the set of remot enabl ar hypothet  activ, and the schedul attempt to construct a new local schedul under these optimist assumpt. if success, a non-local option is gener, specifi the valu of the new, higher qualiti local schedul, the tempor constraint on the local target activ, and the set of must-schedul enabl activ that must be schedul by remot agent in order to achiev thi local qualiti. the need queri request the qualiti impact of schedul these activ ar then formul and sent to the relev remot agent. to illustr, consid again the exampl in figur 1. the maximum qualiti that agent1 can contribut to the task group is 15 (by schedul m1, m2 and m3). assum that thi is agent1"s current schedul. given thi state, the maximum qualiti that agent2 can contribut to the task group is 10, and the total task group qualiti would then be 15 + 10 = 25. us optimist synchron, agent2 will gener a non-local option that indic that if m5 becom enabl, both m5 and m6 would be schedul, and the qualiti contribut by agent2 to the task group would becom 30. agent2 send a must schedul m4 queri to agent1. becaus of the time window constraint, agent1 must remov m3 from it schedul to get m4 on,  result in a new lower qualiti schedul of 5. howev, when agent2 receiv thi option respons from agent1, it  determin that the total qualiti accumul for the task group would be 5 + 30 = 35, a net gain of 10. henc, agent 2 signal to agent1 to commit to thi non-local option. conflict-driven relax - a second strategi for gener non-local option, refer to as conflict-direct relax, util analysi of stn conflict to identifi and priorit extern constraint to relax in the event that a particular method that would increas local qualiti is found to be unschedul. recal that if a method cannot be  feasibl insert into the schedul, an attempt to do so will gener a neg cycl. given thi cycl, the mechan proce in three step. first, the constraint involv in the cycl ar collect. second, by virtu of the connect in the stn to the domain-level c taem model, thi set is filter to identifi the subset associ with remot node. third, constraint in thi subset ar select retract to the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 489 figur 4: a high qualiti task is ad to the task structur of agent2. figur 5: if m4, m5 and m7 ar schedul, a conflict is detect by the stn. determin if stn consist is restor. if success, a non-local option is gener indic which remot  constraint(s) must be relax and by how much to allow  instal of the new, higher qualiti local schedul. to illustr thi strategi, consid figur 5 where agent1 ha m1, m2 and m4 on it timelin, and therefor est(m4) = 21. agent2 ha m5 and m6 on it timelin, with est(m5) = 31 (m6 could be schedul befor or after m5). suppos that agent2 receiv a new task m7 with deadlin 55 (see figur 4). if agent2 could schedul m7, the qualiti  contribut by agent2 to the task group would be 70.  howev, an attempt to schedul m7 togeth with m5 and m6 lead to a conflict, sinc the est(m7) = 46, dur(m7) = 10 and lft(m7) = 55 (see figur 5). conflict-direct  relax by agent 2 suggest relax the lft(m4) by 1 tick to 30, and thi queri is commun to agent 1. in fact, by retract either method m1 or m2 from the schedul thi relax can be accommod with no qualiti loss to agent1 (due to the min qaf). upon commun of thi fact agent 2 signal to commit. 7. experiment result an initi version of the agent describ in thi paper wa develop in collabor with sri intern and subject to the independ conduct coordin  programmat evalu. thi evalu involv over 2000 problem instanc randomli gener by a scenario  gener that wa configur to produc scenario of vari problem class descript agent class qualiti od ‘onli dynam". no nle. 97.9% (390 prob) actual task durat & qualiti vari accord to distribut. int ‘interdepend". frequent & 100% (360 prob) random (esp. facilit) chain activ chain togeth 99.5% (360 prob) via sequenc of enabl nle (1-4 chain/prob) tt ‘tempor tight". releas - 94.9% (360 prob) deadlin window preclud prefer high qualiti (longest durat) task from all be schedul. sync problem contain rang of 97.1% (360 prob) differ sync sum task nta ‘new task arriv". ctaem 99.0% (360 prob) model is augment with new task dynam dure run. overal avg: 98.1% (2190 prob) std dev: 6.96 tabl 1: perform of year 1 agent over  coordin evalu. ‘agent qualiti" is % of ‘optim" durat within six experi class. these class,  summar in tabl 1, were design to evalu kei aspect of a set of coordin distribut schedul agent, such as their abil to handl unexpect execut result, chain of nle"s involv multipl agent, and effect schedul of new activ that aris unexpectedli at some point  dure the problem run. year 1 evalu problem were  constrain to be small enough (3 -10 agent, 50 - 100 method) such that comparison against an optim central solver wa feasibl. the evalu team emploi an mdp-base solver capabl of unrol the entir search space for these problem, choos for an agent at each execut decis point the activ most like to produc maximum global qualiti. thi establish a challeng benchmark for the distribut agent system to compar against. the  hardwar configur us by the evalu instanti and ran on agent per machin, dedic a separ machin to the mass simul. as report in tabl 1, the year 1 prototyp agent clearli compar favor to the benchmark on all class,  come within 2% of the mdp optim averag over the  entir set of 2190 problem. these result ar particularli notabl given that each agent"s stn-base schedul doe veri littl reason over the success probabl of the  activ sequenc it select to execut. onli simpl tactic were adopt to explicitli address such uncertainti, such as the us of expect durat and qualiti for activ and a polici of exclud from consider those activ with failur likelihood of >75%. the veri respect agent  perform can be at least partial credit to the fact that the flexibl time represent emploi by the schedul afford it an import buffer against the uncertainti of  execut and exogen event. the agent turn in it lowest perform on the tt (tempor tight) experi class, and an  examin of the agent trace log reveal possibl reason. in about half of the tt problem the year 1 agent under-perform on, the specifi time window within which an agent"s  ac490 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) tiviti must be schedul ar so tight that ani schedul activ which execut with a longer durat than the  expect valu, caus a deadlin failur. thi constitut a case where more sophist reason over success  probabl would benefit thi agent. the other half of  underperform tt problem involv activ that depend on facilit relationship in order to fit in their time window (recal that facilit increas qualiti and decreas  durat). the limit facilit reason perform by the year 1 schedul sometim caus failur to instal a  heavili facilit initi schedul. even when such activ ar successfulli instal thei tend to be prone to deadlin failur -if a sourc-side activ(s) either fail or exce it expect durat the result longer durat of the target activ can violat it time window deadlin. 8. statu and direct our current research effort ar aim at extend the  capabl of the year 1 agent and scale up to significantli larger problem. year 2 programmat evalu goal call for solv problem on the order of 100 agent and 10,000 method. thi scale place much higher comput  demand on all of the agent"s compon. we have recent complet a re-implement of the prototyp agent  design to address some recogn perform issu. in addit to verifi that the perform on year 1  problem is match or exceed, we have recent run some success test with the agent on a few 100 agent problem. to fulli address variou scale up issu, we ar  investig a number of more advanc coordin mechan. to provid more global perspect to local schedul  decis, we ar introduc mechan for comput,  commun and us estim of the non-local impact of remot node. to better address the problem of establish inter-agent synchron point, we expand the us of task owner and qaf-specifc protocol as a mean for  direct coordin activ. final, we plan to explor the us of more advanc stn-driven coordin mechan,  includ the us of tempor decoupl [7] to insul the action of inter-depend agent and the introduct of probabl sensit conting schedul. 9. acknowledg the year 1 agent architectur wa develop in  collabor with andrew agno, roger mailler and regi  vincent of sri intern. thi paper is base on work support by the depart of defens advanc research project agenc (darpa) under contract #  fa8750-05-c0033. ani opinion find and conclus or  recommend express in thi paper ar those of the author and do not necessarili reflect the view of darpa. 10. refer [1] m. boddi, b. horl, j. phelp, r. goldman, r. vincent, a. long, and b. kohout. c taem languag specif v. 1.06, octob 2005. [2] a. cesta and a. oddi. gain effici and flexibl in the simpl tempor problem. in proc. 3rd int. workshop on tempor represent and reason, kei west fl, mai 1996. [3] r. dechter, i. meiri, and j. pearl. tempor constraint network. artifici intellig, 49:61-95, mai 1991. [4] k. decker. tÆms: a framework for environ center analysi & design of coordin mechan. in g. o"hare and n. jen, editor, foundat of distribut artifici intellig, chapter 16, page 429-448. wilei inter-scienc, 1996. [5] k. decker and v. lesser. design a famili of coordin algorithm. in proc. 1st. int. confer on multi-agent system, san francisco, 1995. [6] a. j. garvei. design-to-time real-time schedul. phd thesi, univ. of massachusett, feb. 1996. [7] l. hunsberg. algorithm for a tempor decoupl problem in multi-agent plan. in proc. 18th nation confer on ai, 2002. [8] s. lemai and f. ingrand. interleav tempor plan and execut in robot domain. in proc. 19th nation confer on ai, 2004. [9] n. muscettola, p. p. nayak, b. pell, and b. c. william. remot agent: to boldli go where no ai system ha gone befor. artifici intellig, 103(1-2):5-47, 1998. [10] w. ruml, m. b. do, and m. fromherz. on-line plan and schedul of high-speed manufactur. in proc. icap-05, monterei, 2005. [11] i. shu, r. effing, and b. william. enabl fast flexibl plan through increment tempor reason with conflict extract. in proce. icap-05, monterei, 2005. [12] s. smith and c. cheng. slack-base heurist for constraint satisfact schedul. in proc. 12th nation confer on ai, wash dc, juli 1993. [13] t. wagner, a. garvei, and v. lesser. criteria-direct heurist task schedul. intern journal of approxim reason, 19(1):91-118, 1998. the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 491 