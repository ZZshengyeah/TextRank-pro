toward self-organis agent-base resourc alloc in a multi-server environ tino schlegel1 , ryszard kowalczyk2 swinburn univers of technolog faculti of inform and commun technolog hawthorn, 3122 victoria, australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au abstract distribut applic requir distribut techniqu for effici resourc alloc. these techniqu need to take into account the heterogen and potenti unreli of resourc and resourc consum in a distribut  environ. in thi paper we propos a distribut algorithm that solv the resourc alloc problem in distribut  multiag system. our solut is base on the self-organis of agent, which doe not requir ani facilit or  manag layer. the resourc alloc in the system is a pure emerg effect. we present result of the propos resourc alloc mechan in the simul static and dynam multi-server environ. categori and subject descriptor i.2.11 [distribut artifici intellig]: coher and coordin gener term algorithm 1. introduct with the increas popular of distribut comput technolog such as grid [12] and web servic [20], the internet is becom a power comput platform where differ softwar peer (e.g., agent) can us exist  comput resourc to perform task. in thi sens, each agent is a resourc consum that acquir a certain amount of resourc for the execut of it task. it is difficult for a central resourc alloc mechan to collect and  manag the inform about all share resourc and resourc consum to effect perform the alloc of resourc. henc, distribut solut of the resourc alloc  problem ar requir. research have recognis these  requir [10] and propos techniqu for distribut resourc alloc. a promis kind of such distribut approach ar base on econom market model [4], inspir by  principl of real stock market. even if those approach ar distribut, thei usual requir a facilit for price,  resourc discoveri and dispatch job to resourc [5, 9]. anoth mainli unsolv problem of those approach is the fine-tune of price and time, budget constraint to enabl effici resourc alloc in larg, dynam system [22]. in thi paper we propos a distribut solut of the  resourc alloc problem base on self-organis of the resourc consum in a system with limit resourc. in our approach, agent dynam alloc task to server that provid a limit amount of resourc. in our approach, agent select autonom the execut platform for the task rather than ask a resourc broker to do the alloc. all control need for our algorithm is distribut among the agent in the system. thei optimis the resourc  alloc process continu over their lifetim to chang in the avail of share resourc by learn from past alloc decis. the onli inform avail to all agent ar resourc load and alloc success inform from past resourc alloc. addit resourc load  inform about server is not dissemin. the basic  concept of our solut is inspir by induct reason and bound ration introduc by w. brian arthur [2]. the propos mechan doe not requir a central  control author, resourc manag layer or introduc addit commun between agent to decid which task is alloc on which server. we demonstr that thi mechan perform well dynam system with a larg number of task and can easili be adapt to variou  system size. in addit, the overal system perform is not affect in case agent or server fail or becom  unavail. the propos approach provid an easi wai to implement distribut resourc alloc and take into  account multi-agent system tendenc toward autonomi,  heterogen and unreli of resourc and agent. thi propos techniqu can be easili supplement by techniqu for queu or reject resourc alloc  request of agent [11]. such self-manag capabl of softwar agent allow a reliabl resourc alloc even in an environ with unreli resourc provid. thi can be achiev by the mutual interact between agent by appli techniqu from complex system theori.  selforganis of all agent lead to a self-organis of the 74 978-81-904262-7-5 (rp) c 2007 ifaama system resourc and is an emerg properti of the  system [21]. the remaind of the paper is structur as follow: the next section give an overview of the relat work alreadi done in the area of load balanc, resourc alloc or schedul. section 3 describ the model of a multi-agent environ that wa us to conduct simul for a perform evalu. section 4 and 5 describ the  distribut resourc alloc algorithm and present variou experiment result. a summari, conclus and outlook to futur work finish thi paper. 2. relat work resourc alloc is an import problem in the area of comput scienc. over the past year, solut base on differ assumpt and constraint have been propos by differ research group [7, 3, 15, 10]. gener speak, resourc alloc is a mechan or polici for the effici and effect manag of the access to a limit resourc or set of resourc by it consum. in the simplest case, resourc consum ask a central broker or dispatch for avail resourc where the resourc consum will be  alloc. the broker usual ha full knowledg about all system resourc. all incom request ar direct to the broker who is the sole decis maker. in those approach, the resourc consum cannot influenc the alloc  decis process. load balanc [3] is a special case of the resourc alloc problem us a broker that tri to be fair to all resourc by balanc the system load equal among all resourc provid. thi mechan work best in a homogen system. a simpl distribut techniqu for resourc manag is capac plan by refus or queu incom agent to avoid resourc overload [11]. from the resourc owner perspect, thi techniqu is import to prevent overload at the resourc but it is not suffici for effect resourc alloc. thi techniqu can onli provid a good  supplement for distribut resourc alloc mechan. most of todai"s techniqu for resourc alloc in grid comput toolkit like globu [12] or condor-g [13]  coordin the resourc alloc with an auction,  arbitr, dispatch, schedul or manag. those coordin usual need to have global knowledg on the state of all system resourc. an exampl of a dynam resourc  alloc algorithm is the cactu project [1] for the alloc of comput veri expens job. the valu of distribut solut for the resourc  alloc problem ha been recognis by research [10]. inspir by the principl in stock market, econom market model have been develop for trade resourc for the  regul of suppli and demand in the grid. these approach us differ price strategi such as post price model, differ auction method or a commod market model. user try to purchas cheap resourc requir to run the job while provid try to make as much profit as possibl and oper the avail resourc at full capac. a collect of differ distribut resourc alloc techniqu base on market model is present in clearwat [10]. buyya et al. develop a resourc alloc framework base on the regul of suppli and demand [4] for nimrod-g [6] with the main focu on job deadlin and budget constraint. the agent base resourc alloc model (aram) for grid is design to schedul comput expens job us agent. drawback of thi model is the extens us of messag exchang between agent for period  monitor and inform exchang within the hierarch  structur. subtask of a job migrat through the network until thei find a resourc that meet the price constraint. the job"s migrat itinerari is determin by the resourc in connect them in differ topolog [17]. the propos mechan in thi paper elimin the need of period  inform exchang about resourc load and doe not need a connect topolog between the resourc. there ha been consider work on decentralis  resourc alloc techniqu us game theori publish over recent year. most of them ar formul as  repetit game in an idealist and simplifi environ. for exampl, arthur [2] introduc the so call el farol bar problem that doe not allow a perfect, logic and ration solut. it is an ill-defin decis problem that assum and model induct reason. it is probabl on of the most studi exampl of complex adapt system deriv from the human wai of decid ill-defin problem. a variat of the el farol problem is the so call minor game [8]. in thi repetit decis game, an odd number of agent have to choos between two resourc base on past success inform try to alloc itself at the resourc with the minor. galstyan et al. [14] studi a variat with more than two resourc, chang resourc capac and inform from neighbour agent. thei show that agent can adapt effect to chang capac in thi  environ us a set of simpl look-up tabl (strategi) per agent. anoth distribut techniqu that is emploi for solv the resourc alloc problem is base on reinforc learn [18]. similar to our approach, a set of agent  compet for a limit number of resourc base onli on prior individu experi. in thi paper, the system object is to maximis system throughput while ensur fair to resourc, measur as the averag process time per job unit. a resourc alloc approach for sensor network base on self-organis techniqu and reinforc learn is present in [16] with main focu on the optimis of energi consumpt of network node. we [19] propos a self-organis load balanc approach for a singl server with focu on optimis the commun cost of mobil agent. a mobil agent will reject a migrat to a remot agent server, if it expect the destin server to be  alreadi overload by other agent or server task. agent make their decis themselv base on forecast of the server utilis. in thi paper a solut for a multi-server environ is present without consider of  commun or migrat cost. 3. model descript we model a distribut multi-agent system as a network of server l = {l1, . . . , lm}, agent a = {a1, . . . , an} and task t = {t1, ..., tm}. each agent ha a number of task ti that need to be execut dure it lifetim. a task ti  requir u(ti, t) resourc for it execut at time t  independ from it execut server. resourc for the execut of task ar provid by each server li. the task"s execut locat in gener is specifi by the map l : t ×t → l. an agent ha to know about the exist of server resourc in order to alloc task at those resourc. we write ls (ai) the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 75 sysytem resourc host l4host l3host l2 2a 3a 4a a host l1 1a 6a5 t1 t2 t3 t4 t5 t6 figur 1: an illustr of our multi-server model with exclus and share resourc for the agent execut. to address the set of resourc known by agent ai. resourc in the system can be us by all agent for the execut of task. the amount of provid resourc c(li, t) of each server can vari over time. the resourc  utilis of a server li at time t is calcul us equat 1, by ad the resourc consumpt u(tj, t) of each task tj that is execut at the resourc at time t. all resourc unit us in our model repres real metric such as memori or processor cycl. u(li, t) = n j=1 u(tj, t)| l(tj, t) = li (1) addit to the case that the total amount of system  resourc is enough to execut all task, we ar also interest in the case that not enough system resourc ar provid to fulfil all alloc request. that is, the overal share resourc capac is lower than the amount of request  resourc by agent. in thi case, some agent must wait with their alloc request until free resourc ar expect. the multi-agent system model us for our simul is illustr in fig. 1. 4. self-organis resourc  alloc the resourc alloc algorithm as describ in thi  section is integr in each agent. the onli inform  requir in order to make a resourc alloc decis for a task is the server utilis from complet task  alloc at those server. there is no addit inform dissemin about server resourc utilis or  inform about free resourc. our solut demonstr that agent can self-organis in a dynam environ without activ monitor inform that caus a lot of network traffic overhead. addition, we do not have ani central control author. all behaviour that lead to the  resourc alloc is creat by the effect competit of the agent for share resourc and is a pure emerg effect. the agent in our multi-agent system compet for  resourc or a set of resourc to execut task. the  collect action of these agent chang the environ and, as time goe by, thei have to adapt to these chang to compet more effect in the newli creat environ. our approach is base on differ agent belief, repres by predictor and differ inform about their  environ. agent prefer a task alloc at a server with free resourc. howev, there is no wai to be sure of the amount of free server resourc in advanc. all agent have the same prefer and a agent will alloc a task on a server if it expect enough free resourc for it execut. there is no commun between agent. action taken by agent  influenc the action of other agent indirectli. the appli mechan is inspir by induct reason and bound ration principl [2]. it is deriv from the human wai of decid ill-defin problem. human tend to keep in mind mani hypothes and act on the most plausibl on. therefor, each agent keep track of the perform of a privat collect of it predictor and select the on that is current most promis for decis make. 4.1 resourc alloc algorithm thi section describ the decis mechan for our  selforganis resourc alloc. all necessari control is  integr in the agent themselv. there is no higher  control author, manag layer for decis support or inform distribut. all agent have a set of predictor for each resourc to forecast the futur resourc utilis of these server for potenti task alloc. to do so, agent us histor inform from past task alloc at those resourc. base on the forecast resourc utilis, the agent will make it resourc alloc decis. after the task ha finish it execut and return the result back to the agent, the predictor perform ar evalu and histori inform is updat. algorithm 1 show the resourc alloc algorithm for each agent. the agent first predict the next step"s resourc load for each server with histor inform (line 3-7). if the predict resourc load plu the task"s resourc  consumpt is below the last known server capac, thi server is ad to the list of candid for the alloc. the agent then evalu if ani free share resourc for the task alloc ar expect. in the case, no free resourc ar expect (line 9), the agent will explor resourc by  alloc the task at a randomli select server from all not predict server to gather resourc load inform. thi is the standard case at the begin of the agent life-cycl as there is no inform about the environ avail. the resourc load predict itself us a set of r  predictor p(a, l) := {pi|1 ≤ i ≤ r} per server. on predictor pa ∈ p of each set is call activ predictor, which forecast the next step resourc load. each predictor is a function p : h → ℵ+ ∪ {0} from the space of histori data h to a non-neg integ, which is the forecast valu. for exampl, a predictor could forecast a resourc load equal to the averag amount of occupi resourc dure the last execut at thi resourc. a histori h of resourc load  inform is a list of up to m histori item hi = (xi, yi), compris the observ date xi and the observ valu yi. the most recent histori item is h0. hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) our algorithm us a set of predictor rather than onli on, to avoid that all agent make the same decis base on the predict valu lead to an invalid of their belief. imagin that onli on share resourc is known by a number of agent us on predictor forecast the 76 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) resourceload time (a) predictor6 predictor7 predictor 8 predictor9 predictor10 predictor2 predictor 4 predictor 3 predictor5 predictor1 (b) figur 2: (a) collect resourc load inform from previou task alloc that is us for futur predict. (b) predictor"s probabl distribut for select the new activ predictor. same valu as the last known server resourc utilis. all agent that alloc a task at a server that wa slightli overload would dismiss anoth alloc at thi server as thei expect the server to be overload again base on the predict. as the result, the server would have a larg amount of free resourc. a set of differ predictor that predict differ valu avoid thi situat of invalid the belief of the agent [19]. an exampl of a collect resourc load inform from the last 5 visit of an agent at a share resourc can be seen in fig. 2(a). it show that the resourc wa visit frequent, which mean free resourc for execut were avail and an explor of other server wa  unnecessari. thi mai chang in the futur as the resourc load ha significantli increas recent. in the case where the set of server predict have free resourc avail is not empti (line 13), the agent select on of those for alloc. we have implement two  altern algorithm for the select of a server for the task alloc. algorithm 1 resourc alloc algorithm of an agent 1 l ← ∅ //server with free resourc 2 u ← u(t, t + 1) //task resourc consumpt 3 for all p(a, l)|l ∈ ls (a) do 4 u(l) ← resourceloadpredict(p(a, l), t + 1) 5 if u(l) + u ≤ c(l) then 6 l ← l ∪ {p(a, l)} 7 end if 8 end for 9 if l = ∅ then 10 //all unpredict share resourc 11 e ← ls /{l ∈ ls (a)|p(a, l) ∈ l} 12 allocationserv ← a random element of e 13 els 14 allocationserv ← serverselect (l) 15 end if 16 return allocationserv algorithm 2 show the first method, which is a  non-determinist select accord to the predict of the server resourc utilis. a probabl distribut is  calcul from the confid level of the resourc  predict. the confid level depend on three factor: the accuraci of the activ predictor, the amount of histor inform about the server and the averag ag of the  histori inform (see eq. 3. the server with the highest confid level ha the biggest chanc to be select as the activ server. g(p) = w1 · size(h) m + w2 · ag(h) max ag(h) + w3 · g(p) max (g(p)) (3) where: wi − weight size(h) − number of data in histori m − maxim number of histori valu ag(h) − averag ag of histor data g(p) − see eq. 4 algorithm 2 serverselect(l)- best predict server 1 for all p(a, l) ∈ l do 2 calcul g(p) 3 end for 4 transform all g(p) into a probabl distribut 5 return l ∈ ls select accord to the probabl distribut algorithm 3 serverselect(l) - most free resourc 1 for all p(a, l) ∈ l do 2 c(l) ← c(l) − ul 3 end for 4 return l ∈ ls |c(l) is maximum the second altern select method of a server from the set of predict server with free resourc is  determinist and shown in algorithm 3. the server with most expect free resourc from the set l of server with expect free  resourc is chosen. in the case where all agent predict the most free resourc for on particular server, all agent will alloc the task at thi server, which would invalid the agent"s belief. howev, our experi show that  differ individu histori inform and the non-determinist activ predictor select usual prevent thi situat. in the case, the resourc alloc algorithm doe not  return ani server (alg. 1, line 16), the alloc at a resourc in not recommend. the agent will not alloc the task at a resourc. thi case happen onli if a resourc load  predict for all server is possibl but no free resourc ar expect. after the agent execut ha finish, the evalu  process describ in algorithm 4 is preform. thi process is divid into three case. first, the task wa not alloc at a resourc. in thi case, the agent cannot decid if the decis not to alloc the task wa correct or not. the agent then remov old histor data. thi is necessari for a success adapt in the futur. if the agent would not delet old histor inform, the predict would alwai forecast that no free resourc ar avail. the agent would never alloc a task at on of the resourc in the futur. old histor inform is remov from the agent"s  resourc histori us a decai rate. the decai rate is a  cumul distribut function that calcul the probabl that a histori item is delet after it ha reach a certain the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 77 ag of the histori data decayr 0 1 older figur 3: decai rate of histor inform ag. the current implement us a constant probabl densiti function in a configur domain. figur 3 show an exampl of such a cumul distribut function for the decai rate. depend on the environ, the probabl densiti function must be alter. if the number of potenti server per agent is high, histor inform must be kept longer to avoid the explor of unexplor resourc. in addit, a dynam environ requir more up-to-date inform to make more reliabl predict. the second case in the evalu process (alg. 4, line 5) describ the action taken after a server wa visit the first time. the agent creat a new predictor set for thi server and record the histor inform. all predictor for thi set ar chosen randomli from some predefin set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decis 0 if ith unknown outcom −1 if ith wrong decis the gener case (alg. 4, line 8) is the evalu after the agent alloc the task at a resourc. the agent evalu all predictor of the predictor set for thi resourc by  predict the resourc load with all predictor base on the old histor data. predictor that made a correct predict mean the resourc alloc wa correct, will receiv a posit rate. thi is the case that the resourc wa not overload and free resourc for execut were predict, or the resourc wa overload and thi predictor would have prevent the alloc. all predictor that predict  valu which would lead to wrong decis will receiv neg rate. in all other case, which includ that no  predict wa possibl, a neutral rate is given to the predictor. base on these perform rate, the confid level ar calcul us equat 4. the confid for all  predictor that cannot predict with the current histor  inform about the server is set to zero to prevent the select of those as the new activ predictor. these valu ar  transform into a probabl distribut. accord to thi probabl distribut the new activ predictor is chosen, implement as a roulett wheel select. figur 2(b)  illustr the probabl of a set of 10 predictor, which have been calcul from the predictor confid level. even if predictor 9 ha the highest select probabl, it wa not chosen by roulett wheel select process as the activ predictor. thi non-determinist predictor select prevent the invalid of the agent" belief in case agent have the same set of predictor. the predict accuraci that is the error of the predict compar to the observ valu is not taken into  consider. suppos the activ predictor predict slightli abov the resourc capac which lead not to a alloc on a resourc. in fact, enough resourc for the execut would be avail. a less accur predict which is far below the capac would lead to the correct decis and is  therefor prefer. the last action of the evalu algorithm (alg. 4, line 22) updat the histori with the latest resourc load  inform of the server. the oldest histori data is overwritten if alreadi m histori valu ar record for the server. algorithm 4 decis evalu 1 if l ∈ le then 2 for all p(a, l)|l ∈ ls (a) do 3 evapor old histor data 4 end for 5 els if p(a, l) = null then 6 creat (p(a, l)) 7 updat h(l) 8 els 9 for all p ∈ p(a, l) do 10 pred ← resourceloadpredict(p) 11 if (u(l) ≤ c(l) and pred + u(a, t) ≤ c(l)) or (u(l) > c(l) and pred + u(a, t) > c(l)) then 12 addpositiver(p) 13 els if u(l) ≤ c(l) and pred + u(a, t) > c(l) or u(l) ≤ c(l) and pred + u(a, t) > c(l) then 14 addnegativer(p) 15 els 16 addneutralr(p) 17 end if 18 end for 19 calcul all g(p); g(p) ← 0, if p is not work 20 transform all g(p) into a probabl distribut 21 pa ← p ∈ p(a, l) is select accord to thi  probabl distribut 22 updat h(l) 23 end if 4.2 remark and limit of the approach our predict mechan us a number of differ type of simpl predictor rather than of on sophist  predictor. thi method assur that agent can compet more effect in a chang environ. differ type of predictor ar suitabl for differ situat and  environ. therefor, all predictor ar be evalu after each decis and the activ predictor is select. thi  nondeterminist of the new activ predictor support that the agent" belief will not be invalid, which happen in the case that all predictor ar make the same decis.  especi if there is onli on share resourc avail and all agent have onli the choic to go the thi on share resourc or not [19]. our self-organis approach is robust against failur of resourc or agent in the system. if thei join or leav, the system can self-organis quickli and adapt to the new condit. there is no classic bottleneck or singl point of failur like in centralis mechan. the limit ar the relianc on histor resourc utilis inform about other server. a forecast of the resourc utilis of a remot server is onli possibl if an agent ha a number of histor inform about a share resourc. if the  number of server per agent is veri larg, there is no effici wai to gather histor inform about remot server. thi problem occur if the amount of provid share resourc 78 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) is limit and not enough for all resourc consum. in thi case, the an agent would randomli try all known server  until it will find on with free resourc or there is no on. in the worst case, by the time for try all server, histor inform of the server is alreadi outdat. 5. experiment evalu the first part of thi section give a short overview of the setup of our simul environ. in the rest of the section, result of the experi ar present and discuss. all experi ar conduct in a special  testb that simul and model a multi-agent system. we have implement thi test-bed in the java program languag, independ from ani specif agent toolkit. it allow a varieti of experi in in stabl as well as  dynam environ with a configur number of agent, task and server. an event-driven model is us to trigger all activ in the system. for all simul, we limit the number of histori data for each server to 10, the number of perform rate per predictor to 10 and assign 10 predictor to everi predictor set for each agent. all predictor ar chosen randomli from a arbitrari predefin set of 32 predictor of the follow type. predictor differ in differ cycl or window size. - n-cycl predictor: p(n) = yn us the nth -last histori valu - n-mean predictor: p(n) = 1 n · n i=1 yi us the mean valu of the n-last histori valu - n-linear regress predictor: p(n, t) = a·t+b us the linear regress valu from the last n histori valu where a, b ar calcul us linear regress with least squar fit under consider of the last n histori data. - n-distribut predictor: us a random valu from the frequenc distribut of the n last histori valu - n-mirror predictor: p(n) = 2 · h − yn us the mirror imag around the mean of all histori valu of the nth last histori valu the effici of our propos self-organis resourc  alloc is assess by the resourc load develop of each server over the simul as well as the total resourc load develop cumul over all share resourc. resourc load for each server ar calcul us equat 1 as the sum of the resourc consumpt of all current execut agent at thi server. the total resourc load of the system is calcul as the sum of the resourc load of all resourc. the self-organis resourc alloc algorithm ha  random element. therefor, the present result show mean valu and standard deriv calcul over 100 repeat experi. 5.1 experiment setup the follow paramet have an impact on the resourc alloc process. we give an overview of the paramet and a short descript. - agent: the number of agent involv in the resourc alloc. thi number vari in the experi  between 650 and 750 depend on the total amount of avail system resourc. - resourc consumpt: each task consum server  resourc for it execut. the resourc consumpt is assign randomli to each task prior to it alloc from an interv. resourc consumpt is specifi in resourc unit which correspond to real world metric like memori or processor cycl. - agent home server: all agent ar locat on a home agent server. the resourc of those server not  consid in our simul and doe not affect the resourc alloc perform. - server resourc: experi us server with  differ amount of avail share resourc. the first  experi is conduct in a static server environ that provid the same amount of share resourc, while the other experi vari the avail server resourc dure the simul. the total amount of resourc remain constant in both experi. - execut time: the execut time of a task for the execut, independ from the execut platform. for thi time the task consum the assign amount of server resourc. thi paramet is randomli assign befor the execut. - task creation time: the time befor the next task is creat after success or unsuccess complet. thi paramet influenc the ag of the histor  inform about resourc and ha a major influenc on the length of the initi adapt phase. thi  paramet is randomli assign after the task wa  complet. 5.2 experiment result thi section show result from select experi that demonstr the perform of our propos resourc  alloc mechan. the first experi show the  perform in a stabl environ where a number of agent alloc task to server that provid a constant amount of resourc. the second experi wa conduct in a  dynam server environ with a constant number of agent. the first experi show our model in a stabl 3-server environ that provid a total amount of 7000 resourc unit. the resourc capac of each server remain constant over the experi. we us 650 agent with the  paramet of the execut time between 1 and 15 time unit and a task creation time in the interv [0 − 30] time unit. the task"s resourc consumpt is randomli assign from the interv [1 − 45] resourc unit. figur 4 show the result from 100 repetit of thi experi. figur 4(a) show that the total amount of provid resourc is larger than the demand of resourc in averag. at the begin of the experi, all agent alloc their task randomli at on of the avail server and explor the avail capac and resourc utilis for about 150 time unit. thi  initi explor phase show that the averag resourc load of each server ha a similar level. thi caus an overload situat at server 1 becaus of it low capac of share resourc, and a larg amount of free resourc on server 2. agent that alloc task to server 1 detect the  overload situat and explor randomli other avail server. thei find free resourc at server 2. after learn period, the agent have self-organis themselv in thi stabl  environ and find a stabl solut for the alloc of the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 79 0 250 500 750 1,000 1,250 1,500 time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 resourceload (a) total resourc load  versu total share resourc  capac 0 250 500 750 1,000 1,250 1,500 time 0 500 1,000 1,500 2,000 2,500 resourceload (b) resourc load server 0 0 250 500 750 1,000 1,250 1,500 time 0 500 1,000 1,500 2,000 2,500 resourceload (c) resourc load server 1 0 250 500 750 1,000 1,250 1,500 time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 resourceload (d) resourc load server 2 figur 4: result of experi 1 in a static 3-server environ averag over 100 repetit. all task. the standard deviat of the resourc load ar small for each server, which indic that our distribut approach find stabl solut in almost everi run. thi experi us algorithm 2 for the select of the activ server. we also ran the same experi with the most free resourc select mechan to select the activ server. the resourc alloc for each server is similar. the absolut amount of free resourc per server is almost the same. experi 2 wa conduct in a dynam 3-server  environ with a number of 750 agent. the amount of resourc of server 0 and server 1 chang period, while the total amount of avail resourc remain constant. server 0 ha an initi capac of 1000 unit, server 1 start with a capac of 4000 unit. the chang in capac start after 150 time unit, which is approxim the end of the learn phase. figur 5 (b, c, d) show the behaviour of our self-organis resourc alloc in thi environ. all agent us the determinist most free resourc select mechan to select the activ server. it can bee seen in fig. 5(b) and 5(c) that the number of alloc resourc to server 0 and server 1 chang period with the amount of provid resourc. thi show that agent can sens  avail resourc in thi dynam environ and ar abl to adapt to those chang. the resourc load develop of server 2 (see fig. 5(d)) show a period chang becaus some agent try to be alloc task to thi server in case their previous favour server reduc the amount of share resourc. the total resourc load of all share resourc is constant over the experi, which indic the all agent alloc their task to on of the share resourc (comp. fig. 4(a)). 6. conclus and futur work in thi paper a self-organis distribut resourc  alloc techniqu for multi-agent system wa present. we enabl agent to select the execut platform for their task themselv befor each execut at run-time. in our  approach the agent compet for an alloc at on of the 0 500 1,000 1,500 2,000 time 0 2,500 5,000 7,500 resourceload (a) total resourc load  versu total share resourc  capac 0 500 1,000 1,500 2,000 time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 resourceload (b) resourc load server 1 0 500 1,000 1,500 2,000 time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 resourceload (c) resourc load server 2 0 500 1,000 1,500 2,000 time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 resourceload (d) resourc load server 3 figur 5: result of experi 2 in a dynam server environ averag over 100 repetit. avail share resourc. agent sens their server  environ and adopt their action to compet more effici in the new creat environ. thi process is adapt and ha a strong feedback as alloc decis influenc  indirectli decis of other agent. the resourc alloc is a pure emerg effect. our mechan demonstr that resourc alloc can be done by the effect  competit of individu and autonom agent. neither do thei need coordin or inform from a higher author nor is an addit direct commun between agent requir. thi mechan wa inspir by induct reason and bound ration principl which enabl the agent"  adapt of their strategi to compet effect in a  dynam environ. in the case of a server becom  unavail, the agent can adapt quickli to thi new situat by explor new resourc or remain at the home server if an alloc is not possibl. especi in dynam and scalabl environ such as grid system, a robust and distribut mechan for resourc alloc is requir. our self-organis resourc alloc approach wa  evalu with a number of simul experi in a dynam environ of agent and server resourc. the present result for thi new approach for strateg migrat  optimis ar veri promis and justifi further investig in a real multi-agent system environ. it is a distribut, scalabl and easi-to-understand  polici for the regul of suppli and demand of resourc. all control is implement in the agent. a simpl decis mechan base on differ belief of the agent creat an emerg behaviour that lead to effect resourc  alloc. thi approach can be easili extend or support by resourc balanc/queu mechan provid by  resourc. our approach adapt to chang in the environ but it is not evolutionari. there is no discoveri of new strategi by the agent. the set of predictor stai the same over the whole life. in fact, we believ that thi could further improv the system"s behaviour over a long term period and could be 80 the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) investig in the futur. the evolut would be veri slow and select and will not influenc the system behaviour in a short-term period that is cover by our experiment result. in the near futur we will investig if an automat  adapt of the decai rate of histor inform our  algorithm is possibl and can improv the resourc alloc perform. the decai rate is current predefin and must be alter manual depend on the environ. a larg number of share resourc requir older histor inform to avoid a too frequent resourc explor. in contrast, a dynam environ with vari capac requir more up-to-date inform to make more reliabl predict. we ar awar of the long learn phase in environ with a larg number of share resourc known by each agent. in the case that more resourc ar request by agent than share resourc ar provid by all server, all agent will randomli explor all known server. thi  process of acquir resourc load inform about all server can take a long time in the case that no not enough share resourc for all task ar provid. in the worst case, by the time for explor all server, histor inform of some server could be alreadi outdat and the explor start again. in thi situat, it is difficult for an agent to effici gather histor inform about all remot server. thi issu need more investig in the futur. 7. refer [1] g. allen, w. benger, t. dramlitsch, t. goodal, h.-c. hege, g. lanfermann, a. merzki, t. radk, e. seidel, and j. shalf. cactu tool for grid applic. in cluster comput, volum 4, page 179-188, hingham, ma, usa, 2001. kluwer academ publish. [2] w. b. arthur. induct reason and bound ration. american econom review (paper and proceed), 84(2):406-411, mai 1994. [3] t. bourk. server load balanc. o"reilli media, 1 edit, august 2001. [4] r. buyya. econom-base distribut resourc manag and schedul for grid comput. phd thesi, monash univers, melbourn, australia, mai 2002. [5] r. buyya, d. abramson, j. giddi, and h. stocking. econom model for resourc manag and schedul in grid comput. special issu on grid comput environ of the journal concurr and comput, 13-15(14):1507-1542, 2002. [6] r. buyya, s. chapin, and d. dinucci. architectur model for resourc manag in the grid. in proceed of the first intern workshop on grid comput, page 18-35. springer lnc, 2000. [7] t. l. casav and j. g. kuhl. a taxonomi of schedul in gener-purpos distribut comput system. ieee transact on softwar engin, 14(2):141-154, februari 1988. [8] d. challet and y. zhang. emerg of cooper and organ in an evolutionari game. physica a, 407(246), 1997. [9] k.-p. chow and y.-k. kwok. on load balanc for distribut multiag comput. in ieee transact on parallel and distribut system, volum 13, page 787- 801. ieee, august 2002. [10] s. h. clearwat. market-base control. a paradigm for distribut resourc alloc. world scientif, singapor, 1996. [11] c. fl¨us. capac plan of mobil agent system design effici intranet applic. phd thesi, universit¨at duisburg-essen (germani), feb. 2005. [12] i. foster and c. kesselman. globu: a metacomput infrastructur toolkit. intern journal of supercomput applic, 11(2):115-129, 1997. [13] j. frei, t. tannenbaum, i. foster, m. livni, and s. tueck. condor-g: a comput manag agent for multi-institut grid. cluster comput, 5(3):237-246, 2002. [14] a. galstyan, s. kolar, and k. lerman. resourc alloc game with chang resourc capac. in proceed of the second intern joint confer on autonom agent and multiag system, page 145 - 152, melbourn, australia, 2003. acm press, new york, ny, usa. [15] c. georgousopoulo and o. f. rana. combin state and model-base approach for mobil agent load balanc. in sac "03: proceed of the 2003 acm symposium on appli comput, page 878-885, new york, ny, usa, 2003. acm press. [16] g. mainland, d. c. park, and m. welsh. decentr adapt resourc alloc for sensor network. in proceed of the 2nd usenix symposium on network system design and implement(nsdi "05), mai 2005. [17] s. manvi, m. birj, and b. prasad. an agent-base resourc alloc model for comput grid. multiag and grid system - an intern journal, 1(1):17-27, 2005. [18] a. schaerf, y. shoham, and m. tennenholtz. adapt load balanc: a studi in multi-agent learn. in journal of artifici intellig research, volum 2, page 475-500, 1995. [19] t. schlegel, p. braun, and r. kowalczyk. toward autonom mobil agent with emerg migrat behaviour. in proceed of the fifth intern joint confer on autonom agent & multi agent system (aama 2006), hakod (japan), page 585-592. acm press, mai 2006. [20] w3c. web servic activ, 2002. http://www.w3.org/2002/ws - last visit 23.10.2006. [21] m. m. waldrop. complex: the emerg scienc at the edg of order and chao. simon & schuster, 1st edit, 1992. [22] r. wolsk, j. s. plank, j. brevik, and t. bryan. analyz market-base resourc alloc strategi for the comput grid. in intern journal of high perform comput applic, volum 15, page 258-281. sage scienc press, 2001. the sixth intl. joint conf. on autonom agent and multi-agent system (aama 07) 81 