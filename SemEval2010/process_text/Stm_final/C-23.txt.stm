implement of a dynam adjust mechan with effici replica select in data grid environ chao-tung yang i-hsien yang chun-hsiang chen shih-yu wang high-perform comput laboratori depart of comput scienc and inform engin tunghai univers taichung citi, 40704, taiwan r.o.c. ctyang@thu.edu.tw g932813@thu.edu.tw abstract the co-alloc architectur wa develop in order to enabl parallel download of dataset from multipl server. sever co-alloc strategi have been coupl and us to exploit rate differ among variou client-server link and to address dynam rate fluctuat by divid file into multipl block of equal size. howev, a major obstacl, the idl time of faster server have to wait for the slowest server to deliv the final block, make it import to reduc differ in finish time among replica server. in thi paper, we propos a dynam  coalloc scheme, name recurs-adjust co-alloc scheme, to improv the perform of data transfer in data grid. our approach reduc the idl time spent wait for the slowest server and decreas data transfer complet time. we also provid an effect scheme for reduc the cost of reassembl data block. categori and subject descriptor c.2.4 [distribut system]: distribut applic. h.3.5 [onlin inform servic]: data share, web-base servic. gener term manag, perform, design, experiment. 1. introduct data grid aggreg distribut resourc for solv larg-size dataset manag problem. most data grid applic execut simultan and access larg number of data file in the grid environ. certain data-intens scientif applic, such as high-energi physic, bioinformat applic and virtual astrophys observatori, entail huge amount of data that requir data file manag system to replic file and manag data transfer and distribut data access. the data grid infrastructur integr data storag devic and data manag servic into the grid environ, which consist of scatter comput and storag resourc, perhap locat in differ countri/region yet access to user [12]. replic popular content in distribut server is wide us in practic [14, 17, 19]. recent, larg-scale, data-share scientif commun such as those describ in [1, 5] us thi technolog to replic their larg dataset over sever site. download larg dataset from sever replica locat mai result in vari perform rate, becaus the replica site mai have differ architectur, system load, and network connect. bandwidth qualiti is the most import factor affect transfer between client and server sinc download speed ar limit by the bandwidth traffic congest in the link connect the server to the client. on wai to improv download speed is to determin the best replica locat us replica select techniqu [19]. thi method select the best server to provid optimum transfer rate becaus bandwidth qualiti can vari unpredict due to the share natur of the internet. anoth wai is to us co-alloc technolog [17] to download data. co-alloc of data transfer enabl the client to download data from multipl locat by establish multipl connect in parallel. thi can improv the perform compar to the singl-server case and allevi the internet congest problem [17]. sever co-alloc strategi were provid in previou work [17]. an idl-time drawback remain sinc faster server must wait for the slowest server to deliv it final block. therefor, it is import to reduc the differ in finish time among replica server. in thi paper, we propos a dynam co-alloc scheme base on co-alloc grid data transfer architectur call  recursiveadjust co-alloc scheme that reduc the idl time spent wait for the slowest server and improv data transfer perform [24]. experiment result show that our approach is superior to previou method and achiev the best overal perform. we also discuss combin cost and provid an effect scheme for reduc it. the remaind of thi paper is organ as follow. relat background review and studi ar present in section 2 and the co-alloc architectur and relat work ar introduc in section 3. in section 4, an effici replica select servic is propos by us. our research approach ar outlin in section 5, and experiment result and a perform evalu of our scheme ar present in section 6. section 7 conclud thi research paper. 2. background 2.1 data grid the data grid enabl the share, select, and connect of a wide varieti of geograph distribut comput and storag resourc for solv larg-scale data intens scientif applic (e.g., high energi physic, bioinformat applic, and astrophys virtual observatori). the term data grid tradition repres the network of distribut storag resourc, from archiv system to cach and databas, which ar link us a logic name space to creat global, persist identifi and provid uniform access mechan [4]. data grid [1, 2, 16] feder a lot of storag resourc. larg collect of measur or comput data ar emerg as import resourc in mani data intens applic. 2.1.1 replica manag replica manag involv creat or remov replica at a data grid site [19]. in other word, the role of a replica manag is to creat or delet replica, within specifi storag system. most often, these replica ar exact copi of the origin file, creat onli to har certain perform benefit. a replica manag typic maintain a replica catalog contain replica site address and the file instanc. the replica manag servic is respons for manag the replic of complet and partial copi of dataset, defin as collect of file. the replica manag servic is just on compon in a data grid environ that provid support for high-perform, data-intens applic. a replica or locat is a subset of a collect that is store on a particular physic storag system. there mai be multipl possibl overlap subset of a collect store on multipl storag system in a data grid. these grid storag system mai us a varieti of underli storag technolog and data movement protocol, which ar independ of replica manag. 2.1.2 replica catalog as mention abov, the purpos of the replica catalog is to provid map between logic name for file or collect and on or more copi of the object on physic storag system. the replica catalog includ option entri that describ individu logic file. logic file ar entiti with global uniqu name that mai have on or more physic instanc. the catalog mai option contain on logic file entri in the replica catalog for each logic file in a collect. a data grid mai contain multipl replica catalog. for exampl, a commun of research interest in a particular research topic might maintain a replica catalog for a collect of data set of mutual interest. it is possibl to creat hierarchi of replica catalog to impos a directori-like structur on relat logic collect. in addit, the replica manag can perform access control on entir catalog as well as on individu logic file. 2.1.3 replica select the purpos of replica select [16] is to select a replica from among the site which constitut a data grid [19]. the criteria of select depend on characterist of the applic. by us thi mechan, user of the data grid can easili manag replica of data set at their site, with better perform. much previou effort ha been devot to the replica select problem. the common process of replica select consist of three step: data prepar, preprocess and predict. then, applic can select a replica accord to it specif attribut. replica select is import to data-intens applic, and it can provid locat transpar. when a user request for access a data set, the system determin an appropri wai to deliv the replica to the user. 2.2 globu toolkit and gridftp the globu project [9, 11, 16] provid softwar tool collect call the globu toolkit that make it easier to build comput grid and grid-base applic. mani organ us the globu toolkit to build comput grid to support their applic. the composit of the globu toolkit can be pictur as three pillar: resourc manag, inform servic, and data manag. each pillar repres a primari compon of the globu toolkit and make us of a common foundat of secur. gram implement a resourc manag protocol, md implement an inform servic protocol, and gridftp implement a data transfer protocol. thei all us the gsi secur protocol at the connect layer [10, 11, 16, 13]. the globu allianc propos a common data transfer and access protocol call gridftp that provid secur, effici data movement in grid environ [3]. thi protocol, which extend the standard ftp protocol, provid a superset of the featur offer by the variou grid storag system current in us. in order to solv the appear problem, the data grid commun tri to develop a secur, effici data transport mechan and replica manag servic. gridftp is a reliabl, secur and effici data transport protocol which is develop as a part of the globu project. there is anoth kei technolog from globu project, call replica catalog [16] which is us to regist and manag complet and partial copi of data set. the replica catalog contain the map inform from a logic file or collect to on or more physic file. 2.3 network weather servic the network weather servic (nw) [22] is a gener and distribut monitor system for produc short-term perform forecast base on histor perform measur. the goal of the system is to dynam character and forecast the perform deliver at the applic level from a set of network and comput resourc. a typic instal involv on nw_nameserv, on or more nw_memori (which mai resid on differ machin), and an nw_sensor run on each machin with resourc which ar to be monitor. the system includ sensor for end-to-end tcp/ip perform (bandwidth and latenc), avail cpu percentag, and avail non-page memori. 798 2.4 sysstat util the sysstat [15] util ar a collect of perform monitor tool for the linux os. the sysstat packag incorpor the sar, mpstat, and iostat command. the sar command collect and report system activ inform, which can also be save in a system activ file for futur inspect. the iostat command report cpu statist and i/o statist for tty devic and disk. the statist report by sar concern i/o transfer rate, page activ, process-relat activ, interrupt, network activ, memori and swap space util, cpu util, kernel activ, and tty statist, among other. uniprocessor (up) and symmetr multiprocessor (smp) machin ar fulli support. 3. co-alloc architectur and relat work the co-alloc architectur propos in [17] consist of three main compon: an inform servic, a broker/co-alloc, and local storag system. figur 1 show the co-alloc of grid data transfer, which is an extens of the basic templat for resourc manag [7] provid by globu toolkit. applic specifi the characterist of desir data and pass the attribut descript to a broker. the broker queri avail resourc and get replica locat from inform servic [6] and replica manag servic [19], and then get a list of physic locat for the desir file. figur 1. data grid co-alloc architectur [17] the candid replica locat ar pass to a replica select servic [19], which wa present in a previou work [23]. thi replica select servic provid estim of candid transfer perform base on a cost model and choos appropri amount to request from the better locat. the co-alloc agent then download the data in parallel from the select server. in these research, gridftp [1, 11, 16] wa us to enabl parallel data transfer. gridftp is a high-perform, secur, reliabl data transfer protocol optim for high-bandwidth  widearea network. among it mani featur ar secur, parallel stream, partial file transfer, third-parti transfer, and reusabl data channel. it partial file transfer abil allow file to be retriev from data server by specifi the start and end offset of file section. data grid consist of scatter comput and storag resourc locat in differ countri/region yet access to user [8]. in thi studi we us the grid middlewar globu toolkit [16] as the data grid infrastructur. the globu toolkit provid solut for such consider as secur, resourc manag, data manag, and inform servic. on of it primari compon is md [6, 11, 16, 25], which is design to provid a standard mechan for discov and publish resourc statu and configur inform. it provid a uniform and flexibl interfac for data collect by lower-level inform provid in two mode: static (e.g., os, cpu type, and system architectur) and dynam data (e.g., disk avail, memori avail, and load). and it us gridftp [1, 11, 16], a reliabl, secur, and effici data transport protocol to provid effici manag and transfer of terabyt or petabyt of data in a wide-area, distribut-resourc environ. as dataset ar replic within grid environ for reliabl and perform, client requir the abil to discov exist data replica, and creat and regist new replica. a replica locat servic (rl) [4] provid a mechan for discov and regist exist replica. sever predict metric have been develop to help replica select. for instanc, vazhkudai and schopf [18, 20, 21] us past data transfer histori to estim current data transfer throughput. in our previou work [23, 24], we propos a replica select cost model and a replica select servic to perform replica select. in [17], the author propos co-alloc architectur for co-alloc grid data transfer across multipl connect by exploit the partial copi featur of gridftp. it also provid brute-forc, histori-base, and dynam load balanc for alloc data block. brute-forc co-alloc: brute-forc co-alloc work by divid the file size equal among avail flow. it doe not address the bandwidth differ among the variou client-server link. histori-base co-alloc: the histori-base  coalloc scheme keep block size per flow proport to predict transfer rate. conserv load balanc: on of their dynam  coalloc is conserv load balanc. the conserv load balanc dynam co-alloc strategi divid request dataset into k disjoint block of equal size. avail server ar assign singl block to deliv in parallel. when a server finish deliv a block, anoth is request, and so on, till the entir file is download. the load on the co-alloc flow ar automat adjust becaus the faster server will deliv more quickli provid larger portion of the file. aggress load balanc: anoth dynam  coalloc strategi, present in [17], is the aggress load balanc. the aggress load balanc dynam co-alloc strategi present in [17] add function that chang block size de-liveri by: (1) progress increas the amount of data request from faster server, and (2) reduc the amount of data request from slower server or ceas to request data from them altogeth. the co-alloc strategi describ abov do not handl the shortcom of faster server have to wait for the slowest server to deliv it final block. in most case, thi wast much time and decreas overal perform. thu, we propos an effici approach call recurs-adjust co-alloc and base 799 on a co-alloc architectur. it improv dynam co-alloc and reduc wait time, thu improv overal transfer perform. 4. an effici replica select servic we construct a replica select servic to enabl client to select the better replica server in data grid environ. see below for a detail descript. 4.1 replica select scenario our propos replica select model is illustr in [23], which show how a client identifi the best locat for a desir replica transfer. the client first login in at a local site and execut the data grid platform applic, which check to see if the file ar avail at the local site. if thei ar present at the local site, the applic access them immedi; otherwis, it pass the logic file name to the replica catalog server, which return a list of physic locat for all regist copi. the applic pass thi list of replica locat to a replica select server, which identifi the storag system destin locat for all candid data transfer oper. the replica select server send the possibl destin locat to the inform server, which provid perform measur and predict of the three system factor describ below. the replica select server choos better replica locat accord to these estim and return locat inform to the transfer applic, which receiv the replica through gridftp. when the applic finish, it return the result to the user. 4.2 system factor determin the best databas from mani with the same replic is a signific problem. in our model, we consid three system factor that affect replica select: network bandwidth: thi is on of the most signific data grid factor sinc data file in data grid environ ar usual veri larg. in other word, data file transfer time ar tightli depend on network bandwidth situat. becaus network bandwidth is an unstabl dynam factor, we must measur it frequent and predict it as accur as possibl. the network weather servic (nw) is a power toolkit for thi purpos. cpu load: grid platform consist of number of heterogen system, built with differ system architectur, e.g., cluster platform, supercomput, pc. cpu load is a dynam system factor, and a heavi system cpu load will certainli affect data file download process from the site. the measur of it is done by the globu toolkit / md. i/o state: data grid node consist of differ heterogen storag system. data file in data grid ar huge. if the i/o state of a site that we wish to download file from is veri busi, it will directli affect data transfer perform. we measur i/o state us sysstat [15] util. 4.3 our replica select cost model the target function of a cost model for distribut and replic data storag is the inform score from the inform servic. we list some influenc factor for our cost model in the preced section. howev, we must express these factor in mathemat notat for further analysi. we assum node i is the local site the user or applic log in on, and node j possess the replica the user or applic want. the seven system paramet our replica select cost model consid ar: scorei-j: the score valu repres how effici a user or applic at node i can acquir a replica from node j bw jip : percentag of bandwidth avail from node i to node j; current bandwidth divid by highest theoret bandwidth bbw : network bandwidth weight defin by the data grid administr cpu jp : percentag of node j cpu idl state wcpu : cpu load weight defin by the data grid administr oi jp / : percentag of node j i/o idl state wi/o : i/o state weight defin by the data grid administr we defin the follow gener formula us these system factor. oioi j cpucpu j bwbw jiji wpwpwpscore // (1) the three influenc factor in thi formula: wbw , wcpu , and wi/o describ cpu, i/o, and network bandwidth weight, which can be determin by data grid organ administr accord to the variou attribut of the storag system in data grid node sinc some storag equip doe not affect cpu load. after sever experiment measur, we determin that network bandwidth is the most signific factor directli influenc data transfer time. when we perform data transfer us the gridftp protocol we discov that cpu and i/o status slightli affect data transfer perform. their respect valu in our data grid environ ar 80%, 10%, and 10%. 4.4 co-alloc cost analysi when client download dataset us gridftp co-alloc technolog, three time cost ar incur: the time requir for client authent to the gridftp server, actual data transmiss time, and data block reassembl time. authent time: befor a transfer, the client must load a globu proxi and authent itself to the gridftp server with specifi user credenti. the client then establish a control channel, set up transfer paramet, and request data channel creation. when the channel ha been establish, the data begin flow. transmiss time: transmiss time is measur from the time when the client start transfer to the time when all transmiss job ar finish, and it includ the time 800 requir for reset data channel between transfer request. data pathwai need be open onli onc and mai handl mani transfer befor be close. thi allow the same data pathwai to be us for multipl file transfer. howev, data channel must be explicitli reset between transfer request. thi is less time-costli. combin time: co-alloc architectur exploit the partial copi featur of the gridftp data movement tool to enabl data transfer across multipl connect. with partial file transfer, file section can be retriev from data server by specifi onli the section start and end offset. when these file section ar deliv, thei mai need to be reassembl; the reassembl oper incur an addit time cost. 5. dynam co-alloc strategi dynam co-alloc, describ abov, is the most effici approach to reduc the influenc of network variat between client and server. howev, the idl time of faster server await the slowest server to deliv the last block is still a major factor affect overal effici, which conserv load balanc and aggress load balanc [17] cannot effect avoid. the approach propos in the present paper, a dynam alloc mechan call recurs-adjust  coalloc can overcom thi, and thu, improv data transfer perform. 5.1 recurs-adjust co-alloc recurs-adjust co-alloc work by continu adjust each replica server"s workload to correspond to it  realtim bandwidth dure file transfer. the goal is to make the expect finish time of all server the same. as figur 2 show, when an appropri file section is first select, it is divid into proper block size accord to the respect server bandwidth. the co-alloc then assign the block to server for transfer. at thi moment, it is expect that the transfer finish time will be consist at e(t1). howev, sinc server bandwidth mai fluctuat dure segment deliveri, actual complet time mai be dissimilar (solid line, in figur 2). onc the quickest server finish it work at time t1, the next section is assign to the server again. thi allow each server to finish it assign  workload by the expect time at e(t2). these adjust ar repeat until the entir file transfer is finish. server 1 server 2 server 3 round 1 round 2 e(t1) e(t2)t1 file a section 1 section 2 ... ... ... figur 2. the adjust process the recurs-adjust co-alloc process is illustr in figur 3. when a user request file a, the replica select servic respond with the subset of all avail server defin by the maximum perform matrix. the co-alloc servic get thi list of select replica server. assum n replica server ar select, si denot server i such that 1 i n. a connect for file download is then built to each server. the  recursiveadjust co-alloc process is as follow. a new section of a file to be alloc is first defin. the section size, sej, is: sej = unassignedfiles , (0 < < 1) (2) where sej denot the section j such that 1 j k, assum we alloc k time for the download process. and thu, there ar k section, while tj denot the time section j alloc. unassignedfiles is the portion of file a not yet distribut for download; initi, unassignedfiles is equal to the total size of file a. is the rate that determin how much of the section remain to be assign. figur 3. the recurs-adjust co-alloc process. in the next step, sej is divid into sever block and assign to n server. each server ha a real-time transfer rate to the client of bi, which is measur by the network weather servic (nw) [18]. the block size per flow from sej for each server i at time tj is: i n i ii n i iji zeunfinishsibbzeunfinishsis -)( 11 (3) where unfinishsizei denot the size of unfinish transfer block that is assign in previou round at server i. unfinishsizei is equal to zero in first round. ideal, depend to the real time bandwidth at time tj, everi flow is expect to finish it workload in futur. thi fulfil our requir to minim the time faster server must wait for the slowest server to finish. if, in some case, network variat greatli degrad transfer rate, unfinishsizei mai exce n i ii n i ij bbzeunfinishsis 11 *)( , which is the total block size expect to be transfer after tj. in such case, the co-alloc elimin the server in advanc and assign sej to other server. after alloc, all channel continu transfer data block. when a faster channel finish it assign data block, the co-alloc begin alloc an unassign section of file a again. the process of alloc data 801 block to adjust expect flow finish time continu until the entir file ha been alloc. 5.2 determin when to stop continu adjust our approach get new section from whole file by divid unassign file rang in each round of alloc. these unassign portion of the file rang becom smaller after each alloc. sinc adjust is continu, it would run as an endless loop if not limit by a stop condit. howev, when is it appropri to stop continu adjust? we provid two monitor criteria, leastsiz and expectfinishedtim, to enabl user to defin stop threshold. when a threshold is reach, the co-alloc server stop divid the remaind of the file and assign that remaind as the final section. the leastsiz criterion specifi the smallest file we want to process, and when the unassign portion of unassignedfiles drop below the leastsiz specif, divis stop. expectfinishedtim criterion specifi the remain time transfer is expect to take. when the expect transfer time of the unassign portion of a file drop below the time specifi by expectfinishedtim, file divis stop. the expect rest time valu is determin by: 1 n i ibfilesizeunassign (4) these two criteria determin the final section size alloc. higher threshold valu will induc fewer divis and yield lower co-alloc cost, which includ establish connect, negoti, reassembl, etc. howev, although the total  coalloc adjust time mai be lower, bandwidth variat mai also exert more influenc. by contrast, lower threshold valu will induc more frequent dynam server workload adjust and, in the case of greater network fluctuat, result in fewer differ in server transfer finish time. howev, lower valu will also increas co-alloc time, and henc, increas co-alloc cost. therefor, the internet environ, transfer file size, and co-alloc cost should all be consid in determin optimum threshold. 5.3 reduc the reassembl overhead the process of reassembl block after data transfer us  coalloc technolog result in addit overhead and decreas overal perform. the reassembl overhead is relat to total block size, and could be reduc by upgrad hardwar capabl or us better softwar algorithm. we propos an effici altern reassembl mechan to reduc the ad combin overhead after all block transmiss ar finish. it differ from the convent method in which the softwar start assembl after all block have been deliv by start to assembl block onc the first deliveri finish. of cours, thi make it necessari to maintain the origin split order. co-alloc strategi such as conserv load balanc and recurs-adjust co-alloc produc addit block dure file transfer and can benefit from enabl reassembl dure data transfer. if some block ar assembl in advanc, the time cost for assembl the block remain after all transfer finish can be reduc. 6. experiment result and analysi in thi section, we discuss the perform of our  recursiveadjust co-alloc strategi. we evalu four  coalloc scheme: (1) brute-forc (brute), (2) histori-base (histori), (3) conserv load balanc (conserv) and (4) recurs-adjust co-alloc (recurs). we analyz the perform of each scheme by compar their transfer finish time, and the total idl time faster server spent wait for the slowest server to finish deliv the last block. we also analyz the overal perform in the variou case. we perform wide-area data transfer experi us our gridftp gui client tool. we execut our co-alloc client tool on our testb at tunghai univers (thu), taichung citi, taiwan, and fetch file from four select replica server: on at provid univers (pu), on at li-zen high school (lz), on at hsiup institut of technolog school (hit), and on at da-li high school (dl). all these institut ar in taiwan, and each is at least 10 km from thu. figur 4 show our data grid testb. our server have globu 3.0.2 or abov instal. internet thu li-zen high school (lz) hitceleron 900 mhz 256 mb ram 60 gb hd amd athlon(tm) xp 2400+ 1024 mb ram 120 gb hd pentium 4 2.8 ghz 512 mb ram 80 gb hd pu da-li high school (dl) athlon mp 2000 mhz *2 1 gb ram 60 gb hd pentium 4 1.8 ghz 128 mb ram 40 gb hd pentium 4 2.5 ghz 512 mb ram 80 gb hd figur 4. our data grid testb in the follow experi, we set = 0.5, the leastsiz threshold to 10mb, and experi with file size of 10 mb, 50mb, 100mb, 500mb, 1000mb, 2000mb, and 4000mb. for comparison, we measur the perform of conserv load balanc on each size us the same block number. figur 5 show a snapshot of our gridftp client tool. thi client tool is develop by us java cog. it allow easier and more rapid applic develop by encourag collabor code reus and avoid duplic of effort among problem-solv environ, scienc portal, grid middlewar, and collabor pilot. tabl 1 show averag transmiss rate between thu and each replica server. these number were obtain by transfer file of 500mb, 1000mb, and 2000mb from a singl replica server us our gridftp client tool, and each number is an averag over sever run. tabl 1. gridftp end-to-end transmiss rate from thu to variou server server averag transmiss rate hit 61.5 mbp lz 59.5 mbp dl 32.1 mbp pu 26.7 mbp 802 figur 5. our gridftp client tool we analyz the effect of faster server wait for the slowest server to deliv the last block for each scheme. figur 6(a) show total idl time for variou file size. note that our  recursiveadjust co-alloc scheme achiev signific perform improv over other scheme for everi file size. these result demonstr that our approach effici reduc the differ in server finish time. the experiment result shown in figur 6(b) indic that our scheme begin block reassembl as soon as the first block have been complet deliv reduc combin time, thu aid co-alloc strategi like conserv load balanc and  recursiveadjust co-alloc that produc more block dure data transfer. figur 7 show total complet time experiment result in a detail cost structur view. server were at pu, dl, and hit, with the client at thu. the first three bar for each file size denot the time to download the entir file from singl server, while the other bar show co-alloc download us all three server. our co-alloc scheme finish the job faster than the other co-alloc strategi. thu, we mai infer that the main gain our technolog offer ar lower transmiss and combin time than other co-alloc strategi. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 file size (mb) waittim(sec) brute3 histori3 conserv3 recurs3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 file size (mb) combinationtim(sec) brute3 histori3 conserv3 recurs3 figur 6. (a) idl time for variou method; server ar at pu, dl, and hit. (b) combin time for variou method; server ar at pu, dl, and hit. in the next experi, we us the recurs-adjust  coalloc strategi with variou set of replica server and measur overal perform, where overal perform is: total perform = file size/total complet time (5) tabl 2 list all experi we perform and the set of replica server us. the result in figur 8(a) show that us  coalloc technolog yield no improv for smaller file size such as 10mb. thei also show that in most case, overal perform increas as the number of co-alloc flow increas. we observ that for our testb and our co-alloc technolog, overal perform reach it highest valu in the rec3_2 case. howev, in the rec4 case, when we ad on flow to the set of replica server, the perform did not increas. on the contrari, it decreas. we can infer that the co-alloc effici reach satur in the rec3_2 case, and that addit flow caus addit overhead and reduc overal perform. thi mean that more download flow do not necessarili result in higher perform. we must choos appropri number of flow to achiev optimum perform. we show the detail cost structur view for the case of rec3_2 and the case of rec4 in figur 8(b). the detail cost consist of authent time, transfer time and combin time. 0 100 200 300 400 500 600 pu1 dl1 hit1 bru3 hi3 con3 rec3 pu1 dl1 hit1 bru3 hi3 con3 rec3 pu1 dl1 hit1 bru3 hi3 con3 rec3 pu1 dl1 hit1 bru3 hi3 con3 rec3 500 1000 1500 2000 file size (mb) completiontim(sec) authent time transmiss time combin time figur 7. complet time for variou method; server ar at pu, dl, and hit. tabl 2. the set of replica server for all case case server pu1 pu dl1 dl rec2 pu, dl rec3_1 pu, dl, lz rec3_2 pu, dl, hit rec4 pu, dl, hit, lz 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 file size (mb) overallperform(mbit) pu1 dl1 rec2 rec3_1 rec3_2 rec4 0 10 20 30 40 50 60 70 rec3_2 rec4 rec3_2 rec4 rec3_2 rec4 rec3_2 rec4 rec3_2 rec4 rec3_2 rec4 rec3_2 rec4 10 50 100 500 1000 1500 2000 file size (mb) overallperform(mbit) authent time transmiss time combin time figur 8. (a) overal perform for variou set of server. (b) detail cost structur view for the case of rec3_2 and the case of rec4. 7. conclus the co-alloc architectur provid a coordin agent for assign data block. a previou work show that the dynam co-alloc scheme lead to perform improv. howev, it cannot handl the idl time of faster server, which must wait for the slowest server to deliv it final block. we propos the recurs-adjust co-alloc scheme to improv data transfer perform us the co-alloc architectur in [17]. in thi approach, the workload of select replica server ar continu adjust dure data transfer, and we provid a function that enabl user to defin a final 803 block threshold, accord to their data grid environ. experiment result show the effect of our propos techniqu in improv transfer time and reduc overal idl time spent wait for the slowest server. we also discuss the re-combin cost and provid an effect scheme for reduc it. 8. refer [1] b. allcock, j. bester, j. bresnahan, a. chervenak, i. foster, c. kesselman, s. meder, v. nefedova, d. quesnel, and s. tueck, data manag and transfer in  highperform comput grid environ, parallel comput, 28(5):749-771, mai 2002. [2] b. allcock, j. bester, j. bresnahan, a. chervenak, i. foster, c. kesselman, s. meder, v. nefedova, d. quesnel, and s. tueck, secur, effici data transport and replica manag for high-perform data-intens comput, proc. of the eighteenth ieee symposium on mass storag system and technolog, pp. 13-28, 2001. [3] b. allcock, s. tueck, i. foster, a. chervenak, and c. kesselman. protocol and servic for distribut  dataintens scienc. acat2000 proceed, pp. 161-163, 2000. [4] a. chervenak, e. deelman, i. foster, l. gui, w. hoschek, a. iamnitchi, c. kesselman, p. kunszt, and m. ripeanu, giggl: a framework for construct scalabl replica locat servic, proc. of sc 2002, baltimor, md, 2002. [5] a. chervenak, i. foster, c. kesselman, c. salisburi, and s. tueck, the data grid: toward an architectur for the distribut manag and analysi of larg scientif dataset, journal of network and comput applic, 23:187-200, 2001. [6] k. czajkowski, s. fitzgerald, i. foster, and c. kesselman, grid inform servic for distribut resourc share, proc. of the tenth ieee intern symposium on high-perform distribut comput (hpdc-10"01), 181-194, august 2001. [7] k. czajkowski, i. foster, and c. kesselman. resourc  coalloc in comput grid, proc. of the eighth ieee intern symposium on high perform distribut comput (hpdc-8"99), august 1999. [8] f. donno, l. gaido, a. ghiselli, f. prelz, and m. sgaravatto, datagrid prototyp 1, terena network confer,  http://www.terena.nl/confer/tnc2002/paper/p5a2ghiselli.pdf, june 2002, [9] i. foster, c. kesselman, and s. tueck. the anatomi of the grid: enabl scalabl virtual organ. int. j. of supercomput applic and high perform comput, 15(3), pp. 200-222, 2001. [10] i. foster and c. kesselman, globu: a metacomput infrastructur toolkit, intl j. supercomput applic, 11(2), pp. 115-128, 1997. [11] global grid forum, http://www.ggf.org/ [12] w. hoschek, j. jaen-martinez, a. samar, h. stocking, and k. stocking, data manag in an intern data grid project, proc. of first ieee/acm intern workshop on grid comput - grid 2000, bangalor, india, decemb 2000. [13] ibm red book, introduct to grid comput with globu, ibm press, www.redbook.ibm.com/redbook/pdf/sg246895.pdf [14] h. stocking, a. samar, b. allcock, i. foster, k. holtman, and b. tiernei, file and object replic in data grid, journal of cluster comput, 5(3):305-314, 2002. [15] sysstat util home page, http://perso.wanadoo.fr/sebastien.godard/ [16] the globu allianc, http://www.globu.org/ [17] s. vazhkudai, enabl the co-alloc of grid data transfer, proc. of fourth intern workshop on grid comput, pp. 41-51, novemb 2003. [18] s. vazhkudai and j. schopf, us regress techniqu to predict larg data transfer, intern journal of high perform comput applic (ijhpca), 17:249-268, august 2003. [19] s. vazhkudai, s. tueck, and i. foster, replica select in the globu data grid, proc. of the 1st intern symposium on cluster comput and the grid (ccgrid 2001), pp. 106-113, mai 2001. [20] s. vazhkudai, j. schopf, predict sporad grid data transfer, proc. of 11th ieee intern symposium on high perform distribut comput (hpdc-11 ‘02), pp. 188-196, juli 2002. [21] s. vazhkudai, j. schopf, and i. foster, predict the perform of wide area data transfer, proc. of the 16th intern parallel and distribut process symposium (ipdp 2002), pp.34-43, april 2002, pp. 34 - 43. [22] r. wolski, n. spring, and j. hay, the network weather servic: a distribut resourc perform forecast servic for metacomput, futur gener comput system, 15(5-6):757-768, 1999. [23] chao-tung yang, chun-hsiang chen, kuan-ching li, and ching-hsien hsu, perform analysi of appli replica select technolog for data grid environ, pact 2005, lectur note in comput scienc, vol. 3603, pp. 278-287, springer-verlag, septemb 2005. [24] chao-tung yang, i-hsien yang, kuan-ching li, and  chinghsien hsu a recurs-adjust co-alloc scheme in data grid environ, ica3pp 2005 algorithm and architectur for parallel process, lectur note in comput scienc, vol. 3719, pp. 40-49, springer-verlag, octob 2005. [25] x. zhang, j. freschl, and j. schopf, a perform studi of monitor and inform servic for distribut system, proc. of 12th ieee intern symposium on high perform distribut comput (hpdc-12 ‘03), pp. 270-282, august 2003. 804 