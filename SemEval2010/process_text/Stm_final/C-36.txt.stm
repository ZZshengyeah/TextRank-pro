encrypt-enforc access control in dynam multi-domain publish/subscrib network lauri i.w. pesonen univers of cambridg, comput laboratori jj thomson avenu, cambridg, cb3 0fd, uk {first.last}@cl.cam.ac.uk david m. eyer univers of cambridg, comput laboratori jj thomson avenu, cambridg, cb3 0fd, uk {first.last}@cl.cam.ac.uk jean bacon univers of cambridg, comput laboratori jj thomson avenu, cambridg, cb3 0fd, uk {first.last}@cl.cam.ac.uk abstract publish/subscrib system provid an effici, event-base, wide-area distribut commun infrastructur. larg scale publish/subscrib system ar like to emploi  compon of the event transport network own by cooper, but independ organis. as the number of  particip in the network increas, secur becom an  increas concern. thi paper extend previou work to present and evalu a secur multi-domain publish/subscrib  infrastructur that support and enforc fine-grain access control over the individu attribut of event type. kei refresh allow us to ensur forward and backward secur when event broker join and leav the network. we  demonstr that the time and space overhead can be minimis by care consider of encrypt techniqu, and by the us of cach to decreas unnecessari decrypt. we show that our approach ha a smaller overal  commun overhead than exist approach for achiev the same degre of control over secur in publish/subscrib network. categori and subject descriptor c.2.4 [comput-commun network]:  distribut system-distribut applic gener term secur, perform 1. introduct publish/subscrib is well suit as a commun  mechan for build internet-scale distribut event-driven  applic. much of it capac for scale in the number of particip come from it decoupl of publish and subscrib by place an asynchron event deliveri  servic between them. in truli internet-scale publish/subscrib system, the event deliveri servic will includ a larg set of interconnect broker node span a wide geograph (and thu network) area. howev, publish/subscrib system that do span a wide  geograph area ar like to also span multipl administr domain, be thei independ administr domain insid a singl organis, multipl independ organis, or a combin of the two. while the commun capabl of publish/subscrib system ar well prove, span multipl administr domain is like to requir address secur  consider. as secur and access control ar almost the  antithesi of decoupl, rel littl publish/subscrib research ha focus on secur so far. our overal research aim is to develop internet-scale  publish/subscrib network that provid secur, effici  deliveri of event, fault-toler and self-heal in the deliveri infrastructur, and a conveni event interfac. in [12] pesonen et al. propos a multi-domain,  capabilitybas access control architectur for publish/subscrib  system. the architectur provid a mechan for  authoris event client to publish and subscrib to event type. the privileg of the client ar check by the local broker that the client connect to in order to access the publish/ subscrib system. the approach implement access control at the edg of the broker network and assum that all  broker can be trust to enforc the access control polici  correctli. ani malici, compromis or unauthoris broker is free to read and write ani event that pass through it on their wai from the publish to the subscrib. thi might be accept in a rel small system deploi insid a singl organis, but it is not appropri in a multi-domain environ in which organis share a common infrastructur. we propos enforc access control within the broker  network by encrypt event content, and that polici dictat control over the necessari encrypt kei. with encrypt event content onli those broker that ar authoris to  ac104 cess the encrypt kei ar abl to access the event content (i.e. publish, subscrib to, or filter). we effect move the enforc of access control from the broker to the encrypt kei manag. we expect that access control would need to be enforc in a multi-domain publish/subscrib system when  multipl organis form a share publish/subscrib system yet run multipl independ applic. access control might also be need when a singl organis consist of multipl sub-domain that deliv confidenti data over the organis-wide publish/subscrib system. both case requir access control becaus event deliveri in a dynam publish/subscrib infrastructur base on a share broker network mai well lead to event be rout through  unauthoris domain along their path from publish to  subscrib. there ar two particular benefit to share the publish/ subscrib infrastructur, both of which relat to the  broker network. first, share broker will creat a physic larger network that will provid greater geograph reach. second, increas the inter-connect of broker will  allow the publish/subscrib system to provid higher  faulttoler. figur 1 show the multi-domain publish/subscrib network we us as an exampl throughout thi paper. it is base on the unit kingdom polic forc, and we show three particular sub-domain: metropolitan polic domain. thi domain contain a set of cctv camera that publish inform about the movement of vehicl around the london area. we have includ detect smith as a subscrib in thi domain. congest charg servic domain. the charg that ar levi on the vehicl that have pass through the london congest charg zone each dai ar issu by system within thi domain. the sourc  numberpl recognit data come from the camera in the metropolitan polic domain. the fact that the cc ar onli authoris to read a subset of the vehicl event data will exercis some of the kei featur of the  enforc publish/subscrib system access control  present in thi paper. pito domain. the polic inform technolog  organis (pito) is the centr from which polic data standard ar manag. it is the event type owner in thi particular scenario. encrypt protect the confidenti of event should thei be transport through unauthoris domain. howev  encrypt whole event mean unauthoris broker cannot make effici rout decis. our approach is to appli encrypt to the individu  attribut of event. thi wai our multi-domain access  control polici work at a finer granular - publish and  subscrib mai be authoris access to a subset of the avail attribut. in case where non-encrypt event ar us for rout, we can reduc the total number of event sent through the system without reveal the valu of sensit attribut. in our exampl scenario, the congest charg servic would onli be authoris to read the numberpl field of vehicl sight - the locat attribut would not be  decrypt. we thu preserv the privaci of motorist while still allow the cc to do it job us the share  publish/subscrib infrastructur. let us assum that a metropolitan polic servic detect is investig a crime and she is interest in sight of a specif vehicl. the detect get a court order that authoris her to subscrib to numberpl event of the specif numberpl relat to her case. current publish/subscrib access control system enforc  secur at the edg of the broker network where client  connect to it. howev thi approach will often not be  accept in internet-scale system. we propos enforc  secur within the broker network as well as at the edg that event client connect to, by encrypt event content.  public will be encrypt with their event type specif  encrypt kei. by control access to the encrypt kei, we can control access to the event type. the propos  approach allow event broker to rout event even when thei have access onli to a subset of the potenti encrypt kei. we introduc decentralis publish/subscrib system and relev cryptographi in section 2. in section 3 we present our model for encrypt event content on both the event and the attribut level. section 4 discuss manag  encrypt kei in multi-domain publish/subscrib system. we analyt evalu the perform of our propos in section 5. final section 6 discuss relat work in secur publish/subscrib system and section 7 provid conclud remark. 2. background in thi section we provid a brief introduct to  decentralis publish/subscrib system. we indic our  assumpt about multi-domain publish/subscrib system, and describ how these assumpt influenc the develop we have made from our previous publish work. 2.1 decentralis publish/subscrib system a publish/subscrib system includ publish, subscrib, and an event servic. publish publish event, subscrib subscrib to event of interest to them, and the event  servic is respons for deliv publish event to all  subscrib whose interest match the given event. the event servic in a decentralis publish/subscrib  system is distribut over a number of broker node. togeth these broker form a network that is respons for  maintain the necessari rout path from publish to  subscrib. client (publish and subscrib) connect to a local broker, which is fulli trust by the client. in our  discuss we refer to the client host broker as publish host broker (phb) or subscrib host broker (shb) depend on whether the connect client is a publish or 105 ib shb sub pub pub sub sub ib phb ib ib phb ib ib ib ib shb shb ibib ib ib ib ib ib ibib ib to ib ib ib metropolitan polic domain congest charg servic domain pito domain detect smith camera 1 camera 2 bill offic statist offic sub subscrib shb subscrib host broker pub publish phb publish host broker to type owner ib intermedi broker kei figur 1: an overal view of our multi-domain publish/subscrib deploy a subscrib, respect. a local broker is usual either part of the same domain as the client, or it is own by a servic provid trust by the client. a broker network can have a static topolog (e.g. siena [3] and gryphon [14]) or a dynam topolog (e.g. scribe [4] and herm [13]). our propos approach will work in both case. a static topolog enabl the system administr to build trust domain and in that wai improv the  effici of rout by avoid unnecessari encrypt (see sect. 3.4), which is veri difficult with a dynam topolog. on the other hand, a dynam topolog allow the broker network to dynam re-balanc itself when broker join or leav the network either in a control fashion or as a result of a network or node failur. our work is base on the herm system. herm is a content-base publish/subscrib middlewar that includ strong event type support. in other word, each public is an instanc of a particular predefin event type.  public ar type check at the local broker of each publish. our attribut level encrypt scheme assum that event ar type. herm us a structur overlai network as a transport and therefor ha a dynam topolog. a herm public consist of an event type identifi and a set of attribut valu pair. the type identifi is the sha-1 hash of the name of the event type. it is us to rout the public through the event broker network. it conveni hide the type of the public, i.e. broker ar prevent from see which event ar flow through them unless thei ar awar of the specif event type name and identifi. 2.2 secur event type pesonen et al. introduc secur event type in [11], which can have their integr and authent confirm by  check their digit signatur. a us side effect of secur event type ar their global uniqu event type and  attribut name. these name can be refer to by access control polici. in thi paper we us the secur name of the event type or attribut to refer to the encrypt kei us to encrypt the event or attribut. 2.3 capabl-base access control pesonen et al. propos a capabl-base access control architectur for multi-domain publish/subscrib system in [12]. the model treat event type as resourc that  publish, subscrib, and event broker want to access. the event type owner is respons for manag access control for an event type by issu simpl public kei  infrastructur (spki) authoris certif that grant the holder access to the specifi event type. for exampl, authoris publish will have been issu an authoris certif that specifi that the publish, identifi by public kei, is authoris to publish instanc of the event type specifi in the certif. we leverag the abov mention access control mechan in thi paper by control access to encrypt kei us the same authoris certif. that is, a publish who is authoris to publish a given event type, is also authoris 106 to access the encrypt kei us to protect event of that type. we discuss thi in more detail in sect. 4. 2.4 threat model the goal of the propos mechan is to enforc access control for authoris particip in the system. in our case the first level of access control is appli when the  particip tri to join the publish/subscrib network.  unauthoris event broker ar not allow to join the broker network. similarli unauthoris event client ar not  allow to connect to an event broker. all the connect in the broker network between event broker and event client utilis transport layer secur (tl) [5] in order to  prevent unauthoris access on the transport layer. the architectur of the publish/subscrib system mean that event client must connect to event broker in order to be abl to access the publish/subscrib system. thu we  assum that these client ar not a threat. the event client reli complet on the local event broker for access to the broker network. therefor the event client is unabl to  access ani event without the assist of the local broker. the broker on the other hand ar abl to analys all event in the system that pass through them. a broker can  analys both the event traffic as well as the number and name of attribut that ar popul in an event (in the case of attribut level encrypt). there ar viabl approach to prevent traffic analysi by insert random event into the event stream in order to produc a uniform traffic  pattern. similarli attribut content can be pad to a  standard length in order to avoid leak inform to the adversari. while traffic analysi is an import concern we have not address it further in thi paper. 3. encrypt event content we propos enforc access control in a decentralis broker network by encrypt the content of publish event and control access to the encrypt kei. effect we move the respons for access control from the broker network to the kei manag. it is assum that all client have access to a broker that thei can trust and that is authoris to access the event  content requir by the client. thi allow us to implement the event content encrypt within the broker network without involv the client. by deleg the encrypt task to the broker, we lower the number of node requir to have access to a given encrypt kei1 . the benefit ar three-fold: i) fewer node handl the confidenti encrypt kei so there is a smaller chanc of the kei be disclos; ii) kei refresh involv fewer node which mean that the kei manag algorithm will incur smaller  commun and process overhead to the publish/subscrib  system; and iii) the local broker will decrypt an event onc and deliv it to all subscrib, instead of each subscrib 1 the encrypt kei ar chang over time in respons to broker join or leav the network, and period to reduc the amount of time ani singl kei is us. thi is discuss in sect. 4.2 have to decrypt the same event. deleg encrypt task to the local broker is appropri, becaus encrypt is a middlewar featur us to enforc access control within the middlewar system. if applic need to handl  encrypt data in the applic layer, thei ar free to publish encrypt data over the publish/subscrib system. we can implement encrypt either at the event level or the attribut level. event encrypt is simpler, requir fewer kei, fewer independ cryptograph oper, and thu is usual faster. attribut encrypt enabl access control at the attribut level, which mean that we have a more express and power access control mechan, while usual incur a larger perform penalti. in thi section we discuss encrypt event content both at the event level and the attribut level; avoid leak  inform to unauthoris broker by encrypt  subscript filter; avoid unnecessari encrypt between  authoris broker; and final, how event content encrypt wa implement in our prototyp. note that sinc no  publish/subscrib client is ever given access to encrypt kei, ani encrypt perform by the broker is necessarili  complet transpar to all client. 3.1 event encrypt in event encrypt all the event attribut ar encrypt as a singl block of plaintext. the event type identifi is left intact (i.e. in plaintext) in order to facilit event rout in the broker network. the global uniqu event type identifi specifi the  encrypt kei us to encrypt the event content. each event type in the system will have it own individu encrypt kei. kei ar refresh, as discuss in sect. 4.2. while in transit the event will consist of a tupl  contain the type identifi, a public timestamp, ciphertext, and a messag authent tag: <type id, timestamp, cipher text, authent tag>. event broker that ar authoris to access the event, and thu have access to the encrypt kei, can decrypt the event and implement content-base rout. event broker that do not have access to the encrypt kei will be forc to rout the event base onli on it type. that is, thei will not be abl to make intellig decis about whether event need not be transmit down their outgo link. event encrypt result in on encrypt at the publish host broker, and on decrypt at each filter  intermedi broker and subscrib host broker that the event pass through, regardless of the number of attribut. thi result in a signific perform advantag compar to attribut encrypt. 3.2 attribut encrypt in attribut encrypt each attribut valu in an event is  encrypt separ with it own encrypt kei. the  encrypt kei is identifi by the attribut"s global uniqu  identifi (the global uniqu event identifi defin a  namespac insid which the attribut identifi is a fulli qualifi name). 107 the event type identifi is left intact to facilit event  rout for unauthoris broker. the attribut identifi ar also left intact to allow authoris broker to decrypt the attribut valu with the correct kei. broker that ar  authoris to access some of the attribut in an event, can implement content-base rout over the attribut that ar access to them. an attribut encrypt event in transit consist of the event type identifi, a public timestamp, and a set of  attribut tupl: <type id, timestamp, attribut >.  attribut tupl consist of an attribut identifi, ciphertext, and a messag authent tag: <attr id, ciphertext, authent tag>. the attribut identifi is the sha-1 hash of the attribut name us in the event type definit. us the attribut identifi in the publish event instead of the attribut name prevent unauthoris parti from learn which attribut ar includ in the public. compar with event encrypt, attribut encrypt  usual result in larger process overhead, becaus each  attribut is encrypt separ. in the encrypt process the initialis of the encrypt algorithm take a  signific portion of the total run time of the algorithm. onc the algorithm is initialis, increas the amount of data to be encrypt doe not affect the run time veri much. thi dispar is emphasis in attribut  encrypt, where an encrypt algorithm must be initialis for each attribut separ, and the amount of data encrypt is rel small. as a result attribut encrypt incur larger process overhead when compar with event  encrypt which can be clearli seen from the perform result in sect. 5. the advantag of attribut encrypt is that the type owner is abl to control access to the event type at the attribut level. the event type owner can therefor allow client to have differ level of access to the same event type. also, attribut level encrypt enabl content-base rout in case where an intermedi broker ha access onli to some of the attribut of the event, thu reduc the overal  impact of event deliveri on the broker network. therefor the choic between event and attribut encrypt is a trade-off between express and perform, and depend on the requir of the distribut applic. the express provid by attribut encrypt can be emul by introduc a new event type for each group of subscrib with the same authoris. the publish would then publish an instanc of each of these type  instead of publish just a combin event. for exampl, in our london polic network, the congest control camera would have to publish on event for the cc and anoth for the detect. thi approach could becom difficult to  manag if the attribut have a varieti of secur properti, sinc a larg number of event type would be requir and polici and subscript mai chang dynam. thi approach creat a larg number of extra event that must be rout through the network, as is shown in sect. 5.3. 3.3 encrypt subscript in order to fulli protect the confidenti of event content we must also encrypt subscript. encrypt  subscript guarante: i) that onli authoris broker ar abl to submit subscript to the broker network, and ii) that unauthoris broker do not gain inform about event content by monitor which subscript a given event match. for exampl, in the first case an unauthoris broker can creat subscript with appropri chosen filter, rout them toward the root of the event  dissemin tree, and monitor which event were deliv to it as match the subscript. the fact that the event match the subscript would leak inform to the broker about the event content even if the event wa still encrypt. in the second case, even if an unauthoris broker wa unabl to creat subscript itself, it could still look at  subscript that were rout through it, take note of the filter on those subscript, and monitor which event ar deliv to it by upstream broker as match the subscript  filter. thi would again reveal inform about the event content to the unauthoris broker. in the case of encrypt complet event, we also encrypt the complet subscript filter. the event type identifi in the subscript must be left intact to allow broker to rout event base on their topic when thei ar not authoris to access the filter. in such case the unauthoris broker is requir to assum that event of such a type match all filter express. each attribut filter is encrypt individu, much as when encrypt a public. in addit to the event type  identifi the attribut identifi ar also left intact to allow authoris broker to decrypt those filter that thei have access to, and rout the event base on it match the decrypt filter. 3.4 avoid unnecessari cryptograph  oper encrypt the event content is not necessari if the current broker and the next broker down the event dissemin tree have the same credenti with respect to the event type at hand. for exampl, on can assum that all  broker insid an organis would share the same credenti and therefor, as long as the next broker is a member of the same domain, the event can be rout to it in plaintext. with attribut encrypt it is possibl that the  neighbour broker is authoris to access a subset of the decrypt attribut, in which case those attribut that the broker is not authoris to access would be pass to it encrypt. in order to know when it is safe to pass the event in plaintext form, the broker exchang credenti as part of a  handshak when thei connect to each other. in case when the broker ar abl to verifi each other" credenti, thei will add them to the rout tabl for futur refer. if a  broker acquir new credenti after the initi handshak, it will present these new credenti to it neighbour while in session. regardless of it neighbour broker, the phb will alwai encrypt the event content, becaus it is cheaper to encrypt the event onc at the root of the event dissemin tree. in herm the rendezv node for each event type is  select uniformli randomli (the event type name is hash with the sha-1 hash algorithm to produc the event type 108 phb ibib ib shb rn ib shb figur 2: node address is evenli distribut across the network, thu rendezv node mai lie outsid the domain that own an event type ib ib shbphbp s encrypt filter from cach decrypt, deliv decrypt, filter plaintext cach plaintext (most data) cach plaintext (some data) differ domain cyphertext kei figur 3: cach decrypt data to increas  effici when deliv to peer with equival  secur privileg identifi, then the identifi is us to select the rendezv node in the structur overlai network). therefor it is probabl that the rendezv node will resid outsid the current domain. thi situat is illustr in the event dissemin tree in fig. 2. so even with domain intern applic, where the event can be rout from the  publish to all subscrib in plaintext form, the event content will in most case have to be encrypt for it to be rout to the rendezv node. to avoid unnecessari decrypt, we attach a plaintext  content cach to encrypt event. a broker fill the cach with content that it ha decrypt, for exampl, in order to filter on the content. the cach is access by the broker when it deliv an event to a local subscrib after first see if the event match the subscript filter, but the broker also send the cach to the next broker with the encrypt event. the next broker can look the attribut up from the cach instead of have to decrypt it. if the event is be sent to an unauthoris broker, the cach will be discard befor the event is sent. obvious send the cach with the  encrypt event will add to the commun cost, but thi is outweigh by the save in encrypt/decrypt  process. in fig. 3 we see two separ cach plaintext stream accompani an event depend on the inter-broker  relationship in two differ domain. we show in sect. 5.2 that the overhead of send encrypt messag with a full plaintext cach incur almost no  overhead compar to send plaintext messag. 3.5 implement in our implement we have us the eax mode [2] of  oper when encrypt event, attribut, and subscript filter. eax is a mode of oper for block cipher, also call an authent encrypt with associ data (aead) algorithm that provid simultan both data confidenti and integr protect. the algorithm  implement a two-pass scheme where dure the first pass the plain text is encrypt, and on the second pass a messag authent code (mac) is gener for the encrypt data. the eax mode is compat with ani block cipher. we decid to us the advanc encrypt standard (ae) [9] algorithm in our implement, becaus of it standard statu and the fact that the algorithm ha gone through thorough cryptanalysi dure it exist and no seriou vulner have been found thu far. in addit to provid both confidenti and integr protect, the eax mode us the underli block cipher in counter mode (ctr mode) [21]. a block cipher in counter mode is us to produc a stream of kei bit that ar then xore with the plaintext. effect ctr mode  transform a block cipher into a stream cipher. the advantag of stream cipher is that the ciphertext is the same length as the plaintext, wherea with block cipher the plaintext must be pad to a multipl of the block cipher"s block length (e.g. the ae block size is 128 bit). avoid pad is veri import in attribut encrypt, becaus the pad might increas the size of the attribut disproportion. for exampl, a singl integ might be 32 bit in length, which would be pad to 128 bit if we us a block  cipher. with event encrypt the messag expans is not that relev, sinc the length of pad requir to reach the next 16 byte multipl will probabl be a small  proport of the overal plaintext length. in encrypt mode the eax algorithm take as input a nonc (a number us onc), an encrypt kei and the plaintext, and it return the ciphertext and an  authent tag. in decrypt mode the algorithm take as input the encrypt kei, the ciphertext and the authent tag, and it return either the plaintext, or an error if the authent check fail. the nonc is expand to the block length of the  underli block cipher by pass it through an omac construct (see [7]). it is import that particular nonc valu ar not reus, otherwis the block cipher in ctr mode would produc an ident kei stream. in our implement we us the phb defin event timestamp (64-bit valu  count the millisecond sinc januari 1, 1970 utc) append by the phb"s ident (i.e. public kei) as the nonc. the broker is respons for ensur that the timestamp  increas monoton. the authent tag is append to the produc cipher text to creat a two-tupl. with event encrypt a  singl tag is creat for the encrypt event. with attribut 109 encrypt each attribut is encrypt and authent separ, and thei all have their individu tag. the tag length is configur in eax without restrict, which allow the user to make a trade-off between the  authent guarante provid by eax and the ad  commun overhead. we us a tag length of 16 byte in our implement, but on could make the tag length a publish/subscrib defin paramet for each  public/subscript or includ it in the event type definit to make it a type specif paramet. eax also support includ unencrypt associ data in the tag calcul. the integr of thi data is protect, but it is still readabl by everyon. thi featur could be us with event encrypt in case where some of the event content is public and thu would be us for content-base rout. the integr of the data would still be protect against chang, but unauthoris broker would be abl to appli filter. we have includ the event type identifi as associ data in order to protect it integr. other aead algorithm includ the offset codebook mode (ocb) [17] and the counter with cbc-mac mode (ccm) [22]. contrarili to the eax mode the ocb mode requir onli on pass over the plaintext, which make it roughli twice as fast as eax. unfortun the ocb mode ha a patent applic in place in the usa, which restrict it us. the ccm mode is the predecessor of the eax mode. it wa develop in order to provid a free altern to ocb. the eax wa develop later to address some issu with ccm [18]. similarli to eax, ccm is also a two-pass mode. 4. kei manag in both encrypt approach the encrypt event content ha a global uniqu identifi (i.e. the event type or the attribut identifi). that identifi is us to determin the encrypt kei to us when encrypt or decrypt the content. each event type, in event encrypt, and  attribut, in attribut encrypt, ha it own individu  encrypt kei. by control access to the encrypt kei we effect control access to the encrypt event content. in order to control access to the encrypt kei we form a kei group of broker for each individu encrypt kei. the kei group is us to refresh the kei when necessari and to deliv the new kei to all current member of the kei group. the kei group manag is respons for verifi that a new member request to join the kei group is authoris to do so. therefor the kei group manag must be trust by the type owner to enforc the access control polici. we assum that the kei group manag is either a trust third parti or altern a member of the type owner"s domain. in [12] pesonen et al. propos a capabl-base access control architectur for multi-domain publish/subscrib  system. the approach us capabl to decentralis the access control polici amongst the publish/subscrib node (i.e. client and broker): each node hold a set of  capabl that defin the author grant to that node.  author to access a given event type is grant by the owner of that type issu a capabl to a node. the capabl defin the event type, the action, and the attribut that type owner ac broker kei manag 1.grant authoris for number platekei 2.broker request to join number plate kei group 5.if the broker satisfi all check,thei will begin receiv appropri kei. 3.kei manag mai check broker"s credenti at the access control servic 4.kei manag mai check that the type owner permit access figur 4: the step involv for a broker to be  success in join a kei group the node is authoris to access. for exampl, a tupl <np, subscrib, *> would authoris the owner to subscrib to numberpl event with access to all attribut in the  publish event. the sequenc of event requir for a broker to successfulli join a kei group is shown in fig. 4. both the client host broker and the client must be  authoris to make the client"s request. that is, if the client make a subscript request for numberpl event, both the client and the local broker must be authoris to  subscrib to numberpl event. thi is becaus from the  perspect of the broker network, the local broker act as a proxi for the client. we us the same capabl to authoris membership in a kei group that ar us to authoris publish/subscrib  request. not do so could lead to the inconsist situat where a shb is authoris to make a subscript on behalf of it client, but is not abl to decrypt incom event  content for them. in the numberpl exampl abov, the local broker hold the abov capabl is authoris to join the numberpl kei group as well as the kei group for all the attribut in the numberpl event type. 4.1 secur group commun event content encrypt in a decentralis multi-domain publish/subscrib system can be seen as a sub-categori of secur group commun. in both case the kei  manag system must scale well with the number of client, client might be spread over larg geograph area, there might be high rate of churn in group membership, and all member must be synchronis with each other in time in order to us the same encrypt kei at the same time. there ar a number of scalabl kei manag protocol for secur group commun [15]. we have implement the on-wai function tree (oft) [8] protocol as a proof of concept. we chose to implement oft, becaus of it rel simplic and good perform. our  implement us the same structur overlai network us by the broker network as a transport. the oft protocol is base on a binari tree where the particip ar at the leav of the tree. it scale in log2n in process and  commun cost, as well as in the size of the state store at each particip, which we have verifi in our simul. 4.2 kei refresh tradition in group kei manag scheme the  encrypt kei is refresh when a new member join the group, an 110 exist member leav the group, or a timer expir.  refresh the kei when a new member join provid  backward secreci, i.e. the new member is prevent from  access old messag. similarli refresh the kei when an exist member leav provid forward secreci, i.e. the old member is prevent from access futur messag. timer trigger refresh ar issu period in order to limit the damag caus by the current kei be compromis. even though the state-of-the-art kei manag protocol ar effici, refresh the kei unnecessarili introduc  extra traffic and process amongst the kei group member. in our case kei group membership is base on the broker hold a capabl that authoris it to join the kei group. the capabl ha a set of valid condit that in their simplest form defin a time period when the certif is valid, and in more complex case involv on-line check back toward the issuer. in order to avoid unnecessari kei  refresh the kei manag look at the certif valid  condit of the join or leav member. in case of a join member, if the manag can ascertain that the certif wa valid at the time of the previou kei refresh, a new kei refresh can be avoid. similarli, instead of refresh the kei immedi when a member leav the kei group, the kei manag can cach their credenti and refresh the kei onli when the credenti expir. these situat ar both illustr in fig.5. it can be assum that the  credenti grant to broker ar rel static, i.e. onc a domain is authoris to access an event type, the author will be deleg to all broker of that domain, and thei will have the author for the forese futur. more fine grain and dynam access control would be implement at the edg of the broker network between the client and the client host broker. when an encrypt kei is refresh the new kei is tag with a timestamp. the encrypt kei to us for a given event is select base on the event"s public timestamp. the old kei will be kept for a reason amount of time in order to allow for some clock drift. set thi valu is part of the kei manag protocol, although exactli how long thi time should be will depend on the natur of the applic and possibl the size of the network. it can be configur independ per kei group if necessari. 5. evalu in order to evalu the perform of event content  encrypt we have implement both encrypt approach run over our implement of the herm publish/ subscrib middlewar. the implement support three mode: plaintext content, event encrypt, and attribut encrypt, in a singl publish/subscrib system. we ran three perform test in a discret event simul. the simul wa run on an intel p4 3.2ghz workstat with 1gb of main memori. we decid to run the test on an event simul instead of an actual deploi system in order to be abl to measur to aggreg time it take to handl all messag in the system. the follow section describ the specif test setup and the result in more detail. 5.1 end-to-end overhead the end-to-end overhead test show how much the overal messag throughput of the simul wa affect by event content encrypt. we form a broker network with two broker, attach a publish to on of them and a  subscrib to the other on. the subscrib subscrib to the advertis event type without ani filter, i.e. each  public match the subscrib"s public and thu wa deliv to the subscrib. the test measur the  combin time it take to publish and deliv 100,000 event. if the content is encrypt thi includ both encrypt the content at the phb and decrypt it at the shb. in the test the number of attribut in the event type is increas from 1 to 25 (the x-axi). each attribut is set to a 30 charact string. for each number of attribut in the event type the publish publish 100,000 event, and the elaps time is measur to deriv the messag  throughput. the test wa repeat five time for each number of attribut and we us the averag of all iter in the graph, but the result were highli consist so the  standard deviat is not shown. the same test were run with no content encrypt, event encrypt, and attribut  encrypt. as can be seen in fig. 6, event content encrypt introduc a larg overhead compar to not us encrypt. the throughput when us attribut encrypt with an event type with on attribut is 46% of the throughput achiev when event ar sent in plaintext. when the number of attribut increas the perform gap increas as well: with ten attribut the perform with attribut  encrypt ha decreas to 11.7% of plaintext perform. event encrypt fare better, becaus of fewer encrypt oper. the increas in the amount of encrypt data doe not affect the perform as much as the number of individu encrypt oper doe. the differ in perform with event encrypt and attribut  encrypt with onli on attribut is caus by the java object serialis mechan: in the event encrypt case the whole attribut structur is serialis, which result in more object than serialis a singl attribut valu. a more  effici implement would provid it own marshal mechan. note that the eax implement we us run the nonc (i.e. initialis vector) through an omac construct to increas it random. sinc the nonc is not requir to be kept secret (just uniqu), there is a potenti time/space trade-off we have not yet investig in attach extra nonc attribut that have alreadi had thi omac  construct appli to them. 5.2 domain intern event we explain in sect. 3.4 that event content decrypt and encrypt can be avoid if both broker ar authoris to access the event content. thi test wa design to show that the us of the encrypt event content mechan  between two authoris broker incur onli a small  perform overhead. in thi test we again form a broker network with two broker. 111 kei refresh schedul broker 1 join and leav the kei group broker 2 join and leav the kei group actual kei refresh time time on dai broker"s kei group credenti ar valid actual join time actual leav time on dai on dai figur 5: how the kei refresh schedul is affect by broker join and leav kei group 0 5000 10000 15000 20000 25000 30000 35000 0 5 10 15 20 25 messagespersecond number of attribut no encrypt attribut encrypt whole-content encrypt figur 6: throughput of event in a simul both broker ar configur with the same credenti. the publish is attach to on of the broker and the subscrib to the other, and again the subscrib doe not specifi ani filter in it subscript. the publish publish 100,000 event and the test  measur the elaps time in order to deriv the system"s  messag throughput. the event content is encrypt outsid the time measur, i.e. the encrypt cost is not includ in the measur. the goal is to model an environ where a broker ha receiv a messag from anoth  authoris broker, and it rout the event to a third authoris broker. in thi scenario the middl broker doe not need to decrypt nor encrypt the event content. as shown in fig. 2, the elaps time wa measur as the number of attribut in the publish event wa increas from 1 to 25. the attribut valu in each case ar 30  charact string. each test is repeat five time, and we us the averag of all iter in the graph. the same test wa then repeat with no encrypt, event encrypt and  attribut encrypt turn on. the encrypt mode follow each other veri close.  predict, the plaintext mode perform a littl better for all attribut count. the differ can be explain partial by the encrypt event be larger in size, becaus thei includ both the plaintext and the encrypt content in thi test. the differ in perform is 3.7% with on  attribut and 2.5% with 25 attribut. we believ that the rough of the graph can be explain by the java garbag collector interf with the simul. the fact that all three graph show the same irregular support thi theori. 112 50000 55000 60000 65000 70000 75000 80000 85000 90000 95000 100000 0 5 10 15 20 25 messagespersecond number of attribut no encrypt attribut encrypt whole-content encrypt figur 7: throughput of domain intern event 5.3 commun overhead through the definit of multipl event type, it is possibl to emul the express of attribut encrypt us onli event content encrypt. the last test we ran wa to show the commun overhead caus by thi emul techniqu, compar to us real attribut encrypt. in the test we form a broker network of 2000 broker. we attach on publish to on of the broker, and an  increas number of subscrib to the remain broker. each subscrib simul a group of subscrib that all have the same access right to the publish event. each subscrib group ha it own event type in the test. the outcom of thi test is shown in fig. 8. the number of subscrib group is increas from 1 to 50 (the x-axi). for each n subscrib group the publish publish on event to repres the us of attribut encrypt and n event repres the event for each subscrib group. we count the number of hop each public make through the broker network (y-axi). note that fig. 8 show workload beyond what we would expect in common usag, in which mani event type ar like to contain fewer than ten attribut. the subscrib group us in thi test repres disjoint permiss set over such event attribut. the number of these set can be determin from the particular access control polici in us, but will be a valu less than or equal to the factori of the number of attribut in a given event type. the graph indic that attribut encrypt perform  better than event encrypt even for small number of  subscrib group. inde, with onli two subscrib group (e.g. the case with numberpl event) the hop count  increas from 7.2 hop for attribut encrypt to 16.6 hop for event encrypt. with 10 subscrib group the  correspond number ar 24.2 and 251.0, i.e. an order of  magnitud differ. 6. relat work wang et al. have categoris the variou secur issu that need to be address in publish/subscrib system in the futur in [20]. the paper is a comprehens overview of  secur issu in publish/subscrib system and as such tri to draw attent to the issu rather than provid  solut. bacon et al. in [1] examin the us of role-base access  control in multi-domain, distribut publish/subscrib system. their work is complementari to thi paper: distribut rbac is on potenti polici formal that might us the enforc mechan we have present. opyrch and prakash address the problem of event  confidenti at the last link between the subscrib and the shb in [10]. thei correctli state that a secur group  commun approach is infeas in an environ like publish/subscrib that ha highli dynam group  membership. as a solut thei propos a scheme utilis kei cach and subscrib group in order to minimis the number of requir encrypt when deliv a  public from a shb to a set of match subscrib. we  assum in our work that the shb is power enough to  man113 1 10 100 1000 10000 0 5 10 15 20 25 30 35 40 45 50 numberofhopsintot number of subscript group attribut encrypt whole-content encrypt figur 8: hop count when emul attribut encrypt ag a tl secur connect for each local subscrib. both srivatsa et al. [19] and raiciu et al. [16] present  mechan for protect the confidenti of messag in  decentralis publish/subscrib infrastructur. compar to our work both paper aim to provid the mean for  protect the integr and confidenti of messag wherea the goal for our work is to enforc access control insid the  broker network. raiciu et al. assum in their work that none of the broker in the network ar trust and therefor all event ar encrypt from publish to subscrib and that all match is base on encrypt event. in contrast, we assum that some of the broker on the path of a  public ar trust to access that public and ar therefor abl to implement event match. we also assum that the publish and subscrib host broker ar alwai trust to access the public. the contribut of srivatsa et al. and raiciu et al. ar complementari to the contribut in thi paper. final, fieg et al. address the relat topic of event  visibl in [6]. while the work concentr on us scope as mechan for structur larg-scale event-base system, the notion of event visibl doe reson with access  control to some extent. 7. conclus event content encrypt can be us to enforc an access control polici while event ar in transit in the broker  network of a multi-domain publish/subscrib system.  encrypt caus an overhead, but i) there mai be no  altern when access control is requir, and ii) the perform penalti can be lessen with implement optimis, such as pass cach plaintext content alongsid encrypt content between broker with ident secur credenti. thi is particularli appropri if broker-to-broker  connect ar secur by default so that wire-snif is not an issu. attribut level encrypt can be implement in order to enforc fine-grain access control polici. in addit to provid attribut-level access control, attribut encrypt enabl partial authoris broker to implement  contentbas rout base on the attribut that ar access to them. our experi show that i) by cach plaintext and  ciphertext content when possibl, we ar abl to deliv  compar perform to plaintext event, and ii) that  attribut encrypt within an event incur far less overhead than defin separ event type for the attribut that need differ level of protect. in environ compris multipl domain, where  eventbrok have differ secur credenti, we have  quantifi how a trade-off can be made between perform and express. acknowledg we would like to thank the anonym review for their veri help comment. lauri pesonen is support by  epsrc (gr/t28164) and the nokia foundat. david eyer is support by epsrc (gr/s94919). 114 8. refer [1] j. bacon, d. m. eyer, k. moodi, and l. i. w. pesonen. secur publish/subscrib for multi-domain system. in g. alonso, editor, middlewar, volum 3790 of lectur note in comput scienc, page 1-20. springer, 2005. [2] m. bellar, p. rogawai, and d. wagner. eax: a convent authent-encrypt mode. cryptolog eprint archiv, report 2003/069, 2003. http://eprint.iacr.org/. [3] a. carzaniga, d. s. rosenblum, and a. l. wolf. design and evalu of a wide-area event notif servic. acm transact on comput system, 19(3):332-383, aug. 2001. [4] m. castro, p. druschel, a. kermarrec, and a. rowstron. scribe: a larg-scale and decentr applic-level multicast infrastructur. ieee journal on select area in commun (jsac), 20(8):1489-1499, oct. 2002. [5] t. dierk and c. allen. the tl protocol, version 1.0. rfc 2246, internet engin task forc, jan. 1999. [6] l. fieg, m. mezini, g. m uhl, and a. p. buchmann. engin event-base system with scope. in ecoop "02: proceed of the 16th european confer on object-orient program, page 309-333, london, uk, 2002. springer-verlag. [7] t. iwata and i. a. iurosawa. omac: on-kei cbc mac, jan. 14 2002. [8] d. a. mcgrew and a. t. sherman. kei establish in larg dynam group us on-wai function tree. technic report 0755, ti lab at network associ, inc., glenwood, md, mai 1998. [9] nation institut of standard and technolog (nist). advanc encrypt standard (ae). feder inform process standard public (fip pub) 197, nov. 2001. [10] l. opyrch and a. prakash. secur distribut of event in content-base publish subscrib system. in proc. of the 10th usenix secur symposium. usenix, aug. 2001. [11] l. i. w. pesonen and j. bacon. secur event type in content-base, multi-domain publish/subscrib system. in sem "05: proceed of the 5th intern workshop on softwar engin and middlewar, page 98-105, new york, ny, usa, sept. 2005. acm press. [12] l. i. w. pesonen, d. m. eyer, and j. bacon. a capabl-base access control architectur for multi-domain publish/subscrib system. in proceed of the symposium on applic and the internet (saint 2006), page 222-228, phoenix, az, jan. 2006. ieee. [13] p. r. pietzuch and j. m. bacon. herm: a distribut event-base middlewar architectur. in proc. of the 1st intern workshop on distribut event-base system (deb"02), page 611-618, vienna, austria, juli 2002. ieee. [14] p. r. pietzuch and s. bhola. congest control in a reliabl scalabl messag-orient middlewar. in m. endler and d. schmidt, editor, proc. of the 4th int. conf. on middlewar (middlewar "03), page 202-221, rio de janeiro, brazil, june 2003. springer. [15] s. rafa and d. hutchison. a survei of kei manag for secur group commun. acm comput survei, 35(3):309-329, 2003. [16] c. raiciu and d. s. rosenblum. enabl confidenti in content-base publish/subscrib infrastructur. in securecomm "06: proceed of the second ieee/creatnet intern confer on secur and privaci in commun network, 2006. [17] p. rogawai, m. bellar, j. black, and t. krovetz. ocb: a block-cipher mode of oper for effici authent encrypt. in acm confer on comput and commun secur, page 196-205, 2001. [18] p. rogawai and d. wagner. a critiqu of ccm, feb. 2003. [19] m. srivatsa and l. liu. secur publish-subscrib overlai servic with eventguard. in cc "05: proceed of the 12th acm confer on comput and commun secur, page 289-298, new york, ny, usa, 2005. acm press. [20] c. wang, a. carzaniga, d. evan, and a. l. wolf. secur issu and requir in internet-scale publish-subscrib system. in proc. of the 35th annual hawaii intern confer on system scienc (hicss"02), big island, hi, usa, 2002. ieee. [21] d. whitfield and m. hellman. privaci and authent: an introduct to cryptographi. in proceed of the ieee, volum 67, page 397-427, 1979. [22] d. white, r. houslei, and n. ferguson. counter with cbc-mac (ccm). rfc 3610, internet engin task forc, sept. 2003. 115 