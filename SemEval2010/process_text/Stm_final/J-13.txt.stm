on the complex of combinatori auction: structur item graph and hypertre decomposit [extend abstract] georg gottlob comput laboratori oxford univers ox1 3qd oxford, uk georg.gottlob@comlab.ox.ac.uk gianluigi greco dipartimento di matematica univers of calabria i-87030 rend, itali ggreco@mat.unic.it abstract the winner determin problem in combinatori  auction is the problem of determin the alloc of the item among the bidder that maxim the sum of the accept bid price. while thi problem is in gener  nphard, it is known to be feasibl in polynomi time on those instanc whose associ item graph have bound treewidth (call structur item graph). formal, an item graph is a graph whose node ar in on-to-on  correspond with item, and edg ar such that for ani bid, the item occur in it induc a connect subgraph. note that mani item graph might be associ with a given combinatori auction, depend on the edg select for guarante the connected. in fact, the tractabl of determin whether a structur item graph of a fix treewidth exist (and if so, comput on) wa left as a crucial open problem. in thi paper, we solv thi problem by prove that the exist of a structur item graph is computation  intract, even for treewidth 3. motiv by thi bad new, we investig differ kind of structur requir that can be us to isol tractabl class of combinatori  auction. we show that the notion of hypertre decomposit, a recent introduc measur of hypergraph cyclic, turn out to be most us here. inde, we show that the  winner determin problem is solvabl in polynomi time on instanc whose bidder interact can be repres with (dual) hypergraph have bound hypertre width. even more surprisingli, we show that the class of tractabl instanc identifi by mean of our approach properli  contain the class of instanc have a structur item graph. categori and subject descriptor j.4 [comput applic]: social and behavior  scienc-econom; f.2 [theori of comput]:  analysi of algorithm and problem complex 1. introduct combinatori auction. combinatori auction ar well-known mechan for resourc and task alloc where bidder ar allow to simultan bid on  combin of item. thi is desir when a bidder"s valuat of a bundl of item is not equal to the sum of her valuat of the individu item. thi framework is current us to regul agent" interact in sever applic domain (cf., e.g., [21]) such as, electr market [13], bandwidth auction [14], and transport exchang [18]. formal, a combinatori auction is a pair i, b , where i = {i1, ..., im} is the set of item the auction ha to sell, and b = {b1, ..., bn} is the set of bid from the buyer interest in the item in i. each bid bi ha the form item(bi), pai(bi) , where pai(bi) is a ration number denot the price a buyer offer for the item in item(bi) ⊆ i. an outcom for i, b is a subset b of b such that item(bi)∩item(bj) = ∅, for each pair bi and bj of bid in b with i = j. the winner determin problem. a crucial  problem for combinatori auction is to determin the outcom b∗ that maxim the sum of the accept bid price (i.e., bi∈b∗ pai(bi)) over all the possibl outcom. thi  problem, call winner determin problem (e.g., [11]), is known to be intract, actual np-hard [17], and even not approxim in polynomi time unless np = zpp [19]. henc, it come with no surpris that sever effort have been spent to design practic effici algorithm for  gener auction (e.g., [20, 5, 2, 8, 23]) and to identifi class of instanc where solv the winner determin problem is feasibl in polynomi time (e.g., [15, 22, 12, 21]). in fact, constrain bidder interact wa proven to be us for identifi class of tractabl combinatori auction. item graph. current, the most gener class of tractabl combinatori auction ha been singl out by model interact among bidder with the notion of item graph, which is a graph whose node ar in on-to-on correspond with item, and edg ar such that for ani 152 figur 1: exampl maxwsp problem: (a) hypergraph h i0,b0 , and a pack h for it; (b) primal graph for h i0,b0 ; and, (c,d) two item graph for h i0,b0 . bid, the item occur in it induc a connect subgraph. inde, the winner determin problem wa proven to be solvabl in polynomi time if interact among bidder can be repres by mean of a structur item graph, i.e., a tree or, more gener, a graph have tree-like  structur [3]-formal bound treewidth [16]. to have some intuit on how item graph can be built, we notic that bidder interact in a combinatori auction i, b can be repres by mean of a hypergraph h i,b such that it set of node n(h i,b ) coincid with set of item i, and where it edg e(h i,b ) ar precis the bid of the buyer {item(bi) | bi ∈ b}. a special item graph for i, b is the primal graph of h i,b , denot by g(h i,b ), which contain an edg between ani pair of node in some hyperedg of h i,b . then, ani item graph for h i,b can be view as a simplif of g(h i,b ) obtain by delet some edg, yet preserv the connect condit on the node includ in each hyperedg. exampl 1. the hypergraph h i0,b0 report in  figur 1.(a) is an encod for a combinatori auction i0, b0 , where i0 = {i1, ..., i5}, and item(bi) = hi, for each 1 ≤ i ≤ 3. the primal graph for h i0,b0 is report in figur 1.(b), while two exampl item graph ar report in figur 1.(c) and (d), where edg requir for maintain the connect for h1 ar depict in bold. ¡ open problem: comput structur item graph effici. the abov mention tractabl result on structur item graph turn out to be us in practic onli when a structur item graph either is given or can be effici determin. howev, exponenti mani item graph might be associ with a combinatori auction, and it is not clear how to determin whether a structur item graph of a certain (constant) treewidth exist, and if so, how to comput such a structur item graph effici. polynomi time algorithm to find the best  simplif of the primal graph were so far onli known for the case where the item graph to be construct is a line [10], a cycl [4], or a tree [3], but it wa an import open problem (cf. [3]) whether it is tractabl to check if for a combinatori auction, an item graph of treewidth bound by a fix  natur number k exist and can be construct in polynomi time, if so. weight set pack. let us note that the hypergraph represent h i,b of a combinatori auction i, b is also us to make the analog between the winner  determin problem and the maximum weight-set pack problem on hypergraph clear (e.g., [17]). formal, a pack h for a hypergraph h is a set of  hyperedg of h such that for each pair h, h ∈ h with h = h , it hold that h ∩ h = ∅. let w be a weight function for h, i.e., a polynomi-time comput function from e(h) to ration number, the weight of a pack h is the  ration number w(h) = h∈h w(h), where w({}) = 0. then, the maximum-weight set pack problem for h w.r.t. w, denot by maxwsp(h, w), is the problem of find a  pack for h have the maximum weight over all the pack for h. to see that maxwsp is just a differ formul for the winner determin problem, given a  combinatori auction i, b , it is suffici to defin the weight function w i,b (item(bi)) = pai(bi). then, the set of the solut for the weight set pack problem for h i,b w.r.t. w i,b coincid with the set of the solut for the winner determin problem on i, b . exampl 2. consid again the hypergraph h i0,b0  report in figur 1.(a). an exampl pack for h i0,b0 is h = {h1}, which intuit correspond to an outcom for i0, b0 , where the auction accept the bid b1. by  assum that bid b1, b2, and b3 ar such that pai(b1) = pai(b2) = pai(b3), the pack h is not a solut for the problem maxwsp(h i0,b0 , w i0,b0 ). inde, the pack h∗ = {h2, h3} is such that w i0,b0 (h∗ ) > w i0,b0 (h). ¡ contribut the primari aim of thi paper is to identifi larg tractabl class for the winner determin problem, that ar, moreov polynomi recogniz. toward thi aim, we first studi structur item graph and solv the open  problem in [3]. the result is veri bad new: it is np complet to check whether a combinatori  auction ha a structur item graph of treewidth 3. more formal, let c(ig, k) denot the class of all the  hypergraph have an item tree of treewidth bound by k, we prove that decid whether a hypergraph (associ with a combinatori auction problem) belong to c(ig, 3) is np-complet. in the light of thi result, it wa crucial to assess whether there ar some other kind of structur requir that can be check in polynomi time and that can still be us to isol tractabl class of the maximum  weightedset pack problem or, equival, the winner  determin problem. our investig, thi time, led to veri good new which ar summar below: for a hypergraph h, it dual ¯h = (v, e) is such that node in v ar in on-to-on correspond with  hyperedg in h, and for each node x ∈ n(h), {h | x ∈ h ∧ h ∈ 153 e(h)} is in e. we show that maxwsp is tractabl on the class of those instanc whose dual hypergraph have  hypertre width[7] bound by k (short: class c(hw, k) of  hypergraph). note that a kei issu of the tractabl is to consid the hypertre width of the dual hypergraph ¯h  instead of the auction hypergraph h. in fact, we can show that maxwsp remain np-hard even when h is acycl (i.e., when it ha hypertre width 1), even when each node is contain in 3 hyperedg at most. for some relev special class of hypergraph in c(hw, k), we design a higli-paralleliz algorithm for maxwsp. specif, if the weight function can be comput in logarithm space and weight ar  polynomi (e.g., when all the hyperegd have unitari weight and on is interest in find the pack with the  maximum number of edg), we show that maxwsp can be solv by a logcfl algorithm. recal, in fact, that logcfl is the class of decis problem that ar logspac reduc to context free languag, and that logcfl ⊆ nc2 ⊆ p (see, e.g., [9]). surprisingli, we show that noth is lost in term of gener when consid the hypertre decomposit of dual hypergraph instead of the treewidth of item graph. to the contrari, the propos hypertre-base decomposit method is strictli more gener than the method of structur item graph. in fact, we show that strictli larger class of instanc ar tractabl accord to our new approach than accord to the structur item graph approach. intuit, the np-hard of  recogn bound-width structur item graph is thu not due to it great gener, but rather to some peculiar in it definit. the proof of the abov result give us some interest  insight into the notion of structur item graph. inde, we show that structur item graph ar in on-to-on  correspond with some special kind of hypertre  decomposit of the dual hypergraph, which we call strict hypertre decomposit. a game-character for the notion of strict hypertre width is also propos, which special the robber and marshal game in [6] (propos to  character the hypertre width), and which make it clear the further requir on hypertre decomposit. the rest of the paper is organ as follow. section 2  discuss the intract of structur item graph. section 3 present the polynomi-time algorithm for solv maxwsp on the class of those instanc whose dual hypergraph have bound hypertre width, and discuss the case where the algorithm is also highli paralleliz. the comparison  between the class c(ig, k) and c(hw, k) is discuss in  section 4. final, in section 5 we draw our conclus by also outlin direct for further research. 2. complex of structur item graph let h be a hypergraph. a graph g = (v, e) is an item graph for h if v = n(h) and, for each h ∈ e(h), the subgraph of g induc over the node in h is connect. an import class of item graph is that of structur item graph, i.e., of those item graph have bound treewidth as formal below. a tree decomposit [16] of a graph g = (v, e) is a pair t, χ , where t = (n, f) is a tree, and χ is a label function assign to each vertex p ∈ n a set of vertic χ(p) ⊆ v , such that the follow condit ar satisfi: (1) for each vertex b of g, there exist p ∈ n such that b ∈ χ(p); (2) for each edg {b, d} ∈ e, there exist p ∈ n such that {b, d} ⊆ χ(p); (3) for each vertex b of g, the set {p ∈ n | b ∈ χ(p)} induc a connect subtre of t. the width of t, χ is the number maxp∈n |χ(p) − 1|. the treewidth of g, denot by tw(g), is the minimum width over all it tree decomposit. the winner determin problem can be solv in  polynomi time on item graph have bound treewidth [3]. theorem 1 (cf. [3]). assum a k-width tree  decomposit t, χ of an item graph for h is given. then, maxwsp(h, w) can be solv in time o(|t|2 ×(|e(h)|+1)k+1 ). mani item graph can be associ with a hypergraph. as an exampl, observ that the item graph in figur 1.(c) ha treewidth 1, while figur 1.(d) report an item graph whose treewidth is 2. inde, it wa an open question whether for a given constant k it can be check in  polynomi time if an item graph of treewidth k exist, and if so, whether such an item graph can be effici comput. let c(ig, k) denot the class of all the hypergraph have an item graph g such that tw(g) ≤ k. the main result of thi section is to show that the class c(ig, k) is hard to recogn. theorem 2. decid whether a hypergraph h belong to c(ig, 3) is np-hard. the proof of thi result reli on an elabor reduct from the hamiltonian path problem hp(s, t) of decid whether there is an hamiltonian path from a node s to a node t in a direct graph g = (n, e). to help the intuit, we report here a high-level overview of the main ingredi exploit in the proof1 . the gener idea it to build a hypergraph hg such that there is an item graph g for hg with tw(g ) ≤ 3 if and onli if hp(s, t) over g ha a solut. first, we discuss the wai hg is construct. see figur 2.(a) for an illustr, where the graph g consist of the node s, x, y, and t, and the set of it edg is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}. from g to hg. let g = (n, e) be a direct graph. then, the set of the node in hg is such that: for each x ∈ n, n(hg) contain the node bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ e, n(hg) contain the node nsx, nsx, nty, nty , nse x and nte y. no other node is in n(hg). hyperedg in hg ar of three kind: 1) for each x ∈ n, e(hg) contain the hyperedg: • sx = {bsx} ∪ {nse x | e = (x, y) ∈ e}; • tx = {btx} ∪ {nte x | e = (z, x) ∈ e}; • a1 x = {bdx, bx}, a2 x = {bdx, bx}, and a3 x = {bx, bx} -notic that these hyperedg induc a cliqu on the node {bx, bx, bdx}; 1 detail proof can be found in the appendix, avail at www.mat.unic.it/∼ggreco/paper/ca.pdf. 154 figur 2: proof of theorem 2: (a) from g to hg - hyperedg in 1) and 2) ar report onli; (b) a skeleton for a tree decomposit td for hg. • sa1 x = {bsx, bx}, sa2 x = {bsx, bx}, sa3 x = {bsx, bdx} -notic that these hyperedg plu a1 x, a2 x, and a3 x induc a cliqu on the node {bsx, bx, bx, bdx}; • ta1 x = {btx, bx}, ta2 x = {btx, bx}, and ta3 x = {btx, bdx} -notic that these hyperedg plu a1 x, a2 x, and a3 x induc a cliqu on the node {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ e, e(hg) contain the hyperedg: • shx = {nsx, nsx}; • thy = {nty, nty }; • see = {nsx, nse x} and see = {nsx, nse x} -notic that these two hyperedg plu shx induc a cliqu on the node {nsx, nsx, nse x}; • tee = {nty, nte y} and tee = {nty , nte y} -notic that these two hyperedg plu thy induc a cliqu on the node {nty, nty , nte y}. notic that each of the abov hyperedg but those of the form sx and tx contain exactli two node. as an exampl of the hyperedg of kind 1) and 2), the reader mai refer to the exampl construct report in figur 2.(a), and notic, for instanc, that sx = {bsx, nse2 x , nse3 x } and that tt = {btt, nte4 t , nte3 t }. 3) final, we denot by dg the set contain the  hyperedg in e(hg) of the third kind. in the  reduct we ar exploit, dg can be an arbitrari set of hyperedg satisfi the four condit that ar discuss below. let pg be the set of the follow |pg| ≤ |n| + 3 × |e| pair: pg = {(bx, bx) | x ∈ n} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ e}. also, let i(v) denot the set {h ∈ e(h) | v ∈ h} of the hyperedg of h that ar touch by v; and, for a set v ⊆ n(h), let i(v ) = v∈v i(v). then, dg ha to be a set such that: (c1) ∀(α, β) ∈ pg, i(α) ∩ i(β) ∩ dg = ∅; (c2) ∀(α, β) ∈ pg, i(α) ∪ i(β) ⊇ dg; (c3) ∀α ∈ n such that ∃β ∈ n with (α, β) ∈ pg or (β, α) ∈ pg, it hold: i(α) ∩ dg = ∅; and, (c4) ∀s ⊆ n such that |s| ≤ 3 and where ∃α, β ∈ s with (α, β) ∈ pg, it is the case that: i(s) ⊇ dg. intuit, the set dg is such that each of it hyperedg is touch by exactli on of the two node in everi pair 155 of pg - cf. (c1) and (c2). moreov, hyperedg in dg touch onli vertic includ in at least a pair of pg - cf. (c3); and, ani tripl of node is not capabl of touch all the element of dg if none of the pair that can be built from it belong to pg - cf. (c4). the reader mai now ask whether a set dg exist at all satisfi (c1), (c2), (c3) and (c4). in the follow lemma, we posit answer thi question and refer the reader to it proof for an exampl construct. lemma 1. a set dg, with |dg| = 2 × |pg| + 2,  satisfi condit (c1), (c2), (c3), and (c4) can be built in time o(|pg|2 ). kei ingredi. we ar now in the posit of present an overview of the kei ingredi of the proof. let g be an arbitrari item graph for hg, and let td = t, χ be a 3-width tree decomposit of g (note that, becaus of the cliqu, e.g., on the node {bsx, bx, bx, bdx}, ani item graph for hg ha treewidth 3 at least). there ar three basic observ serv the purpos of prove the correct of the reduct. block of td: first, we observ that td must contain some special kind of vertex. specif, for each node x ∈ n, td contain a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}. and, for each edg e = (x, y) ∈ e, td contain a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }. intuit, these vertic ar requir to cover the cliqu of hg associ with the hyperedg of kind 1) and 2). each of these vertic plai a specif role in the reduct. inde, each direct edg e = (x, y) ∈ e is encod in td by mean of the vertic: ns(x,e), repres precis that e start from x; and, nt(y,e), repres precis that e  termin into y. also, each node x ∈ n is encod in td be mean of the vertic: bs(x), repres the start point of edg origin from x; and, bt(x), repres the termin point of edg end into x. as an exampl, figur 2.(b) report the skeleton of a tree decomposit td. the reader mai notic in it the block defin abov and how thei ar  relat with the hypergraph hg in figur 2.(a) - other block in it (of the form w(x,y)) ar defin next. connected between block, and uniqu of the connect: the second  crucial observ is that in the path connect a  vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is on special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edg e = (x, y) ∈ e.  guarante the exist of on such vertex is precis the role plai by the hyperedg in dg. the  argument for the proof ar as follow. first, we  observ that i(χ(bs(x))) ∩ i(χ(ns(x,e))) ⊇ dg ∪ {sx} and i(χ(bt(y))) ∩ i(χ(nt(y,e))) ⊇ dg ∪ {ty}. then, we show a properti state that for a pair of  consecut vertic p and q in the path connect bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), i(χ(p) ∩ χ(q)) ⊇ i(χ(bs(x))) ∩ i(χ(ns(x,e))) (resp., i(χ(p) ∩ χ(q)) ⊇ i(χ(bt(x))) ∩ i(χ(nt(y,e)))). thu, we have: i(χ(p) ∩ χ(q)) ⊇ dg ∪{sx} (resp., i(χ(p)∩χ(q)) ⊇ dg ∪{ty}). base on thi observ, and by exploit the  properti of the hyperedg in dg, it is not difficult to show that ani pair of consecut vertic p and q must share two node of hg form a pair in pg, and must both touch sx (resp., ty). when the treewidth of g is 3, we can conclud that a vertex, sai w(x,y), in thi path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edg e = (x, y) ∈ e - to thi end, note that nse x ∈ sx, nte t ∈ ty, and i(χ(w(x,y))) ⊇ dg. in  particular, w(x,y) is the onli kind of vertex satisfi these condit, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x). to help the intuit, we observ that have a vertex of the form w(x,y) in td correspond to the select of an edg from node x to node y in the hamiltonian path. in fact, given the uniqu of these vertic  select for ensur the connect, a on-to-on  correspond can be establish between the exist of a hamiltonian path for g and the vertic of the form w(x,y). as an exampl, in figur 2.(b), the  vertic of the form w(s,x), w(x,y), and w(y,t) ar in td, and gt d show the correspond hamiltonian path. unus block: final, the third ingredi of the proof is the observ that if a vertex of the form w(x,y), for an edg e = (x, y) ∈ e is not in td (i.e., if the edg (x, y) doe not belong to the hamiltonian path), then the correspond block ns(x,e ) (resp., nt(y,e )) can be arbitrarili append in the subtre root at the block ns(x,e) (resp., nt(y,e)), where e is the edg of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in td. e.g., figur 2.(a) show w(x,t), which is not us in td, and figur 2.(b) show how the block ns(x,e3) and nt(t,e3) can be arrang in td for ensur the connected condit. 3. tractabl case via hypertre decomposit sinc construct structur item graph is intract, it is relev to assess whether other structur restrict can be us to singl out class of tractabl maxwsp instanc. to thi end, we focu on the notion of hypertre  decomposit [7], which is a natur gener of hypergraph acycl and which ha been profit us in other  domain, e.g, constraint satisfact and databas queri  evalu, to identifi tractabl island for np-hard problem. a hypertre for a hypergraph h is a tripl t, χ, λ , where t = (n, e) is a root tree, and χ and λ ar label function which associ each vertex p ∈ n with two set χ(p) ⊆ n(h) and λ(p) ⊆ e(h). if t = (n , e ) is a subtre of t, we defin χ(t ) = v∈n χ(v). we denot the set of vertic n of t by vertic(t). moreov, for ani p ∈ n, tp denot the subtre of t root at p. definit 1. a hypertre decomposit of a  hypergraph h is a hypertre hd = t, χ, λ for h which satisfi all the follow condit: 1. for each edg h ∈ e(h), there exist p ∈ vertic(t) such that h ⊆ χ(p) (we sai that p cover h); 156 figur 3: exampl maxwsp problem: (a) hypergraph h1; (b) hypergraph ¯h1; (b) a 2-width hypertre decomposit of ¯h1. 2. for each node y ∈ n(h), the set {p ∈ vertic(t) | y ∈ χ(p)} induc a (connect) subtre of t; 3. for each p ∈ vertic(t), χ(p) ⊆ n(λ(p)); 4. for each p ∈ vertic(t), n(λ(p)) ∩ χ(tp) ⊆ χ(p). the width of a hypertre decomposit t, χ, λ is maxp∈vertic(t )|λ(p)|. the hypertre width hw(h) of h is the minimum width over all it hypertre decomposit. a hypergraph h is acycl if hw(h) = 1. p exampl 3. the hypergraph h i0,b0 report in  figur 1.(a) is an exampl acycl hypergraph. instead, both the hypergraph h1 and ¯h1 shown in figur 3.(a) and  figur 3.(b), respect, ar not acycl sinc their hypertre width is 2. a 2-width hypertre decomposit for ¯h1 is report in figur 3.(c). in particular, observ that h1 ha been obtain by ad the two hyperedg h4 and h5 to h i0,b0 to model, for instanc, that two new bid, b4 and b5, respect, have been propos to the auction. ¡ in the follow, rather than work on the hypergraph h associ with a maxwsp problem, we shall deal with it dual ¯h, i.e., with the hypergraph such that it node ar in on-to-on correspond with the hyperedg of h, and where for each node x ∈ n(h), {h | x ∈ h ∧ h ∈ e(h)} is in e( ¯h). as an exampl, the reader mai want to check again the hypergraph h1 in figur 3.(a) and notic that the hypergraph in figur 3.(b) is in fact it dual. the rational for thi choic is that issu restrict on the origin hypergraph is a guarante for the tractabl onli in veri simpl scenario. theorem 3. on the class of acycl hypergraph, maxwsp is (1) in p if each node occur into two hyperedg at most; and, (2) np-hard, even if each node is contain into three hyperedg at most. 3.1 hypertre decomposit on the dual hypergraph and tractabl pack problem for a fix constant k, let c(hw, k) denot the class of all the hypergraph whose dual hypergraph have  hypertre width bound by k. the maximum weight-set  pack problem can be solv in polynomi time on the class c(hw, k) by mean of the algorithm computesetpackingk, shown in figur 4. the algorithm receiv in input a hypergraph h, a  weight function w, and a k-width hypertre decomposit hd = t=(n, e), χ, λ of ¯h. for each vertex v ∈ n, let hv be the hypergraph whose set of node n(hv) ⊆ n(h) coincid with λ(v), and whose set of edg e(hv) ⊆ e(h) coincid with χ(v). in an  initi step, the algorithm equip each vertex v with all the possibl pack for hv, which ar store in the set hv. note that the size of hv is bound by (|e(h)| + 1)k , sinc each node in λ(v) is either left uncov in a  pack or is cover with precis on of the hyperedg in χ(v) ⊆ e(h). then, computesetpackingk is design to filter these pack by retain onli those that conform with some pack for hc, for each children c of v in t, as formal next. let hv and hc be two pack for hv and hc, respect. we sai that hv conform with hc, denot by hv ≈ hc if: for each h ∈ hc ∩ e(hv), h is in hv; and, for each h ∈ (e(hc) − hc), h is not in hv. exampl 4. consid again the hypertre  decomposit of ¯h1 report in figur 3.(c). then, the set of all the possibl pack (which ar build in the initi step of computesetpackingk), for each of it vertic, is  refigur 5: exampl applic of algorithm computesetpackingk. 157 input: h, w, and a k-width hypertre decomposit hd = t =(n, e), χ, λ of ¯h; output: a solut to maxwsp(h, w); var hv : set of pack for hv, for each v ∈ n; h∗ : pack for h; v hv : ration number, for each partial pack hv for hv; hhv,c : partial pack for hc, for each partial pack hv for hv, and for each (v, c) ∈ e;  -------------------------------------------procedur bottomup; begin done := the set of all the leav of t ; while ∃v ∈ t such that (i) v ∈ done, and (ii) {c | c is child of v} ⊆ done do for each c such that (v, c) ∈ e do hv := hv − {hv | ∃hc ∈ hc s.t. hv ≈ hc}; for each hv ∈ hv do v hv := w(hv); for each c such that (v, c) ∈ e do ¯hc := arg maxhc∈hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best pack *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for done := done ∪ {v}; end while end;  -------------------------------------------begin (* main *) for each vertex v in t do hv := {hv pack for hv}; bottomup; let r be the root of t ; ¯hr := arg maxhr∈hr r hr ; h∗ := ¯hr; (* includ pack *) t opdown(r, hr); return h∗ ; end. procedur t opdown(v : vertex of n, ¯hv ∈ hv); begin for each c ∈ n s.t. (v, c) ∈ e do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* includ pack *) t opdown(c, ¯hc); end for end; figur 4: algorithm computesetpackingk. port in figur 5.(a). for instanc, the root v1 is such that hv1 = { {}, {h1}, {h3}, {h5} }. moreov, an arrow from a pack hc to hv denot that hv conform with hc. for instanc, the reader mai check that the pack {h3} ∈ hv1 conform with the pack {h2, h3} ∈ hv3 , but do not conform with {h1} ∈ hv3 . ¡ computesetpackingk build a solut by travers t in two phase. in the first phase, vertic of t ar process from the leav to the root r, by mean of the procedur bottomup. for each node v be process, the set hv is preliminari updat by remov all the pack hv that do not conform with ani pack for some of the children of v. after thi filter is perform, the weight hv is  updat. intuit, v hv store the weight of the best partial pack for h comput by us onli the hyperedg  occur in χ(tv). inde, if v is a leaf, then v hv = w(hv). otherwis, for each child c of v in t, v hv is updat with the maximum of c hc − w(hc ∩ hv) over all the pack hc that conform with hv (resolv ti arbitrarili). the  pack ¯hc for which thi maximum is achiev is store in the variabl hhv,c. in the second phase, the tree t is process start from the root. firstli, the pack h∗ is select that maxim the weight equip with the pack in hr. then,  procedur topdown is us to extend h∗ to all the other partial pack for vertic of t. in particular, at each vertex v, h∗ is extend with the pack hhv,c, for each child c of v. exampl 5. assum that, in our run exampl, w(h1) = w(h2) = w(h3) = w(h4) = 1. then, an  execut of computesetpackingk is graphic depict in figur 5.(b), where an arrow from a pack hc to a  pack hv is us to denot that hc = hhv,c. specif, the choic made dure the comput ar such that the  pack {h2, h3} is comput. in particular, dure the bottom-up phase, we have that: (1) v4 is process, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is process, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is process, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is process and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0. for instanc, note that v1 {h5} = 2 sinc {h5} conform with the pack {h4} of hv2 such that v2 {h4} = 1. then, at the begin of the top-down phase, computesetpackingk select {h3} as a pack for hv1 and propag thi choic in the tree. equival, the  algorithm mai have chosen {h5}. as a further exampl, the wai the solut {h1} is  obtain by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is report in figur 5.(c). notic that, thi time, in the top-down phase, computesetpackingk start select {h1} as the best pack for hv1 . ¡ theorem 4. let h be a hypergraph and w be a weight function for it. let hd = t, χ, λ be a complet k-width hypertre decomposit of ¯h. then, computesetpackingk on input h, w, and hd correctli output a solut for maxwsp(h, w) in time o(|t| × (|e(h)| + 1)2k ). proof. [sketch] we observ that h∗ (comput by computesetpackingk) is a pack for h. inde, consid a pair of hyperedg h1 and h2 in h∗ , and assum, for the sake of contradict, that h1 ∩ h2 = ∅. let v1 (resp., v2) be an arbitrari vertex of t, for which computesetpackingk includ h1 (resp., h2) in h∗ in the bottom-down  comput. by construct, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 let i be an element in h1 ∩ h2. in the dual hypergraph h, i is a hyperedg in e( ¯h) which cover both the node h1 and h2. henc, by condit (1) in definit 1, there is a vertex v ∈ vertic(t) such that {h1, h2} ⊆ χ(v). note that, becaus of the connected condit in definit 1, we can also assum, w.l.o.g., that v is in the path connect v1 and v2 in t. let hv ∈ hv denot the element ad by computesetpackingk into h∗ dure the bottom-down phase. sinc the element in hv ar pack for hv, it is the case that either h1 ∈ hv or h2 ∈ hv. assum, w.l.o.g., that h1 ∈ hv, and notic that each vertex w in t in the path  connect v to v1 is such that h1 ∈ χ(w), becaus of the  connected condit. henc, becaus of definit of  conform, the pack hw select by computesetpackingk to be ad at vertex w in h∗ must be such that h1 ∈ hw. thi hold in particular for w = v1. contradict with the definit of v1. therefor, h∗ is a pack for h. it remain then to show that it ha the maximum weight over all the pack for h. to thi aim, we can us structur induct on t to prove that, in the bottom-up phase, the variabl v hv is updat to contain the weight of the pack on the edg in χ(tv), which contain hv and which ha the maximum weight over all such pack for the edg in χ(tv). then, the result follow, sinc in the top-down phase, the pack hr give the maximum weight over χ(tr) = e(h) is first includ in h∗ , and then extend at each node c with the pack hhv,c conformingli with hv and such that the maximum valu of v hv is achiev. as for the complex, observ that the initi step requir the construct of the set hv, for each vertex v, and each set ha size (|e(h)| + 1)k at most. then, the function bottomup check for the conform between strategi in hv with strategi in hc, for each pair (v, c) ∈ e, and updat the weight v hv . these task can be carri out in time o((|e(h)| + 1)2k ) and must be repeat for each edg in t, i.e., o(|t|) time. final, the function topdown can be implement in linear time in the size of t, sinc it just requir updat h∗ by access the variabl hhv,c. the abov result show that if a hypertre decomposit of width k is given, the maxwsp problem can be effici solv. moreov, differ from the case of structur item graph, it is well known that decid the exist of a k-bound hypertre decomposit and comput on (if ani) ar problem which can be effici solv in  polynomi time [7]. therefor, theorem 4 wit that the class c(hw, k) actual constitut a tractabl class for the winner determin problem. as the follow theorem show, for larg subclass (that depend onli on how the weight function is specifi), maxwsp(h, w) is even highli paralleliz. let us call a weight function smooth if it is logspac comput and if all weight ar polynomi (and thu just requir o(log n) bit for their represent). recal that logcfl is a  parallel complex class contain in nc2, cf. [9]. the  function version of logcfl is llogcfl , which is obtain by equip a logspac transduc with an oracl in logcfl. theorem 5. let h be a hypergraph in c(hw, k), and let w be a smooth weight function for it. then, maxwsp(h, w) is in llogcfl . 4. hypertre decomposit vs structur item graph given that the class c(hw, k) ha been shown to be an island of tractabl for the winner determin problem, and given that the class c(ig, k) ha been shown not to be effici recogniz, on mai be inclin to think that there ar instanc have unbound hypertre width, but admit an item graph of bound tree width (so that the intract of structur item graph would lie in their gener). surprisingli, we establish thi is not the case. the line of the proof is to first show that structur item graph ar in on-to-on correspond with a special kind of hypertre decomposit of the dual hypergraph, which we shall call strict. then, the result will follow by prove that k-width strict hypertre decomposit ar less power than  kwith hypertre decomposit. 4.1 strict hypertre decomposit let h be a hypergraph, and let v ⊆ n(h) be a set of node and x, y ∈ n(h). x is [v ]-adjac to y if there exist an edg h ∈ e(h) such that {x, y } ⊆ (h − v ). a [v ]-path π from x to y is a sequenc x = x0, . . . , x = y of variabl such that: xi is [v ]-adjac to xi+1, for each i ∈ [0... -1]. a set w ⊆ n(h) of node is [v ]-connect if ∀x, y ∈ w there is a [v ]-path from x to y . a [v ]-compon is a maxim [v ]-connect non-empti set of node w ⊆ (n(h) − v ). for ani [v ]-compon c, let e(c) = {h ∈ e(h) | h ∩ c = ∅}. definit 2. a hypertre decomposit hd = t, χ, λ of h is strict if the follow condit hold: 1. for each pair of vertic r and s in vertic(t) such that s is a child of r, and for each [χ(r)]-compon cr s.t. cr ∩ χ(ts) = ∅, cr is a [χ(r) ∩ n(λ(r) ∩ λ(s))]-compon; 2. for each edg h ∈ e(h), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we sai p strongli cover h); 3. for each edg h ∈ e(h), the set {p ∈ vertic(t) | h ∈ λ(p)} induc a (connect) subtre of t. the strict hypertre width shw(h) of h is the minimum width over all it strict hypertre decomposit. p the basic relationship between nice hypertre  decomposit and structur item graph is shown in the follow theorem. theorem 6. let h be a hypergraph such that for each node v ∈ n(h), {v} is in e(h). then, a k-width tree  decomposit of an item graph for h exist if and onli if ¯h ha a (k + 1)-width strict hypertre decomposit2 . note that, as far as the maximum weight-set pack problem is concern, given a hypergraph h, we can alwai assum that for each node v ∈ n(h), {v} is in e(h). in fact, if thi hyperedg is not in the hypergraph, then it can be ad without loss of gener, by set w({v}) = 0. therefor, let c(shw, k) denot the class of all the  hypergraph whose dual hypergraph (associ with maximum 2 the term +1 onli plai the technic role of take care of the differ definit of width for tree decomposit and hypertre decomposit. 159 weight-set pack problem) have strict hypertre width bound by k, we have that c(shw, k + 1) = c(ig, k). by definit, strict hypertre decomposit ar special hypertre decomposit. in fact, we ar abl to show that the addit condit in definit 2 induc an actual restrict on the decomposit power. theorem 7. c(ig, k) = c(shw, k + 1) ⊂ c(hw, k + 1). a game theoret view. we shed further light on strict hypertre decomposit by discuss an interest character base on the strict robber and marshal game, defin by adapt the robber and marshal game defin in [6], which character hypertre width. the game is plai on a hypergraph h by a robber against k marshal which act in coordin. marshal move on the hyperedg of h, while the robber move on node of h. the robber see where the marshal intend to move, and react by move to anoth node which is connect with it current posit and through a path in g(h) which doe not us ani node contain in a hyperedg that is occupi by the marshal befor and after their move-we sai that these hyperedg ar block. note that in the basic game defin in [6], the robber is not allow to move on vertic that ar occupi by the marshal befor and after their move, even if thei do not belong to block hyperedg. importantli, marshal ar requir to plai monoton, i.e., thei cannot occupi an edg that wa previous  occupi in the game, and which is current not. the marshal win the game if thei captur the robber, by occupi an edg cover a node where the robber is. otherwis, the robber win. theorem 8. let h be a hypergraph such that for each node v ∈ n(h), {v} is in e(h). then, ¯h ha a k-width strict hypertre decomposit if and onli if k marshal can win the strict robber and marshal game on ¯h, no matter of the robber"s move. 5. conclus we have solv the open question of determin the complex of comput a structur item graph  associ with a combinatori auction scenario. the result is bad new, sinc it turn out that it is np-complet to check whether a combinatori auction ha a structur item graph, even for treewidth 3. motiv by thi result, we  investig the us of hypertre decomposit (on the dual hypergraph associ with the scenario) and we shown that the problem is tractabl on the class of those instanc whose dual hypergraph have bound hypertre width. for some special, yet relev case, a highli paralleliz algorithm is also discuss. interestingli, it also emerg that the class of structur item graph is properli contain in the class of instanc have bound hypertre width (henc, the reason of their intract is not their gener). in particular, the latter result is establish by show a precis relationship between structur item graph and restrict form of hypertre decomposit (on the dual hypergraph), call queri decomposit (see, e.g., [7]). in the light of thi observ, we note that prove some  approxim result for structur item graph requir a deep understand of the approxim of queri  decomposit, which is current miss in the literatur. as a further avenu of research, it would be relev to enhanc the algorithm computesetpackingk, e.g., by us special data structur, in order to avoid the quadrat depend from (|e(h)| + 1)k . final, an other interest question is to assess whether the structur decomposit techniqu discuss in the  paper can be us to effici deal with gener of the winner determin problem. for instanc, it might be  relev in sever applic scenario to design algorithm that can find a sell strategi when sever copi of the same item ar avail for sell, and when moreov the auction is satisfi when at least a given number of copi is actual sold. acknowledg g. gottlob"s work wa support by the ec3 - e-commerc compet center (vienna) and by a royal societi  wolfson research merit award. in particular, thi award  allow gottlob to invit g. greco for a research visit to  oxford. in addit, g. greco is support by icar-cnr, and by m.i.u.r. under project tocai.it. 6. refer [1] i. adler, g. gottlob, and m. grohe. hypertre-width and relat hypergraph invari. in proc. of eurocomb"05, page 5-10, 2005. [2] c. boutili. solv concis express combinatori auction problem. in proc. of aaai"02, page 359-366, 2002. [3] v. conitz, j. derryberri, and t. sandholm. combinatori auction with structur item graph. in proc. of aaai"04, page 212-218, 2004. [4] e. m. eschen and j. p. sinrad. an o(n2 ) algorithm for circular-arc graph recognit. in proc. of soda"93, page 128-137, 1993. [5] y. fujishima, k. leyton-brown, and y. shoham. tame the comput complex of combinatori auction: optim and approxim. in proc. of ijcai"99, page 548-553, 1999. [6] g. gottlob, n. leon, and f. scarcello. robber, marshal, and guard: game theoret and logic character of hypertre width. journal of comput and system scienc, 66(4):775-808, 2003. [7] g. gottlob, n. leon, and s. scarcello. hypertre decomposit and tractabl queri. journal of comput and system scienc, 63(3):579-627, 2002. [8] h. h. hoo and c. boutili. solv combinatori auction us stochast local search. in proc. of aaai"00, page 22-29, 2000. [9] d. johnson. a catalog of complex class. in p. cramton, y. shoham, and r. steinberg, editor, handbook of theoret comput scienc, volum a: algorithm and complex, page 67-161. 1990. [10] n. kort and r. h. mohr. an increment linear-time algorithm for recogn interv graph. siam journal on comput, 18(1):68-81, 1989. [11] d. lehmann, r. m¨uller, and t. sandholm. the winner determin problem. in p. cramton, y. shoham, and r. steinberg, editor, combinatori auction. mit press, 2006. [12] d. lehmann, l. i. o"callaghan, and y. shoham. truth revel in approxim effici 160 combinatori auction. j. acm, 49(5):577-602, 2002. [13] r. mcafe and j. mcmillan. analyz the airwav auction. journal of econom perspect, 10(1):159175, 1996. [14] j. mcmillan. sell spectrum right. journal of econom perspect, 8(3):145-62, 1994. [15] n. nisan. bid and alloc in combinatori auction. in proc. of ec"00, page 1-12, 2000. [16] n. robertson and p. seymour. graph minor ii. algorithm aspect of tree width. journal of algorithm, 7:309-322, 1986. [17] m. h. rothkopf, a. pekec, and r. m. harstad. computation manag combinatori auction. manag scienc, 44:1131-1147, 1998. [18] t. sandholm. an implement of the contract net protocol base on margin cost calcul. in proc. of aaai"93, page 256-262, 1993. [19] t. sandholm. algorithm for optim winner determin in combinatori auction. artifici intellig, 135(1-2):1-54, 2002. [20] t. sandholm. winner determin algorithm. in p. cramton, y. shoham, and r. steinberg, editor, combinatori auction. mit press, 2006. [21] t. sandholm and s. suri. bob: improv winner determin in combinatori auction and gener. artifici intellig, 7:33-58, 2003. [22] m. tennenholtz. some tractabl combinatori auction. in proc. of aaai"00, page 98-103, 2000. [23] e. zurel and n. nisan. an effici approxim alloc algorithm for combinatori auction. in proc. of ec"01, page 125-136, 2001. 161 